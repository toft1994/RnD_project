// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nnlayer_compute_add_Pipeline_execute (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1_stream_dout,
        in1_stream_empty_n,
        in1_stream_read,
        in2_stream_dout,
        in2_stream_empty_n,
        in2_stream_read,
        out_stream_din,
        out_stream_full_n,
        out_stream_write,
        vSize_loc_load
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [511:0] in1_stream_dout;
input   in1_stream_empty_n;
output   in1_stream_read;
input  [511:0] in2_stream_dout;
input   in2_stream_empty_n;
output   in2_stream_read;
output  [511:0] out_stream_din;
input   out_stream_full_n;
output   out_stream_write;
input  [28:0] vSize_loc_load;

reg ap_idle;
reg in1_stream_read;
reg in2_stream_read;
reg out_stream_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln92_fu_147_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in1_stream_blk_n;
wire    ap_block_pp0_stage0;
reg    in2_stream_blk_n;
reg    out_stream_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] add_ln189_fu_472_p2;
reg   [31:0] add_ln189_reg_600;
wire   [31:0] add_ln189_1_fu_478_p2;
reg   [31:0] add_ln189_1_reg_605;
wire   [31:0] add_ln189_2_fu_484_p2;
reg   [31:0] add_ln189_2_reg_610;
wire   [31:0] add_ln189_3_fu_490_p2;
reg   [31:0] add_ln189_3_reg_615;
wire   [31:0] add_ln189_4_fu_496_p2;
reg   [31:0] add_ln189_4_reg_620;
wire   [31:0] add_ln189_5_fu_502_p2;
reg   [31:0] add_ln189_5_reg_625;
wire   [31:0] add_ln189_6_fu_508_p2;
reg   [31:0] add_ln189_6_reg_630;
wire   [31:0] add_ln189_7_fu_514_p2;
reg   [31:0] add_ln189_7_reg_635;
wire   [31:0] add_ln189_8_fu_520_p2;
reg   [31:0] add_ln189_8_reg_640;
wire   [31:0] add_ln189_9_fu_526_p2;
reg   [31:0] add_ln189_9_reg_645;
wire   [31:0] add_ln189_10_fu_532_p2;
reg   [31:0] add_ln189_10_reg_650;
wire   [31:0] add_ln189_11_fu_538_p2;
reg   [31:0] add_ln189_11_reg_655;
wire   [31:0] add_ln189_12_fu_544_p2;
reg   [31:0] add_ln189_12_reg_660;
wire   [31:0] add_ln189_13_fu_550_p2;
reg   [31:0] add_ln189_13_reg_665;
wire   [31:0] add_ln189_14_fu_556_p2;
reg   [31:0] add_ln189_14_reg_670;
wire   [31:0] add_ln189_15_fu_562_p2;
reg   [31:0] add_ln189_15_reg_675;
reg   [27:0] i_fu_106;
wire   [27:0] i_1_fu_153_p2;
wire    ap_loop_init;
reg   [27:0] ap_sig_allocacmp_i_load;
reg    ap_block_pp0_stage0_01001;
wire   [28:0] i_cast_fu_143_p1;
wire   [31:0] trunc_ln144_fu_164_p1;
wire   [31:0] trunc_ln264_fu_318_p1;
wire   [31:0] trunc_ln144_1_fu_168_p4;
wire   [31:0] trunc_ln264_1_fu_322_p4;
wire   [31:0] trunc_ln144_2_fu_178_p4;
wire   [31:0] trunc_ln264_2_fu_332_p4;
wire   [31:0] trunc_ln144_3_fu_188_p4;
wire   [31:0] trunc_ln264_3_fu_342_p4;
wire   [31:0] trunc_ln144_4_fu_198_p4;
wire   [31:0] trunc_ln264_4_fu_352_p4;
wire   [31:0] trunc_ln144_5_fu_208_p4;
wire   [31:0] trunc_ln264_5_fu_362_p4;
wire   [31:0] trunc_ln144_6_fu_218_p4;
wire   [31:0] trunc_ln264_6_fu_372_p4;
wire   [31:0] trunc_ln144_7_fu_228_p4;
wire   [31:0] trunc_ln264_7_fu_382_p4;
wire   [31:0] trunc_ln144_8_fu_238_p4;
wire   [31:0] trunc_ln264_8_fu_392_p4;
wire   [31:0] trunc_ln144_9_fu_248_p4;
wire   [31:0] trunc_ln264_9_fu_402_p4;
wire   [31:0] trunc_ln144_s_fu_258_p4;
wire   [31:0] trunc_ln264_s_fu_412_p4;
wire   [31:0] trunc_ln144_10_fu_268_p4;
wire   [31:0] trunc_ln264_10_fu_422_p4;
wire   [31:0] trunc_ln144_11_fu_278_p4;
wire   [31:0] trunc_ln264_11_fu_432_p4;
wire   [31:0] trunc_ln144_12_fu_288_p4;
wire   [31:0] trunc_ln264_12_fu_442_p4;
wire   [31:0] trunc_ln144_13_fu_298_p4;
wire   [31:0] trunc_ln264_13_fu_452_p4;
wire   [31:0] trunc_ln144_14_fu_308_p4;
wire   [31:0] trunc_ln264_14_fu_462_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

nnlayer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln92_fu_147_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_106 <= i_1_fu_153_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_106 <= 28'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln189_10_reg_650 <= add_ln189_10_fu_532_p2;
        add_ln189_11_reg_655 <= add_ln189_11_fu_538_p2;
        add_ln189_12_reg_660 <= add_ln189_12_fu_544_p2;
        add_ln189_13_reg_665 <= add_ln189_13_fu_550_p2;
        add_ln189_14_reg_670 <= add_ln189_14_fu_556_p2;
        add_ln189_15_reg_675 <= add_ln189_15_fu_562_p2;
        add_ln189_1_reg_605 <= add_ln189_1_fu_478_p2;
        add_ln189_2_reg_610 <= add_ln189_2_fu_484_p2;
        add_ln189_3_reg_615 <= add_ln189_3_fu_490_p2;
        add_ln189_4_reg_620 <= add_ln189_4_fu_496_p2;
        add_ln189_5_reg_625 <= add_ln189_5_fu_502_p2;
        add_ln189_6_reg_630 <= add_ln189_6_fu_508_p2;
        add_ln189_7_reg_635 <= add_ln189_7_fu_514_p2;
        add_ln189_8_reg_640 <= add_ln189_8_fu_520_p2;
        add_ln189_9_reg_645 <= add_ln189_9_fu_526_p2;
        add_ln189_reg_600 <= add_ln189_fu_472_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (*) begin
    if (((icmp_ln92_fu_147_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 28'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in1_stream_blk_n = in1_stream_empty_n;
    end else begin
        in1_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in1_stream_read = 1'b1;
    end else begin
        in1_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in2_stream_blk_n = in2_stream_empty_n;
    end else begin
        in2_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in2_stream_read = 1'b1;
    end else begin
        in2_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_stream_blk_n = out_stream_full_n;
    end else begin
        out_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_stream_write = 1'b1;
    end else begin
        out_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln189_10_fu_532_p2 = (trunc_ln144_s_fu_258_p4 + trunc_ln264_s_fu_412_p4);

assign add_ln189_11_fu_538_p2 = (trunc_ln144_10_fu_268_p4 + trunc_ln264_10_fu_422_p4);

assign add_ln189_12_fu_544_p2 = (trunc_ln144_11_fu_278_p4 + trunc_ln264_11_fu_432_p4);

assign add_ln189_13_fu_550_p2 = (trunc_ln144_12_fu_288_p4 + trunc_ln264_12_fu_442_p4);

assign add_ln189_14_fu_556_p2 = (trunc_ln144_13_fu_298_p4 + trunc_ln264_13_fu_452_p4);

assign add_ln189_15_fu_562_p2 = (trunc_ln144_14_fu_308_p4 + trunc_ln264_14_fu_462_p4);

assign add_ln189_1_fu_478_p2 = (trunc_ln144_1_fu_168_p4 + trunc_ln264_1_fu_322_p4);

assign add_ln189_2_fu_484_p2 = (trunc_ln144_2_fu_178_p4 + trunc_ln264_2_fu_332_p4);

assign add_ln189_3_fu_490_p2 = (trunc_ln144_3_fu_188_p4 + trunc_ln264_3_fu_342_p4);

assign add_ln189_4_fu_496_p2 = (trunc_ln144_4_fu_198_p4 + trunc_ln264_4_fu_352_p4);

assign add_ln189_5_fu_502_p2 = (trunc_ln144_5_fu_208_p4 + trunc_ln264_5_fu_362_p4);

assign add_ln189_6_fu_508_p2 = (trunc_ln144_6_fu_218_p4 + trunc_ln264_6_fu_372_p4);

assign add_ln189_7_fu_514_p2 = (trunc_ln144_7_fu_228_p4 + trunc_ln264_7_fu_382_p4);

assign add_ln189_8_fu_520_p2 = (trunc_ln144_8_fu_238_p4 + trunc_ln264_8_fu_392_p4);

assign add_ln189_9_fu_526_p2 = (trunc_ln144_9_fu_248_p4 + trunc_ln264_9_fu_402_p4);

assign add_ln189_fu_472_p2 = (trunc_ln144_fu_164_p1 + trunc_ln264_fu_318_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((out_stream_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((in2_stream_empty_n == 1'b0) | (in1_stream_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((out_stream_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((in2_stream_empty_n == 1'b0) | (in1_stream_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((out_stream_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((in2_stream_empty_n == 1'b0) | (in1_stream_empty_n == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((in2_stream_empty_n == 1'b0) | (in1_stream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (out_stream_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_1_fu_153_p2 = (ap_sig_allocacmp_i_load + 28'd1);

assign i_cast_fu_143_p1 = ap_sig_allocacmp_i_load;

assign icmp_ln92_fu_147_p2 = (($signed(i_cast_fu_143_p1) < $signed(vSize_loc_load)) ? 1'b1 : 1'b0);

assign out_stream_din = {{{{{{{{{{{{{{{{add_ln189_15_reg_675}, {add_ln189_14_reg_670}}, {add_ln189_13_reg_665}}, {add_ln189_12_reg_660}}, {add_ln189_11_reg_655}}, {add_ln189_10_reg_650}}, {add_ln189_9_reg_645}}, {add_ln189_8_reg_640}}, {add_ln189_7_reg_635}}, {add_ln189_6_reg_630}}, {add_ln189_5_reg_625}}, {add_ln189_4_reg_620}}, {add_ln189_3_reg_615}}, {add_ln189_2_reg_610}}, {add_ln189_1_reg_605}}, {add_ln189_reg_600}};

assign trunc_ln144_10_fu_268_p4 = {{in2_stream_dout[383:352]}};

assign trunc_ln144_11_fu_278_p4 = {{in2_stream_dout[415:384]}};

assign trunc_ln144_12_fu_288_p4 = {{in2_stream_dout[447:416]}};

assign trunc_ln144_13_fu_298_p4 = {{in2_stream_dout[479:448]}};

assign trunc_ln144_14_fu_308_p4 = {{in2_stream_dout[511:480]}};

assign trunc_ln144_1_fu_168_p4 = {{in2_stream_dout[63:32]}};

assign trunc_ln144_2_fu_178_p4 = {{in2_stream_dout[95:64]}};

assign trunc_ln144_3_fu_188_p4 = {{in2_stream_dout[127:96]}};

assign trunc_ln144_4_fu_198_p4 = {{in2_stream_dout[159:128]}};

assign trunc_ln144_5_fu_208_p4 = {{in2_stream_dout[191:160]}};

assign trunc_ln144_6_fu_218_p4 = {{in2_stream_dout[223:192]}};

assign trunc_ln144_7_fu_228_p4 = {{in2_stream_dout[255:224]}};

assign trunc_ln144_8_fu_238_p4 = {{in2_stream_dout[287:256]}};

assign trunc_ln144_9_fu_248_p4 = {{in2_stream_dout[319:288]}};

assign trunc_ln144_fu_164_p1 = in2_stream_dout[31:0];

assign trunc_ln144_s_fu_258_p4 = {{in2_stream_dout[351:320]}};

assign trunc_ln264_10_fu_422_p4 = {{in1_stream_dout[383:352]}};

assign trunc_ln264_11_fu_432_p4 = {{in1_stream_dout[415:384]}};

assign trunc_ln264_12_fu_442_p4 = {{in1_stream_dout[447:416]}};

assign trunc_ln264_13_fu_452_p4 = {{in1_stream_dout[479:448]}};

assign trunc_ln264_14_fu_462_p4 = {{in1_stream_dout[511:480]}};

assign trunc_ln264_1_fu_322_p4 = {{in1_stream_dout[63:32]}};

assign trunc_ln264_2_fu_332_p4 = {{in1_stream_dout[95:64]}};

assign trunc_ln264_3_fu_342_p4 = {{in1_stream_dout[127:96]}};

assign trunc_ln264_4_fu_352_p4 = {{in1_stream_dout[159:128]}};

assign trunc_ln264_5_fu_362_p4 = {{in1_stream_dout[191:160]}};

assign trunc_ln264_6_fu_372_p4 = {{in1_stream_dout[223:192]}};

assign trunc_ln264_7_fu_382_p4 = {{in1_stream_dout[255:224]}};

assign trunc_ln264_8_fu_392_p4 = {{in1_stream_dout[287:256]}};

assign trunc_ln264_9_fu_402_p4 = {{in1_stream_dout[319:288]}};

assign trunc_ln264_fu_318_p1 = in1_stream_dout[31:0];

assign trunc_ln264_s_fu_412_p4 = {{in1_stream_dout[351:320]}};

endmodule //nnlayer_compute_add_Pipeline_execute
