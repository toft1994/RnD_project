// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nnlayer_nnlayer_Pipeline_VITIS_LOOP_49_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp,
        conv1250_i_cast,
        trunc_ln3,
        lhs_out,
        lhs_out_ap_vld,
        p_ZL8weights_0_address0,
        p_ZL8weights_0_ce0,
        p_ZL8weights_0_q0,
        p_ZL8weights_0_address1,
        p_ZL8weights_0_ce1,
        p_ZL8weights_0_q1,
        p_ZL8weights_1_address0,
        p_ZL8weights_1_ce0,
        p_ZL8weights_1_q0,
        p_ZL8weights_1_address1,
        p_ZL8weights_1_ce1,
        p_ZL8weights_1_q1,
        p_ZL6input_0_address0,
        p_ZL6input_0_ce0,
        p_ZL6input_0_q0,
        p_ZL6input_0_address1,
        p_ZL6input_0_ce1,
        p_ZL6input_0_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] tmp;
input  [15:0] conv1250_i_cast;
input  [14:0] trunc_ln3;
output  [15:0] lhs_out;
output   lhs_out_ap_vld;
output  [14:0] p_ZL8weights_0_address0;
output   p_ZL8weights_0_ce0;
input  [15:0] p_ZL8weights_0_q0;
output  [14:0] p_ZL8weights_0_address1;
output   p_ZL8weights_0_ce1;
input  [15:0] p_ZL8weights_0_q1;
output  [14:0] p_ZL8weights_1_address0;
output   p_ZL8weights_1_ce0;
input  [15:0] p_ZL8weights_1_q0;
output  [14:0] p_ZL8weights_1_address1;
output   p_ZL8weights_1_ce1;
input  [15:0] p_ZL8weights_1_q1;
output  [14:0] p_ZL6input_0_address0;
output   p_ZL6input_0_ce0;
input  [15:0] p_ZL6input_0_q0;
output  [14:0] p_ZL6input_0_address1;
output   p_ZL6input_0_ce1;
input  [15:0] p_ZL6input_0_q1;

reg ap_idle;
reg lhs_out_ap_vld;
reg p_ZL8weights_0_ce0;
reg p_ZL8weights_0_ce1;
reg p_ZL8weights_1_ce0;
reg p_ZL8weights_1_ce1;
reg p_ZL6input_0_ce0;
reg p_ZL6input_0_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] tmp_1_reg_413;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_1_fu_191_p3;
reg   [0:0] tmp_1_reg_413_pp0_iter1_reg;
reg   [1:0] lshr_ln_reg_417;
reg   [1:0] lshr_ln1169_1_reg_437;
wire    ap_block_pp0_stage1_11001;
wire   [15:0] r_V_1_fu_319_p4;
reg  signed [15:0] r_V_1_reg_467;
reg  signed [15:0] p_ZL6input_0_load_1_reg_472;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln1169_fu_233_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln1171_fu_239_p1;
wire   [63:0] zext_ln1169_1_fu_280_p1;
wire   [63:0] zext_ln1171_1_fu_286_p1;
reg   [8:0] inc3741_i_fu_66;
wire   [8:0] add_ln49_fu_291_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_inc3741_i_load;
reg   [15:0] lhs_fu_70;
reg   [15:0] ap_sig_allocacmp_lhs_load_1;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage1_01001;
wire   [16:0] zext_ln49_fu_203_p1;
wire   [16:0] conv1250_i_cast_cast_fu_174_p1;
wire   [14:0] zext_ln52_fu_207_p1;
wire   [16:0] add_ln52_fu_211_p2;
wire   [14:0] add_ln1169_fu_217_p2;
wire   [7:0] empty_32_fu_199_p1;
wire   [7:0] or_ln49_fu_244_p2;
wire   [16:0] zext_ln52_1_fu_250_p1;
wire   [14:0] zext_ln52_2_fu_254_p1;
wire   [16:0] add_ln52_1_fu_258_p2;
wire   [14:0] add_ln1169_1_fu_264_p2;
wire  signed [15:0] r_V_fu_302_p4;
wire  signed [23:0] tmp_3_fu_345_p1;
wire   [23:0] grp_fu_380_p3;
wire   [15:0] tmp_3_fu_345_p4;
wire  signed [23:0] trunc_ln4_fu_362_p1;
wire   [23:0] grp_fu_389_p3;
wire   [23:0] grp_fu_380_p2;
wire   [23:0] grp_fu_389_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

nnlayer_mux_22_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_22_16_1_1_U12(
    .din0(p_ZL8weights_0_q1),
    .din1(p_ZL8weights_1_q1),
    .din2(lshr_ln_reg_417),
    .dout(r_V_fu_302_p4)
);

nnlayer_mux_22_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_22_16_1_1_U13(
    .din0(p_ZL8weights_0_q0),
    .din1(p_ZL8weights_1_q0),
    .din2(lshr_ln1169_1_reg_437),
    .dout(r_V_1_fu_319_p4)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_ZL6input_0_q1),
    .din1(r_V_fu_302_p4),
    .din2(grp_fu_380_p2),
    .ce(1'b1),
    .dout(grp_fu_380_p3)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_ZL6input_0_load_1_reg_472),
    .din1(r_V_1_reg_467),
    .din2(grp_fu_389_p2),
    .ce(1'b1),
    .dout(grp_fu_389_p3)
);

nnlayer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((tmp_1_fu_191_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            inc3741_i_fu_66 <= add_ln49_fu_291_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            inc3741_i_fu_66 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        lhs_fu_70 <= tmp;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        lhs_fu_70 <= {{trunc_ln4_fu_362_p1[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_191_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln1169_1_reg_437 <= {{add_ln52_1_fu_258_p2[16:15]}};
        lshr_ln_reg_417 <= {{add_ln52_fu_211_p2[16:15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_413 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_ZL6input_0_load_1_reg_472 <= p_ZL6input_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_413 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        r_V_1_reg_467 <= r_V_1_fu_319_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_reg_413 <= ap_sig_allocacmp_inc3741_i_load[32'd8];
        tmp_1_reg_413_pp0_iter1_reg <= tmp_1_reg_413;
    end
end

always @ (*) begin
    if (((tmp_1_reg_413 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_inc3741_i_load = 9'd0;
    end else begin
        ap_sig_allocacmp_inc3741_i_load = inc3741_i_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_lhs_load_1 = {{trunc_ln4_fu_362_p1[23:8]}};
    end else begin
        ap_sig_allocacmp_lhs_load_1 = lhs_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_1_reg_413_pp0_iter1_reg == 1'd1))) begin
        lhs_out_ap_vld = 1'b1;
    end else begin
        lhs_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL6input_0_ce0 = 1'b1;
    end else begin
        p_ZL6input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL6input_0_ce1 = 1'b1;
    end else begin
        p_ZL6input_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL8weights_0_ce0 = 1'b1;
    end else begin
        p_ZL8weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL8weights_0_ce1 = 1'b1;
    end else begin
        p_ZL8weights_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL8weights_1_ce0 = 1'b1;
    end else begin
        p_ZL8weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZL8weights_1_ce1 = 1'b1;
    end else begin
        p_ZL8weights_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1169_1_fu_264_p2 = (zext_ln52_2_fu_254_p1 + trunc_ln3);

assign add_ln1169_fu_217_p2 = (zext_ln52_fu_207_p1 + trunc_ln3);

assign add_ln49_fu_291_p2 = (ap_sig_allocacmp_inc3741_i_load + 9'd2);

assign add_ln52_1_fu_258_p2 = (zext_ln52_1_fu_250_p1 + conv1250_i_cast_cast_fu_174_p1);

assign add_ln52_fu_211_p2 = (zext_ln49_fu_203_p1 + conv1250_i_cast_cast_fu_174_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign conv1250_i_cast_cast_fu_174_p1 = conv1250_i_cast;

assign empty_32_fu_199_p1 = ap_sig_allocacmp_inc3741_i_load[7:0];

assign grp_fu_380_p2 = {{ap_sig_allocacmp_lhs_load_1}, {8'd0}};

assign grp_fu_389_p2 = {{tmp_3_fu_345_p4}, {8'd0}};

assign lhs_out = lhs_fu_70;

assign or_ln49_fu_244_p2 = (empty_32_fu_199_p1 | 8'd1);

assign p_ZL6input_0_address0 = zext_ln1171_1_fu_286_p1;

assign p_ZL6input_0_address1 = zext_ln1171_fu_239_p1;

assign p_ZL8weights_0_address0 = zext_ln1169_1_fu_280_p1;

assign p_ZL8weights_0_address1 = zext_ln1169_fu_233_p1;

assign p_ZL8weights_1_address0 = zext_ln1169_1_fu_280_p1;

assign p_ZL8weights_1_address1 = zext_ln1169_fu_233_p1;

assign tmp_1_fu_191_p3 = ap_sig_allocacmp_inc3741_i_load[32'd8];

assign tmp_3_fu_345_p1 = grp_fu_380_p3;

assign tmp_3_fu_345_p4 = {{tmp_3_fu_345_p1[23:8]}};

assign trunc_ln4_fu_362_p1 = grp_fu_389_p3;

assign zext_ln1169_1_fu_280_p1 = add_ln1169_1_fu_264_p2;

assign zext_ln1169_fu_233_p1 = add_ln1169_fu_217_p2;

assign zext_ln1171_1_fu_286_p1 = or_ln49_fu_244_p2;

assign zext_ln1171_fu_239_p1 = empty_32_fu_199_p1;

assign zext_ln49_fu_203_p1 = ap_sig_allocacmp_inc3741_i_load;

assign zext_ln52_1_fu_250_p1 = or_ln49_fu_244_p2;

assign zext_ln52_2_fu_254_p1 = or_ln49_fu_244_p2;

assign zext_ln52_fu_207_p1 = ap_sig_allocacmp_inc3741_i_load;

endmodule //nnlayer_nnlayer_Pipeline_VITIS_LOOP_49_2
