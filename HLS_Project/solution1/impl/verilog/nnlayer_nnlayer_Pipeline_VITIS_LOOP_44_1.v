// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nnlayer_nnlayer_Pipeline_VITIS_LOOP_44_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        numOfOutNeurons,
        p_ZL7output_0_load_1,
        p_ZL7output_1_load_1,
        p_ZL7output_2_load_1,
        p_ZL7output_3_load_1,
        p_ZL7output_4_load_1,
        p_ZL7output_5_load_1,
        p_ZL7output_6_load_1,
        p_ZL7output_7_load_1,
        p_ZL7output_8_load_1,
        p_ZL7output_9_load_1,
        p_ZL7output_10_load_1,
        p_ZL7output_11_load_1,
        p_ZL7output_12_load_1,
        p_ZL7output_13_load_1,
        p_ZL7output_14_load_1,
        p_ZL7output_15_load_1,
        p_ZL7output_16_load_1,
        p_ZL7output_17_load_1,
        p_ZL7output_18_load_1,
        p_ZL7output_19_load_1,
        p_ZL7output_20_load_1,
        p_ZL7output_21_load_1,
        p_ZL7output_22_load_1,
        p_ZL7output_23_load_1,
        p_ZL7output_24_load_1,
        p_ZL7output_25_load_1,
        p_ZL7output_26_load_1,
        p_ZL7output_27_load_1,
        p_ZL7output_28_load_1,
        p_ZL7output_29_load_1,
        p_ZL7output_30_load_1,
        p_ZL7output_31_load_1,
        p_ZL7output_32_load_1,
        p_ZL7output_33_load_1,
        p_ZL7output_34_load_1,
        p_ZL7output_35_load_1,
        p_ZL7output_36_load_1,
        p_ZL7output_37_load_1,
        p_ZL7output_38_load_1,
        p_ZL7output_39_load_1,
        p_ZL7output_40_load_1,
        p_ZL7output_41_load_1,
        p_ZL7output_42_load_1,
        p_ZL7output_43_load_1,
        p_ZL7output_44_load_1,
        p_ZL7output_45_load_1,
        p_ZL7output_46_load_1,
        p_ZL7output_47_load_1,
        p_ZL7output_48_load_1,
        p_ZL7output_49_load_1,
        p_ZL7output_50_load_1,
        p_ZL7output_51_load_1,
        p_ZL7output_52_load_1,
        p_ZL7output_53_load_1,
        p_ZL7output_54_load_1,
        p_ZL7output_55_load_1,
        p_ZL7output_56_load_1,
        p_ZL7output_57_load_1,
        p_ZL7output_58_load_1,
        p_ZL7output_59_load_1,
        p_ZL7output_60_load_1,
        p_ZL7output_61_load_1,
        p_ZL7output_62_load_1,
        p_ZL7output_63_load_1,
        sum_V_out,
        sum_V_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] numOfOutNeurons;
input  [15:0] p_ZL7output_0_load_1;
input  [15:0] p_ZL7output_1_load_1;
input  [15:0] p_ZL7output_2_load_1;
input  [15:0] p_ZL7output_3_load_1;
input  [15:0] p_ZL7output_4_load_1;
input  [15:0] p_ZL7output_5_load_1;
input  [15:0] p_ZL7output_6_load_1;
input  [15:0] p_ZL7output_7_load_1;
input  [15:0] p_ZL7output_8_load_1;
input  [15:0] p_ZL7output_9_load_1;
input  [15:0] p_ZL7output_10_load_1;
input  [15:0] p_ZL7output_11_load_1;
input  [15:0] p_ZL7output_12_load_1;
input  [15:0] p_ZL7output_13_load_1;
input  [15:0] p_ZL7output_14_load_1;
input  [15:0] p_ZL7output_15_load_1;
input  [15:0] p_ZL7output_16_load_1;
input  [15:0] p_ZL7output_17_load_1;
input  [15:0] p_ZL7output_18_load_1;
input  [15:0] p_ZL7output_19_load_1;
input  [15:0] p_ZL7output_20_load_1;
input  [15:0] p_ZL7output_21_load_1;
input  [15:0] p_ZL7output_22_load_1;
input  [15:0] p_ZL7output_23_load_1;
input  [15:0] p_ZL7output_24_load_1;
input  [15:0] p_ZL7output_25_load_1;
input  [15:0] p_ZL7output_26_load_1;
input  [15:0] p_ZL7output_27_load_1;
input  [15:0] p_ZL7output_28_load_1;
input  [15:0] p_ZL7output_29_load_1;
input  [15:0] p_ZL7output_30_load_1;
input  [15:0] p_ZL7output_31_load_1;
input  [15:0] p_ZL7output_32_load_1;
input  [15:0] p_ZL7output_33_load_1;
input  [15:0] p_ZL7output_34_load_1;
input  [15:0] p_ZL7output_35_load_1;
input  [15:0] p_ZL7output_36_load_1;
input  [15:0] p_ZL7output_37_load_1;
input  [15:0] p_ZL7output_38_load_1;
input  [15:0] p_ZL7output_39_load_1;
input  [15:0] p_ZL7output_40_load_1;
input  [15:0] p_ZL7output_41_load_1;
input  [15:0] p_ZL7output_42_load_1;
input  [15:0] p_ZL7output_43_load_1;
input  [15:0] p_ZL7output_44_load_1;
input  [15:0] p_ZL7output_45_load_1;
input  [15:0] p_ZL7output_46_load_1;
input  [15:0] p_ZL7output_47_load_1;
input  [15:0] p_ZL7output_48_load_1;
input  [15:0] p_ZL7output_49_load_1;
input  [15:0] p_ZL7output_50_load_1;
input  [15:0] p_ZL7output_51_load_1;
input  [15:0] p_ZL7output_52_load_1;
input  [15:0] p_ZL7output_53_load_1;
input  [15:0] p_ZL7output_54_load_1;
input  [15:0] p_ZL7output_55_load_1;
input  [15:0] p_ZL7output_56_load_1;
input  [15:0] p_ZL7output_57_load_1;
input  [15:0] p_ZL7output_58_load_1;
input  [15:0] p_ZL7output_59_load_1;
input  [15:0] p_ZL7output_60_load_1;
input  [15:0] p_ZL7output_61_load_1;
input  [15:0] p_ZL7output_62_load_1;
input  [15:0] p_ZL7output_63_load_1;
output  [15:0] sum_V_out;
output   sum_V_out_ap_vld;

reg ap_idle;
reg sum_V_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln44_fu_596_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln44_reg_857;
reg   [0:0] icmp_ln44_reg_857_pp0_iter1_reg;
wire   [15:0] t_fu_608_p66;
reg   [15:0] t_reg_861;
reg   [0:0] tmp_reg_866;
reg   [0:0] tmp_reg_866_pp0_iter1_reg;
reg   [0:0] tmp_reg_866_pp0_iter2_reg;
wire   [48:0] trunc_ln1201_fu_772_p1;
reg   [48:0] trunc_ln1201_reg_872;
reg   [15:0] tmp_4_reg_877;
reg   [15:0] tmp_4_reg_877_pp0_iter2_reg;
wire   [15:0] sub_ln1201_1_fu_807_p2;
reg   [15:0] sub_ln1201_1_reg_883;
reg   [15:0] sum_V_fu_178;
wire   [15:0] sum_V_1_fu_827_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [15:0] i_2_fu_182;
wire   [15:0] i_3_fu_602_p2;
reg   [15:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0_01001;
wire  signed [23:0] t_1_fu_755_p3;
wire   [25:0] mul_ln1201_fu_766_p1;
wire   [49:0] mul_ln1201_fu_766_p2;
wire   [48:0] sub_ln1201_fu_786_p2;
wire   [15:0] tmp_3_fu_791_p4;
wire   [15:0] select_ln1201_fu_801_p3;
wire   [15:0] select_ln1201_1_fu_816_p3;
wire   [15:0] xor_ln712_fu_821_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

nnlayer_mux_6416_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 16 ),
    .din33_WIDTH( 16 ),
    .din34_WIDTH( 16 ),
    .din35_WIDTH( 16 ),
    .din36_WIDTH( 16 ),
    .din37_WIDTH( 16 ),
    .din38_WIDTH( 16 ),
    .din39_WIDTH( 16 ),
    .din40_WIDTH( 16 ),
    .din41_WIDTH( 16 ),
    .din42_WIDTH( 16 ),
    .din43_WIDTH( 16 ),
    .din44_WIDTH( 16 ),
    .din45_WIDTH( 16 ),
    .din46_WIDTH( 16 ),
    .din47_WIDTH( 16 ),
    .din48_WIDTH( 16 ),
    .din49_WIDTH( 16 ),
    .din50_WIDTH( 16 ),
    .din51_WIDTH( 16 ),
    .din52_WIDTH( 16 ),
    .din53_WIDTH( 16 ),
    .din54_WIDTH( 16 ),
    .din55_WIDTH( 16 ),
    .din56_WIDTH( 16 ),
    .din57_WIDTH( 16 ),
    .din58_WIDTH( 16 ),
    .din59_WIDTH( 16 ),
    .din60_WIDTH( 16 ),
    .din61_WIDTH( 16 ),
    .din62_WIDTH( 16 ),
    .din63_WIDTH( 16 ),
    .din64_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mux_6416_16_1_1_U207(
    .din0(p_ZL7output_0_load_1),
    .din1(p_ZL7output_1_load_1),
    .din2(p_ZL7output_2_load_1),
    .din3(p_ZL7output_3_load_1),
    .din4(p_ZL7output_4_load_1),
    .din5(p_ZL7output_5_load_1),
    .din6(p_ZL7output_6_load_1),
    .din7(p_ZL7output_7_load_1),
    .din8(p_ZL7output_8_load_1),
    .din9(p_ZL7output_9_load_1),
    .din10(p_ZL7output_10_load_1),
    .din11(p_ZL7output_11_load_1),
    .din12(p_ZL7output_12_load_1),
    .din13(p_ZL7output_13_load_1),
    .din14(p_ZL7output_14_load_1),
    .din15(p_ZL7output_15_load_1),
    .din16(p_ZL7output_16_load_1),
    .din17(p_ZL7output_17_load_1),
    .din18(p_ZL7output_18_load_1),
    .din19(p_ZL7output_19_load_1),
    .din20(p_ZL7output_20_load_1),
    .din21(p_ZL7output_21_load_1),
    .din22(p_ZL7output_22_load_1),
    .din23(p_ZL7output_23_load_1),
    .din24(p_ZL7output_24_load_1),
    .din25(p_ZL7output_25_load_1),
    .din26(p_ZL7output_26_load_1),
    .din27(p_ZL7output_27_load_1),
    .din28(p_ZL7output_28_load_1),
    .din29(p_ZL7output_29_load_1),
    .din30(p_ZL7output_30_load_1),
    .din31(p_ZL7output_31_load_1),
    .din32(p_ZL7output_32_load_1),
    .din33(p_ZL7output_33_load_1),
    .din34(p_ZL7output_34_load_1),
    .din35(p_ZL7output_35_load_1),
    .din36(p_ZL7output_36_load_1),
    .din37(p_ZL7output_37_load_1),
    .din38(p_ZL7output_38_load_1),
    .din39(p_ZL7output_39_load_1),
    .din40(p_ZL7output_40_load_1),
    .din41(p_ZL7output_41_load_1),
    .din42(p_ZL7output_42_load_1),
    .din43(p_ZL7output_43_load_1),
    .din44(p_ZL7output_44_load_1),
    .din45(p_ZL7output_45_load_1),
    .din46(p_ZL7output_46_load_1),
    .din47(p_ZL7output_47_load_1),
    .din48(p_ZL7output_48_load_1),
    .din49(p_ZL7output_49_load_1),
    .din50(p_ZL7output_50_load_1),
    .din51(p_ZL7output_51_load_1),
    .din52(p_ZL7output_52_load_1),
    .din53(p_ZL7output_53_load_1),
    .din54(p_ZL7output_54_load_1),
    .din55(p_ZL7output_55_load_1),
    .din56(p_ZL7output_56_load_1),
    .din57(p_ZL7output_57_load_1),
    .din58(p_ZL7output_58_load_1),
    .din59(p_ZL7output_59_load_1),
    .din60(p_ZL7output_60_load_1),
    .din61(p_ZL7output_61_load_1),
    .din62(p_ZL7output_62_load_1),
    .din63(p_ZL7output_63_load_1),
    .din64(ap_sig_allocacmp_i),
    .dout(t_fu_608_p66)
);

nnlayer_mul_24s_26ns_50_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 50 ))
mul_24s_26ns_50_1_1_U208(
    .din0(t_1_fu_755_p3),
    .din1(mul_ln1201_fu_766_p1),
    .dout(mul_ln1201_fu_766_p2)
);

nnlayer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln44_fu_596_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_2_fu_182 <= i_3_fu_602_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_2_fu_182 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            sum_V_fu_178 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            sum_V_fu_178 <= sum_V_1_fu_827_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln44_reg_857 <= icmp_ln44_fu_596_p2;
        icmp_ln44_reg_857_pp0_iter1_reg <= icmp_ln44_reg_857;
        tmp_4_reg_877 <= {{mul_ln1201_fu_766_p2[47:32]}};
        tmp_reg_866_pp0_iter1_reg <= tmp_reg_866;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_866_pp0_iter1_reg == 1'd1))) begin
        sub_ln1201_1_reg_883 <= sub_ln1201_1_fu_807_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_596_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_reg_861 <= t_fu_608_p66;
        tmp_reg_866 <= t_fu_608_p66[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_4_reg_877_pp0_iter2_reg <= tmp_4_reg_877;
        tmp_reg_866_pp0_iter2_reg <= tmp_reg_866_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_866 == 1'd1))) begin
        trunc_ln1201_reg_872 <= trunc_ln1201_fu_772_p1;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_596_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 16'd0;
    end else begin
        ap_sig_allocacmp_i = i_2_fu_182;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln44_reg_857_pp0_iter1_reg == 1'd1))) begin
        sum_V_out_ap_vld = 1'b1;
    end else begin
        sum_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_3_fu_602_p2 = (ap_sig_allocacmp_i + 16'd1);

assign icmp_ln44_fu_596_p2 = ((ap_sig_allocacmp_i == numOfOutNeurons) ? 1'b1 : 1'b0);

assign mul_ln1201_fu_766_p1 = 50'd24265352;

assign select_ln1201_1_fu_816_p3 = ((tmp_reg_866_pp0_iter2_reg[0:0] == 1'b1) ? sub_ln1201_1_reg_883 : tmp_4_reg_877_pp0_iter2_reg);

assign select_ln1201_fu_801_p3 = ((tmp_reg_866_pp0_iter1_reg[0:0] == 1'b1) ? tmp_3_fu_791_p4 : tmp_4_reg_877);

assign sub_ln1201_1_fu_807_p2 = (16'd0 - select_ln1201_fu_801_p3);

assign sub_ln1201_fu_786_p2 = (49'd0 - trunc_ln1201_reg_872);

assign sum_V_1_fu_827_p2 = (xor_ln712_fu_821_p2 + sum_V_fu_178);

assign sum_V_out = sum_V_fu_178;

assign t_1_fu_755_p3 = {{t_reg_861}, {8'd0}};

assign tmp_3_fu_791_p4 = {{sub_ln1201_fu_786_p2[47:32]}};

assign trunc_ln1201_fu_772_p1 = mul_ln1201_fu_766_p2[48:0];

assign xor_ln712_fu_821_p2 = (select_ln1201_1_fu_816_p3 ^ 16'd512);

endmodule //nnlayer_nnlayer_Pipeline_VITIS_LOOP_44_1
