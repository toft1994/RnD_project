// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nnlayer_nnlayer_Pipeline_VITIS_LOOP_41_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        numOfOutNeurons,
        mux_case_0521_phi_reload,
        mux_case_1522_phi_reload,
        mux_case_2523_phi_reload,
        mux_case_3524_phi_reload,
        mux_case_4525_phi_reload,
        mux_case_5526_phi_reload,
        mux_case_6527_phi_reload,
        mux_case_7528_phi_reload,
        sum_V_out,
        sum_V_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] numOfOutNeurons;
input  [15:0] mux_case_0521_phi_reload;
input  [15:0] mux_case_1522_phi_reload;
input  [15:0] mux_case_2523_phi_reload;
input  [15:0] mux_case_3524_phi_reload;
input  [15:0] mux_case_4525_phi_reload;
input  [15:0] mux_case_5526_phi_reload;
input  [15:0] mux_case_6527_phi_reload;
input  [15:0] mux_case_7528_phi_reload;
output  [15:0] sum_V_out;
output   sum_V_out_ap_vld;

reg ap_idle;
reg sum_V_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln41_fu_148_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln41_reg_297;
reg   [0:0] icmp_ln41_reg_297_pp0_iter1_reg;
wire   [15:0] t_fu_160_p10;
reg   [15:0] t_reg_301;
reg   [0:0] tmp_reg_306;
reg   [0:0] tmp_reg_306_pp0_iter1_reg;
reg   [0:0] tmp_reg_306_pp0_iter2_reg;
wire   [48:0] trunc_ln1201_fu_212_p1;
reg   [48:0] trunc_ln1201_reg_312;
reg   [15:0] tmp_4_reg_317;
reg   [15:0] tmp_4_reg_317_pp0_iter2_reg;
wire   [15:0] sub_ln1201_1_fu_247_p2;
reg   [15:0] sub_ln1201_1_reg_323;
reg   [15:0] sum_V_fu_66;
wire   [15:0] sum_V_1_fu_267_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [15:0] i_2_fu_70;
wire   [15:0] i_3_fu_154_p2;
reg   [15:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0_01001;
wire  signed [23:0] t_1_fu_195_p3;
wire   [25:0] mul_ln1201_fu_206_p1;
wire   [49:0] mul_ln1201_fu_206_p2;
wire   [48:0] sub_ln1201_fu_226_p2;
wire   [15:0] tmp_3_fu_231_p4;
wire   [15:0] select_ln1201_fu_241_p3;
wire   [15:0] select_ln1201_1_fu_256_p3;
wire   [15:0] xor_ln712_fu_261_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

nnlayer_mux_816_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mux_816_16_1_1_U54(
    .din0(mux_case_0521_phi_reload),
    .din1(mux_case_1522_phi_reload),
    .din2(mux_case_2523_phi_reload),
    .din3(mux_case_3524_phi_reload),
    .din4(mux_case_4525_phi_reload),
    .din5(mux_case_5526_phi_reload),
    .din6(mux_case_6527_phi_reload),
    .din7(mux_case_7528_phi_reload),
    .din8(ap_sig_allocacmp_i),
    .dout(t_fu_160_p10)
);

nnlayer_mul_24s_26ns_50_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 50 ))
mul_24s_26ns_50_1_1_U55(
    .din0(t_1_fu_195_p3),
    .din1(mul_ln1201_fu_206_p1),
    .dout(mul_ln1201_fu_206_p2)
);

nnlayer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln41_fu_148_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_2_fu_70 <= i_3_fu_154_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_2_fu_70 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            sum_V_fu_66 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            sum_V_fu_66 <= sum_V_1_fu_267_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln41_reg_297 <= icmp_ln41_fu_148_p2;
        icmp_ln41_reg_297_pp0_iter1_reg <= icmp_ln41_reg_297;
        tmp_4_reg_317 <= {{mul_ln1201_fu_206_p2[47:32]}};
        tmp_reg_306_pp0_iter1_reg <= tmp_reg_306;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_306_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_ln1201_1_reg_323 <= sub_ln1201_1_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_148_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_reg_301 <= t_fu_160_p10;
        tmp_reg_306 <= t_fu_160_p10[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_4_reg_317_pp0_iter2_reg <= tmp_4_reg_317;
        tmp_reg_306_pp0_iter2_reg <= tmp_reg_306_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_306 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln1201_reg_312 <= trunc_ln1201_fu_212_p1;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_148_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 16'd0;
    end else begin
        ap_sig_allocacmp_i = i_2_fu_70;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_297_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_V_out_ap_vld = 1'b1;
    end else begin
        sum_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_3_fu_154_p2 = (ap_sig_allocacmp_i + 16'd1);

assign icmp_ln41_fu_148_p2 = ((ap_sig_allocacmp_i == numOfOutNeurons) ? 1'b1 : 1'b0);

assign mul_ln1201_fu_206_p1 = 50'd24265352;

assign select_ln1201_1_fu_256_p3 = ((tmp_reg_306_pp0_iter2_reg[0:0] == 1'b1) ? sub_ln1201_1_reg_323 : tmp_4_reg_317_pp0_iter2_reg);

assign select_ln1201_fu_241_p3 = ((tmp_reg_306_pp0_iter1_reg[0:0] == 1'b1) ? tmp_3_fu_231_p4 : tmp_4_reg_317);

assign sub_ln1201_1_fu_247_p2 = (16'd0 - select_ln1201_fu_241_p3);

assign sub_ln1201_fu_226_p2 = (49'd0 - trunc_ln1201_reg_312);

assign sum_V_1_fu_267_p2 = (xor_ln712_fu_261_p2 + sum_V_fu_66);

assign sum_V_out = sum_V_fu_66;

assign t_1_fu_195_p3 = {{t_reg_301}, {8'd0}};

assign tmp_3_fu_231_p4 = {{sub_ln1201_fu_226_p2[47:32]}};

assign trunc_ln1201_fu_212_p1 = mul_ln1201_fu_206_p2[48:0];

assign xor_ln712_fu_261_p2 = (select_ln1201_1_fu_256_p3 ^ 16'd512);

endmodule //nnlayer_nnlayer_Pipeline_VITIS_LOOP_41_1
