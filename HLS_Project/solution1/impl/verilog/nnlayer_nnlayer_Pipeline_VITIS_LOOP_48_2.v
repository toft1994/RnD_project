// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nnlayer_nnlayer_Pipeline_VITIS_LOOP_48_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp,
        zext_ln736,
        p_ZL8weights_0_load,
        p_ZL8weights_1_load,
        p_ZL8weights_2_load,
        p_ZL8weights_3_load,
        p_ZL8weights_4_load,
        p_ZL8weights_5_load,
        p_ZL8weights_6_load,
        p_ZL8weights_7_load,
        p_ZL8weights_8_load,
        p_ZL8weights_9_load,
        p_ZL8weights_10_load,
        p_ZL8weights_11_load,
        p_ZL8weights_12_load,
        p_ZL8weights_13_load,
        p_ZL8weights_14_load,
        p_ZL8weights_15_load,
        p_ZL8weights_16_load,
        p_ZL8weights_17_load,
        p_ZL8weights_18_load,
        p_ZL8weights_19_load,
        p_ZL8weights_20_load,
        p_ZL8weights_21_load,
        p_ZL8weights_22_load,
        p_ZL8weights_23_load,
        p_ZL8weights_24_load,
        p_ZL8weights_25_load,
        p_ZL8weights_26_load,
        p_ZL8weights_27_load,
        p_ZL8weights_28_load,
        p_ZL8weights_29_load,
        p_ZL8weights_30_load,
        p_ZL8weights_31_load,
        p_ZL8weights_32_load,
        p_ZL8weights_33_load,
        p_ZL8weights_34_load,
        p_ZL8weights_35_load,
        p_ZL8weights_36_load,
        p_ZL8weights_37_load,
        p_ZL8weights_38_load,
        p_ZL8weights_39_load,
        p_ZL8weights_40_load,
        p_ZL8weights_41_load,
        p_ZL8weights_42_load,
        p_ZL8weights_43_load,
        p_ZL8weights_44_load,
        p_ZL8weights_45_load,
        p_ZL8weights_46_load,
        p_ZL8weights_47_load,
        p_ZL8weights_48_load,
        p_ZL8weights_49_load,
        p_ZL8weights_50_load,
        p_ZL8weights_51_load,
        p_ZL8weights_52_load,
        p_ZL8weights_53_load,
        p_ZL8weights_54_load,
        p_ZL8weights_55_load,
        p_ZL8weights_56_load,
        p_ZL8weights_57_load,
        p_ZL8weights_58_load,
        p_ZL8weights_59_load,
        p_ZL8weights_60_load,
        p_ZL8weights_61_load,
        p_ZL8weights_62_load,
        p_ZL8weights_63_load,
        p_ZL6input_0_load,
        p_ZL6input_2_load,
        p_ZL6input_4_load,
        p_ZL6input_6_load,
        p_ZL6input_1_load,
        p_ZL6input_3_load,
        p_ZL6input_5_load,
        p_ZL6input_7_load,
        lhs_out,
        lhs_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] tmp;
input  [15:0] zext_ln736;
input  [15:0] p_ZL8weights_0_load;
input  [15:0] p_ZL8weights_1_load;
input  [15:0] p_ZL8weights_2_load;
input  [15:0] p_ZL8weights_3_load;
input  [15:0] p_ZL8weights_4_load;
input  [15:0] p_ZL8weights_5_load;
input  [15:0] p_ZL8weights_6_load;
input  [15:0] p_ZL8weights_7_load;
input  [15:0] p_ZL8weights_8_load;
input  [15:0] p_ZL8weights_9_load;
input  [15:0] p_ZL8weights_10_load;
input  [15:0] p_ZL8weights_11_load;
input  [15:0] p_ZL8weights_12_load;
input  [15:0] p_ZL8weights_13_load;
input  [15:0] p_ZL8weights_14_load;
input  [15:0] p_ZL8weights_15_load;
input  [15:0] p_ZL8weights_16_load;
input  [15:0] p_ZL8weights_17_load;
input  [15:0] p_ZL8weights_18_load;
input  [15:0] p_ZL8weights_19_load;
input  [15:0] p_ZL8weights_20_load;
input  [15:0] p_ZL8weights_21_load;
input  [15:0] p_ZL8weights_22_load;
input  [15:0] p_ZL8weights_23_load;
input  [15:0] p_ZL8weights_24_load;
input  [15:0] p_ZL8weights_25_load;
input  [15:0] p_ZL8weights_26_load;
input  [15:0] p_ZL8weights_27_load;
input  [15:0] p_ZL8weights_28_load;
input  [15:0] p_ZL8weights_29_load;
input  [15:0] p_ZL8weights_30_load;
input  [15:0] p_ZL8weights_31_load;
input  [15:0] p_ZL8weights_32_load;
input  [15:0] p_ZL8weights_33_load;
input  [15:0] p_ZL8weights_34_load;
input  [15:0] p_ZL8weights_35_load;
input  [15:0] p_ZL8weights_36_load;
input  [15:0] p_ZL8weights_37_load;
input  [15:0] p_ZL8weights_38_load;
input  [15:0] p_ZL8weights_39_load;
input  [15:0] p_ZL8weights_40_load;
input  [15:0] p_ZL8weights_41_load;
input  [15:0] p_ZL8weights_42_load;
input  [15:0] p_ZL8weights_43_load;
input  [15:0] p_ZL8weights_44_load;
input  [15:0] p_ZL8weights_45_load;
input  [15:0] p_ZL8weights_46_load;
input  [15:0] p_ZL8weights_47_load;
input  [15:0] p_ZL8weights_48_load;
input  [15:0] p_ZL8weights_49_load;
input  [15:0] p_ZL8weights_50_load;
input  [15:0] p_ZL8weights_51_load;
input  [15:0] p_ZL8weights_52_load;
input  [15:0] p_ZL8weights_53_load;
input  [15:0] p_ZL8weights_54_load;
input  [15:0] p_ZL8weights_55_load;
input  [15:0] p_ZL8weights_56_load;
input  [15:0] p_ZL8weights_57_load;
input  [15:0] p_ZL8weights_58_load;
input  [15:0] p_ZL8weights_59_load;
input  [15:0] p_ZL8weights_60_load;
input  [15:0] p_ZL8weights_61_load;
input  [15:0] p_ZL8weights_62_load;
input  [15:0] p_ZL8weights_63_load;
input  [15:0] p_ZL6input_0_load;
input  [15:0] p_ZL6input_2_load;
input  [15:0] p_ZL6input_4_load;
input  [15:0] p_ZL6input_6_load;
input  [15:0] p_ZL6input_1_load;
input  [15:0] p_ZL6input_3_load;
input  [15:0] p_ZL6input_5_load;
input  [15:0] p_ZL6input_7_load;
output  [15:0] lhs_out;
output   lhs_out_ap_vld;

reg ap_idle;
reg lhs_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] tmp_1_reg_1124;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_1_fu_674_p3;
wire   [15:0] r_V_1_fu_874_p66;
reg  signed [15:0] r_V_1_reg_1138;
wire   [15:0] tmp_4_fu_1008_p9;
reg  signed [15:0] tmp_4_reg_1143;
wire    ap_block_pp0_stage1_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
reg   [15:0] lhs_fu_198;
reg   [15:0] ap_sig_allocacmp_lhs_load_1;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [3:0] phi_ln48_fu_202;
wire   [3:0] add_ln48_fu_1028_p2;
reg   [3:0] ap_sig_allocacmp_phi_ln48_load;
wire    ap_block_pp0_stage0_01001;
wire   [16:0] zext_ln48_fu_686_p1;
wire   [16:0] zext_ln736_cast_fu_657_p1;
wire   [16:0] r_V_fu_696_p65;
wire  signed [15:0] r_V_fu_696_p66;
wire  signed [15:0] tmp_2_fu_834_p9;
wire   [2:0] trunc_ln48_fu_682_p1;
wire   [2:0] or_ln51_fu_858_p2;
wire   [16:0] zext_ln51_fu_864_p1;
wire   [16:0] r_V_1_fu_874_p65;
wire    ap_block_pp0_stage1;
wire  signed [23:0] tmp_7_fu_1056_p1;
wire   [23:0] grp_fu_1091_p3;
wire   [15:0] tmp_7_fu_1056_p4;
wire  signed [23:0] trunc_ln4_fu_1073_p1;
wire   [23:0] grp_fu_1100_p3;
wire   [23:0] grp_fu_1091_p2;
wire   [23:0] grp_fu_1100_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_idle_pp0_0to0;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to2;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

nnlayer_mux_6417_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 16 ),
    .din33_WIDTH( 16 ),
    .din34_WIDTH( 16 ),
    .din35_WIDTH( 16 ),
    .din36_WIDTH( 16 ),
    .din37_WIDTH( 16 ),
    .din38_WIDTH( 16 ),
    .din39_WIDTH( 16 ),
    .din40_WIDTH( 16 ),
    .din41_WIDTH( 16 ),
    .din42_WIDTH( 16 ),
    .din43_WIDTH( 16 ),
    .din44_WIDTH( 16 ),
    .din45_WIDTH( 16 ),
    .din46_WIDTH( 16 ),
    .din47_WIDTH( 16 ),
    .din48_WIDTH( 16 ),
    .din49_WIDTH( 16 ),
    .din50_WIDTH( 16 ),
    .din51_WIDTH( 16 ),
    .din52_WIDTH( 16 ),
    .din53_WIDTH( 16 ),
    .din54_WIDTH( 16 ),
    .din55_WIDTH( 16 ),
    .din56_WIDTH( 16 ),
    .din57_WIDTH( 16 ),
    .din58_WIDTH( 16 ),
    .din59_WIDTH( 16 ),
    .din60_WIDTH( 16 ),
    .din61_WIDTH( 16 ),
    .din62_WIDTH( 16 ),
    .din63_WIDTH( 16 ),
    .din64_WIDTH( 17 ),
    .dout_WIDTH( 16 ))
mux_6417_16_1_1_U85(
    .din0(p_ZL8weights_0_load),
    .din1(p_ZL8weights_1_load),
    .din2(p_ZL8weights_2_load),
    .din3(p_ZL8weights_3_load),
    .din4(p_ZL8weights_4_load),
    .din5(p_ZL8weights_5_load),
    .din6(p_ZL8weights_6_load),
    .din7(p_ZL8weights_7_load),
    .din8(p_ZL8weights_8_load),
    .din9(p_ZL8weights_9_load),
    .din10(p_ZL8weights_10_load),
    .din11(p_ZL8weights_11_load),
    .din12(p_ZL8weights_12_load),
    .din13(p_ZL8weights_13_load),
    .din14(p_ZL8weights_14_load),
    .din15(p_ZL8weights_15_load),
    .din16(p_ZL8weights_16_load),
    .din17(p_ZL8weights_17_load),
    .din18(p_ZL8weights_18_load),
    .din19(p_ZL8weights_19_load),
    .din20(p_ZL8weights_20_load),
    .din21(p_ZL8weights_21_load),
    .din22(p_ZL8weights_22_load),
    .din23(p_ZL8weights_23_load),
    .din24(p_ZL8weights_24_load),
    .din25(p_ZL8weights_25_load),
    .din26(p_ZL8weights_26_load),
    .din27(p_ZL8weights_27_load),
    .din28(p_ZL8weights_28_load),
    .din29(p_ZL8weights_29_load),
    .din30(p_ZL8weights_30_load),
    .din31(p_ZL8weights_31_load),
    .din32(p_ZL8weights_32_load),
    .din33(p_ZL8weights_33_load),
    .din34(p_ZL8weights_34_load),
    .din35(p_ZL8weights_35_load),
    .din36(p_ZL8weights_36_load),
    .din37(p_ZL8weights_37_load),
    .din38(p_ZL8weights_38_load),
    .din39(p_ZL8weights_39_load),
    .din40(p_ZL8weights_40_load),
    .din41(p_ZL8weights_41_load),
    .din42(p_ZL8weights_42_load),
    .din43(p_ZL8weights_43_load),
    .din44(p_ZL8weights_44_load),
    .din45(p_ZL8weights_45_load),
    .din46(p_ZL8weights_46_load),
    .din47(p_ZL8weights_47_load),
    .din48(p_ZL8weights_48_load),
    .din49(p_ZL8weights_49_load),
    .din50(p_ZL8weights_50_load),
    .din51(p_ZL8weights_51_load),
    .din52(p_ZL8weights_52_load),
    .din53(p_ZL8weights_53_load),
    .din54(p_ZL8weights_54_load),
    .din55(p_ZL8weights_55_load),
    .din56(p_ZL8weights_56_load),
    .din57(p_ZL8weights_57_load),
    .din58(p_ZL8weights_58_load),
    .din59(p_ZL8weights_59_load),
    .din60(p_ZL8weights_60_load),
    .din61(p_ZL8weights_61_load),
    .din62(p_ZL8weights_62_load),
    .din63(p_ZL8weights_63_load),
    .din64(r_V_fu_696_p65),
    .dout(r_V_fu_696_p66)
);

nnlayer_mux_74_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_74_16_1_1_U86(
    .din0(p_ZL6input_0_load),
    .din1(16'd0),
    .din2(p_ZL6input_2_load),
    .din3(16'd0),
    .din4(p_ZL6input_4_load),
    .din5(16'd0),
    .din6(p_ZL6input_6_load),
    .din7(ap_sig_allocacmp_phi_ln48_load),
    .dout(tmp_2_fu_834_p9)
);

nnlayer_mux_6417_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 16 ),
    .din33_WIDTH( 16 ),
    .din34_WIDTH( 16 ),
    .din35_WIDTH( 16 ),
    .din36_WIDTH( 16 ),
    .din37_WIDTH( 16 ),
    .din38_WIDTH( 16 ),
    .din39_WIDTH( 16 ),
    .din40_WIDTH( 16 ),
    .din41_WIDTH( 16 ),
    .din42_WIDTH( 16 ),
    .din43_WIDTH( 16 ),
    .din44_WIDTH( 16 ),
    .din45_WIDTH( 16 ),
    .din46_WIDTH( 16 ),
    .din47_WIDTH( 16 ),
    .din48_WIDTH( 16 ),
    .din49_WIDTH( 16 ),
    .din50_WIDTH( 16 ),
    .din51_WIDTH( 16 ),
    .din52_WIDTH( 16 ),
    .din53_WIDTH( 16 ),
    .din54_WIDTH( 16 ),
    .din55_WIDTH( 16 ),
    .din56_WIDTH( 16 ),
    .din57_WIDTH( 16 ),
    .din58_WIDTH( 16 ),
    .din59_WIDTH( 16 ),
    .din60_WIDTH( 16 ),
    .din61_WIDTH( 16 ),
    .din62_WIDTH( 16 ),
    .din63_WIDTH( 16 ),
    .din64_WIDTH( 17 ),
    .dout_WIDTH( 16 ))
mux_6417_16_1_1_U87(
    .din0(16'd0),
    .din1(p_ZL8weights_1_load),
    .din2(p_ZL8weights_2_load),
    .din3(p_ZL8weights_3_load),
    .din4(p_ZL8weights_4_load),
    .din5(p_ZL8weights_5_load),
    .din6(p_ZL8weights_6_load),
    .din7(p_ZL8weights_7_load),
    .din8(p_ZL8weights_8_load),
    .din9(p_ZL8weights_9_load),
    .din10(p_ZL8weights_10_load),
    .din11(p_ZL8weights_11_load),
    .din12(p_ZL8weights_12_load),
    .din13(p_ZL8weights_13_load),
    .din14(p_ZL8weights_14_load),
    .din15(p_ZL8weights_15_load),
    .din16(p_ZL8weights_16_load),
    .din17(p_ZL8weights_17_load),
    .din18(p_ZL8weights_18_load),
    .din19(p_ZL8weights_19_load),
    .din20(p_ZL8weights_20_load),
    .din21(p_ZL8weights_21_load),
    .din22(p_ZL8weights_22_load),
    .din23(p_ZL8weights_23_load),
    .din24(p_ZL8weights_24_load),
    .din25(p_ZL8weights_25_load),
    .din26(p_ZL8weights_26_load),
    .din27(p_ZL8weights_27_load),
    .din28(p_ZL8weights_28_load),
    .din29(p_ZL8weights_29_load),
    .din30(p_ZL8weights_30_load),
    .din31(p_ZL8weights_31_load),
    .din32(p_ZL8weights_32_load),
    .din33(p_ZL8weights_33_load),
    .din34(p_ZL8weights_34_load),
    .din35(p_ZL8weights_35_load),
    .din36(p_ZL8weights_36_load),
    .din37(p_ZL8weights_37_load),
    .din38(p_ZL8weights_38_load),
    .din39(p_ZL8weights_39_load),
    .din40(p_ZL8weights_40_load),
    .din41(p_ZL8weights_41_load),
    .din42(p_ZL8weights_42_load),
    .din43(p_ZL8weights_43_load),
    .din44(p_ZL8weights_44_load),
    .din45(p_ZL8weights_45_load),
    .din46(p_ZL8weights_46_load),
    .din47(p_ZL8weights_47_load),
    .din48(p_ZL8weights_48_load),
    .din49(p_ZL8weights_49_load),
    .din50(p_ZL8weights_50_load),
    .din51(p_ZL8weights_51_load),
    .din52(p_ZL8weights_52_load),
    .din53(p_ZL8weights_53_load),
    .din54(p_ZL8weights_54_load),
    .din55(p_ZL8weights_55_load),
    .din56(p_ZL8weights_56_load),
    .din57(p_ZL8weights_57_load),
    .din58(p_ZL8weights_58_load),
    .din59(p_ZL8weights_59_load),
    .din60(p_ZL8weights_60_load),
    .din61(p_ZL8weights_61_load),
    .din62(p_ZL8weights_62_load),
    .din63(p_ZL8weights_63_load),
    .din64(r_V_1_fu_874_p65),
    .dout(r_V_1_fu_874_p66)
);

nnlayer_mux_74_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_74_16_1_1_U88(
    .din0(p_ZL6input_1_load),
    .din1(16'd0),
    .din2(p_ZL6input_3_load),
    .din3(16'd0),
    .din4(p_ZL6input_5_load),
    .din5(16'd0),
    .din6(p_ZL6input_7_load),
    .din7(ap_sig_allocacmp_phi_ln48_load),
    .dout(tmp_4_fu_1008_p9)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U89(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_fu_834_p9),
    .din1(r_V_fu_696_p66),
    .din2(grp_fu_1091_p2),
    .ce(1'b1),
    .dout(grp_fu_1091_p3)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U90(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_reg_1143),
    .din1(r_V_1_reg_1138),
    .din2(grp_fu_1100_p2),
    .ce(1'b1),
    .dout(grp_fu_1100_p3)
);

nnlayer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            lhs_fu_198 <= tmp;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            lhs_fu_198 <= {{trunc_ln4_fu_1073_p1[23:8]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_1_fu_674_p3 == 1'd0))) begin
            phi_ln48_fu_202 <= add_ln48_fu_1028_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            phi_ln48_fu_202 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_1_fu_674_p3 == 1'd0))) begin
        r_V_1_reg_1138 <= r_V_1_fu_874_p66;
        tmp_4_reg_1143 <= tmp_4_fu_1008_p9;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_reg_1124 <= ap_sig_allocacmp_phi_ln48_load[32'd3];
    end
end

always @ (*) begin
    if (((tmp_1_reg_1124 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_reg_1124 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_lhs_load_1 = {{trunc_ln4_fu_1073_p1[23:8]}};
    end else begin
        ap_sig_allocacmp_lhs_load_1 = lhs_fu_198;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_phi_ln48_load = 4'd0;
    end else begin
        ap_sig_allocacmp_phi_ln48_load = phi_ln48_fu_202;
    end
end

always @ (*) begin
    if (((tmp_1_reg_1124 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lhs_out_ap_vld = 1'b1;
    end else begin
        lhs_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln48_fu_1028_p2 = (ap_sig_allocacmp_phi_ln48_load + 4'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign grp_fu_1091_p2 = {{ap_sig_allocacmp_lhs_load_1}, {8'd0}};

assign grp_fu_1100_p2 = {{tmp_7_fu_1056_p4}, {8'd0}};

assign lhs_out = lhs_fu_198;

assign or_ln51_fu_858_p2 = (trunc_ln48_fu_682_p1 | 3'd1);

assign r_V_1_fu_874_p65 = (zext_ln51_fu_864_p1 + zext_ln736_cast_fu_657_p1);

assign r_V_fu_696_p65 = (zext_ln48_fu_686_p1 + zext_ln736_cast_fu_657_p1);

assign tmp_1_fu_674_p3 = ap_sig_allocacmp_phi_ln48_load[32'd3];

assign tmp_7_fu_1056_p1 = grp_fu_1091_p3;

assign tmp_7_fu_1056_p4 = {{tmp_7_fu_1056_p1[23:8]}};

assign trunc_ln48_fu_682_p1 = ap_sig_allocacmp_phi_ln48_load[2:0];

assign trunc_ln4_fu_1073_p1 = grp_fu_1100_p3;

assign zext_ln48_fu_686_p1 = ap_sig_allocacmp_phi_ln48_load;

assign zext_ln51_fu_864_p1 = or_ln51_fu_858_p2;

assign zext_ln736_cast_fu_657_p1 = zext_ln736;

endmodule //nnlayer_nnlayer_Pipeline_VITIS_LOOP_48_2
