// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nnlayer_nnlayer_Pipeline_VITIS_LOOP_79_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp_2,
        conv1_i,
        mul_ln736,
        p_out,
        p_out_ap_vld,
        trunc_ln717_6_out,
        trunc_ln717_6_out_ap_vld,
        trunc_ln717_5_out,
        trunc_ln717_5_out_ap_vld,
        trunc_ln717_4_out,
        trunc_ln717_4_out_ap_vld,
        trunc_ln717_3_out,
        trunc_ln717_3_out_ap_vld,
        trunc_ln717_2_out,
        trunc_ln717_2_out_ap_vld,
        trunc_ln717_1_out,
        trunc_ln717_1_out_ap_vld,
        trunc_ln1_out,
        trunc_ln1_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_pp0_stage0 = 11'd2;
parameter    ap_ST_fsm_pp0_stage1 = 11'd4;
parameter    ap_ST_fsm_state5 = 11'd8;
parameter    ap_ST_fsm_state6 = 11'd16;
parameter    ap_ST_fsm_state7 = 11'd32;
parameter    ap_ST_fsm_state8 = 11'd64;
parameter    ap_ST_fsm_state9 = 11'd128;
parameter    ap_ST_fsm_state10 = 11'd256;
parameter    ap_ST_fsm_state11 = 11'd512;
parameter    ap_ST_fsm_state12 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] tmp_2;
input  [15:0] conv1_i;
input  [23:0] mul_ln736;
output  [15:0] p_out;
output   p_out_ap_vld;
output  [15:0] trunc_ln717_6_out;
output   trunc_ln717_6_out_ap_vld;
output  [15:0] trunc_ln717_5_out;
output   trunc_ln717_5_out_ap_vld;
output  [15:0] trunc_ln717_4_out;
output   trunc_ln717_4_out_ap_vld;
output  [15:0] trunc_ln717_3_out;
output   trunc_ln717_3_out_ap_vld;
output  [15:0] trunc_ln717_2_out;
output   trunc_ln717_2_out_ap_vld;
output  [15:0] trunc_ln717_1_out;
output   trunc_ln717_1_out_ap_vld;
output  [15:0] trunc_ln1_out;
output   trunc_ln1_out_ap_vld;
output  [2:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] p_out;
reg p_out_ap_vld;
reg trunc_ln717_6_out_ap_vld;
reg trunc_ln717_5_out_ap_vld;
reg trunc_ln717_4_out_ap_vld;
reg trunc_ln717_3_out_ap_vld;
reg trunc_ln717_2_out_ap_vld;
reg trunc_ln717_1_out_ap_vld;
reg trunc_ln1_out_ap_vld;
reg[2:0] ap_return;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] conv1_i_cast_fu_208_p1;
reg   [31:0] conv1_i_cast_reg_531;
wire   [0:0] icmp_ln79_fu_225_p2;
reg   [0:0] icmp_ln79_reg_543;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] grp_load_fu_204_p1;
reg   [15:0] p_load12_reg_547;
wire   [15:0] trunc_ln1_fu_243_p4;
reg   [15:0] trunc_ln1_reg_552;
wire   [0:0] icmp_ln79_1_fu_259_p2;
reg   [0:0] icmp_ln79_1_reg_557;
wire   [15:0] trunc_ln717_1_fu_277_p4;
reg   [15:0] trunc_ln717_1_reg_561;
wire   [0:0] icmp_ln79_2_fu_293_p2;
reg   [0:0] icmp_ln79_2_reg_566;
reg   [15:0] trunc_ln717_2_reg_570;
wire   [0:0] icmp_ln79_3_fu_327_p2;
reg   [0:0] icmp_ln79_3_reg_576;
wire   [0:0] icmp_ln79_4_fu_338_p2;
reg   [0:0] icmp_ln79_4_reg_580;
wire   [0:0] icmp_ln79_5_fu_349_p2;
reg   [0:0] icmp_ln79_5_reg_584;
wire   [0:0] icmp_ln79_6_fu_360_p2;
reg   [0:0] icmp_ln79_6_reg_588;
wire   [0:0] icmp_ln79_7_fu_371_p2;
reg   [0:0] icmp_ln79_7_reg_592;
wire   [15:0] trunc_ln717_3_fu_399_p4;
reg   [15:0] trunc_ln717_3_reg_596;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [15:0] trunc_ln717_4_fu_422_p4;
reg   [15:0] trunc_ln717_4_reg_601;
reg   [15:0] trunc_ln717_5_reg_606;
wire   [15:0] trunc_ln717_6_fu_467_p4;
reg   [15:0] trunc_ln717_6_reg_612;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_predicate_tran4to5_state3;
reg    ap_predicate_tran4to6_state3;
reg    ap_predicate_tran4to7_state3;
reg    ap_predicate_tran4to8_state3;
reg    ap_predicate_tran4to9_state3;
reg    ap_predicate_tran4to10_state3;
reg    ap_predicate_tran4to11_state3;
reg    ap_condition_pp0_flush_enable;
wire    ap_block_pp0_stage0_subdone;
reg   [2:0] ap_phi_mux_UnifiedRetVal_phi_fu_178_p16;
reg   [2:0] UnifiedRetVal_reg_168;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg   [31:0] inNeurons_0_fu_86;
wire   [31:0] add_ln79_fu_376_p2;
wire    ap_block_pp0_stage0;
reg   [15:0] empty_fu_90;
reg   [15:0] ap_sig_allocacmp_p_load12;
wire   [23:0] shl_ln_fu_230_p3;
wire   [23:0] add_ln1245_fu_238_p2;
wire   [31:0] or_ln79_fu_253_p2;
wire   [23:0] shl_ln737_2_fu_264_p3;
wire   [23:0] add_ln1245_1_fu_272_p2;
wire   [31:0] or_ln79_1_fu_287_p2;
wire   [23:0] shl_ln737_3_fu_298_p3;
wire   [23:0] add_ln1245_2_fu_306_p2;
wire   [31:0] or_ln79_2_fu_321_p2;
wire   [31:0] or_ln79_3_fu_332_p2;
wire   [31:0] or_ln79_4_fu_343_p2;
wire   [31:0] or_ln79_5_fu_354_p2;
wire   [31:0] or_ln79_6_fu_365_p2;
wire    ap_block_pp0_stage1;
wire   [23:0] shl_ln737_6_fu_387_p3;
wire   [23:0] add_ln1245_3_fu_394_p2;
wire   [23:0] shl_ln737_7_fu_409_p3;
wire   [23:0] add_ln1245_4_fu_417_p2;
wire   [23:0] shl_ln737_8_fu_432_p3;
wire   [23:0] add_ln1245_5_fu_440_p2;
wire   [23:0] shl_ln737_9_fu_455_p3;
wire   [23:0] add_ln1245_6_fu_462_p2;
wire   [23:0] shl_ln737_s_fu_477_p3;
wire   [23:0] add_ln1245_7_fu_485_p2;
reg   [2:0] ap_return_preg;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg   [7:0] ap_exit_tran_regpp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_preg = 3'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 3'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_178_p16;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        UnifiedRetVal_reg_168 <= 3'd7;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        UnifiedRetVal_reg_168 <= 3'd6;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        UnifiedRetVal_reg_168 <= 3'd5;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        UnifiedRetVal_reg_168 <= 3'd4;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        UnifiedRetVal_reg_168 <= 3'd3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        UnifiedRetVal_reg_168 <= 3'd2;
    end else if (((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (icmp_ln79_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln79_6_reg_588 == 1'd0) & (icmp_ln79_5_reg_584 == 1'd0))) begin
        UnifiedRetVal_reg_168 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        UnifiedRetVal_reg_168 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if ((icmp_ln79_reg_543 == 1'd1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b1;
            ap_exit_tran_regpp0[1] <= 1'b1;
            ap_exit_tran_regpp0[2] <= 1'b1;
        end else if ((ap_predicate_tran4to11_state3 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b0;
            ap_exit_tran_regpp0[1] <= 1'b1;
            ap_exit_tran_regpp0[2] <= 1'b1;
        end else if ((ap_predicate_tran4to10_state3 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b1;
            ap_exit_tran_regpp0[1] <= 1'b0;
            ap_exit_tran_regpp0[2] <= 1'b1;
        end else if ((ap_predicate_tran4to9_state3 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b0;
            ap_exit_tran_regpp0[1] <= 1'b0;
            ap_exit_tran_regpp0[2] <= 1'b1;
        end else if ((ap_predicate_tran4to8_state3 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b1;
            ap_exit_tran_regpp0[1] <= 1'b1;
            ap_exit_tran_regpp0[2] <= 1'b0;
        end else if ((ap_predicate_tran4to7_state3 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b0;
            ap_exit_tran_regpp0[1] <= 1'b1;
            ap_exit_tran_regpp0[2] <= 1'b0;
        end else if ((ap_predicate_tran4to6_state3 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b1;
            ap_exit_tran_regpp0[1] <= 1'b0;
            ap_exit_tran_regpp0[2] <= 1'b0;
        end else if ((ap_predicate_tran4to5_state3 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b0;
            ap_exit_tran_regpp0[1] <= 1'b0;
            ap_exit_tran_regpp0[2] <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_fu_90 <= tmp_2;
    end else if (((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln79_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln79_7_reg_592 == 1'd0) & (icmp_ln79_6_reg_588 == 1'd0) & (icmp_ln79_5_reg_584 == 1'd0))) begin
        empty_fu_90 <= {{add_ln1245_7_fu_485_p2[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        inNeurons_0_fu_86 <= 32'd0;
    end else if (((icmp_ln79_4_fu_338_p2 == 1'd0) & (icmp_ln79_3_fu_327_p2 == 1'd0) & (icmp_ln79_2_fu_293_p2 == 1'd0) & (icmp_ln79_1_fu_259_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln79_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln79_7_fu_371_p2 == 1'd0) & (icmp_ln79_6_fu_360_p2 == 1'd0) & (icmp_ln79_5_fu_349_p2 == 1'd0))) begin
        inNeurons_0_fu_86 <= add_ln79_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        conv1_i_cast_reg_531[15 : 0] <= conv1_i_cast_fu_208_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln79_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln79_1_reg_557 <= icmp_ln79_1_fu_259_p2;
        p_load12_reg_547 <= grp_load_fu_204_p1;
        trunc_ln1_reg_552 <= {{add_ln1245_fu_238_p2[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_1_fu_259_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln79_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln79_2_reg_566 <= icmp_ln79_2_fu_293_p2;
        trunc_ln717_1_reg_561 <= {{add_ln1245_1_fu_272_p2[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_2_fu_293_p2 == 1'd0) & (icmp_ln79_1_fu_259_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln79_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln79_3_reg_576 <= icmp_ln79_3_fu_327_p2;
        trunc_ln717_2_reg_570 <= {{add_ln1245_2_fu_306_p2[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_3_fu_327_p2 == 1'd0) & (icmp_ln79_2_fu_293_p2 == 1'd0) & (icmp_ln79_1_fu_259_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln79_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln79_4_reg_580 <= icmp_ln79_4_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_4_fu_338_p2 == 1'd0) & (icmp_ln79_3_fu_327_p2 == 1'd0) & (icmp_ln79_2_fu_293_p2 == 1'd0) & (icmp_ln79_1_fu_259_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln79_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln79_5_reg_584 <= icmp_ln79_5_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_4_fu_338_p2 == 1'd0) & (icmp_ln79_3_fu_327_p2 == 1'd0) & (icmp_ln79_2_fu_293_p2 == 1'd0) & (icmp_ln79_1_fu_259_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln79_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln79_5_fu_349_p2 == 1'd0))) begin
        icmp_ln79_6_reg_588 <= icmp_ln79_6_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_4_fu_338_p2 == 1'd0) & (icmp_ln79_3_fu_327_p2 == 1'd0) & (icmp_ln79_2_fu_293_p2 == 1'd0) & (icmp_ln79_1_fu_259_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln79_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln79_6_fu_360_p2 == 1'd0) & (icmp_ln79_5_fu_349_p2 == 1'd0))) begin
        icmp_ln79_7_reg_592 <= icmp_ln79_7_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln79_reg_543 <= icmp_ln79_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln79_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        trunc_ln717_3_reg_596 <= {{add_ln1245_3_fu_394_p2[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln79_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        trunc_ln717_4_reg_601 <= {{add_ln1245_4_fu_417_p2[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln79_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln79_5_reg_584 == 1'd0))) begin
        trunc_ln717_5_reg_606 <= {{add_ln1245_5_fu_440_p2[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln79_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln79_6_reg_588 == 1'd0) & (icmp_ln79_5_reg_584 == 1'd0))) begin
        trunc_ln717_6_reg_612 <= {{add_ln1245_6_fu_462_p2[23:8]}};
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & ((icmp_ln79_reg_543 == 1'd1) | (ap_predicate_tran4to11_state3 == 1'b1) | (ap_predicate_tran4to10_state3 == 1'b1) | (ap_predicate_tran4to9_state3 == 1'b1) | (ap_predicate_tran4to8_state3 == 1'b1) | (ap_predicate_tran4to7_state3 == 1'b1) | (ap_predicate_tran4to6_state3 == 1'b1) | (ap_predicate_tran4to5_state3 == 1'b1)))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (icmp_ln79_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln79_6_reg_588 == 1'd0) & (icmp_ln79_5_reg_584 == 1'd0))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_178_p16 = 3'd1;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_178_p16 = UnifiedRetVal_reg_168;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_178_p16;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln79_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln79_7_reg_592 == 1'd0) & (icmp_ln79_6_reg_588 == 1'd0) & (icmp_ln79_5_reg_584 == 1'd0))) begin
        ap_sig_allocacmp_p_load12 = {{add_ln1245_7_fu_485_p2[23:8]}};
    end else begin
        ap_sig_allocacmp_p_load12 = empty_fu_90;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12) | ((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (icmp_ln79_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln79_6_reg_588 == 1'd0) & (icmp_ln79_5_reg_584 == 1'd0)))) begin
        grp_load_fu_204_p1 = empty_fu_90;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln79_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_load_fu_204_p1 = ap_sig_allocacmp_p_load12;
    end else begin
        grp_load_fu_204_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_out = p_load12_reg_547;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12) | ((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (icmp_ln79_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln79_6_reg_588 == 1'd0) & (icmp_ln79_5_reg_584 == 1'd0)))) begin
        p_out = grp_load_fu_204_p1;
    end else begin
        p_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12) | ((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (icmp_ln79_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln79_6_reg_588 == 1'd0) & (icmp_ln79_5_reg_584 == 1'd0)))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (icmp_ln79_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln79_6_reg_588 == 1'd0) & (icmp_ln79_5_reg_584 == 1'd0)))) begin
        trunc_ln1_out_ap_vld = 1'b1;
    end else begin
        trunc_ln1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (icmp_ln79_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln79_6_reg_588 == 1'd0) & (icmp_ln79_5_reg_584 == 1'd0)))) begin
        trunc_ln717_1_out_ap_vld = 1'b1;
    end else begin
        trunc_ln717_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (icmp_ln79_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln79_6_reg_588 == 1'd0) & (icmp_ln79_5_reg_584 == 1'd0)))) begin
        trunc_ln717_2_out_ap_vld = 1'b1;
    end else begin
        trunc_ln717_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (icmp_ln79_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln79_6_reg_588 == 1'd0) & (icmp_ln79_5_reg_584 == 1'd0)))) begin
        trunc_ln717_3_out_ap_vld = 1'b1;
    end else begin
        trunc_ln717_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (icmp_ln79_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln79_6_reg_588 == 1'd0) & (icmp_ln79_5_reg_584 == 1'd0)))) begin
        trunc_ln717_4_out_ap_vld = 1'b1;
    end else begin
        trunc_ln717_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (icmp_ln79_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln79_6_reg_588 == 1'd0) & (icmp_ln79_5_reg_584 == 1'd0)))) begin
        trunc_ln717_5_out_ap_vld = 1'b1;
    end else begin
        trunc_ln717_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (icmp_ln79_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln79_6_reg_588 == 1'd0) & (icmp_ln79_5_reg_584 == 1'd0))) begin
        trunc_ln717_6_out_ap_vld = 1'b1;
    end else begin
        trunc_ln717_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 8'd7) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 8'd6) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 8'd5) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 8'd4) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 8'd3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 8'd2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 8'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 8'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1245_1_fu_272_p2 = (shl_ln737_2_fu_264_p3 + mul_ln736);

assign add_ln1245_2_fu_306_p2 = (shl_ln737_3_fu_298_p3 + mul_ln736);

assign add_ln1245_3_fu_394_p2 = (shl_ln737_6_fu_387_p3 + mul_ln736);

assign add_ln1245_4_fu_417_p2 = (shl_ln737_7_fu_409_p3 + mul_ln736);

assign add_ln1245_5_fu_440_p2 = (shl_ln737_8_fu_432_p3 + mul_ln736);

assign add_ln1245_6_fu_462_p2 = (shl_ln737_9_fu_455_p3 + mul_ln736);

assign add_ln1245_7_fu_485_p2 = (shl_ln737_s_fu_477_p3 + mul_ln736);

assign add_ln1245_fu_238_p2 = (shl_ln_fu_230_p3 + mul_ln736);

assign add_ln79_fu_376_p2 = (inNeurons_0_fu_86 + 32'd8);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran4to10_state3 = ((icmp_ln79_2_reg_566 == 1'd1) & (icmp_ln79_1_reg_557 == 1'd0) & (icmp_ln79_reg_543 == 1'd0));
end

always @ (*) begin
    ap_predicate_tran4to11_state3 = ((icmp_ln79_1_reg_557 == 1'd1) & (icmp_ln79_reg_543 == 1'd0));
end

always @ (*) begin
    ap_predicate_tran4to5_state3 = ((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (icmp_ln79_reg_543 == 1'd0) & (icmp_ln79_7_reg_592 == 1'd1) & (icmp_ln79_6_reg_588 == 1'd0) & (icmp_ln79_5_reg_584 == 1'd0));
end

always @ (*) begin
    ap_predicate_tran4to6_state3 = ((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (icmp_ln79_reg_543 == 1'd0) & (icmp_ln79_6_reg_588 == 1'd1) & (icmp_ln79_5_reg_584 == 1'd0));
end

always @ (*) begin
    ap_predicate_tran4to7_state3 = ((icmp_ln79_4_reg_580 == 1'd0) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (icmp_ln79_reg_543 == 1'd0) & (icmp_ln79_5_reg_584 == 1'd1));
end

always @ (*) begin
    ap_predicate_tran4to8_state3 = ((icmp_ln79_4_reg_580 == 1'd1) & (icmp_ln79_3_reg_576 == 1'd0) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (icmp_ln79_reg_543 == 1'd0));
end

always @ (*) begin
    ap_predicate_tran4to9_state3 = ((icmp_ln79_3_reg_576 == 1'd1) & (icmp_ln79_2_reg_566 == 1'd0) & (icmp_ln79_1_reg_557 == 1'd0) & (icmp_ln79_reg_543 == 1'd0));
end

assign conv1_i_cast_fu_208_p1 = conv1_i;

assign icmp_ln79_1_fu_259_p2 = ((or_ln79_fu_253_p2 == conv1_i_cast_reg_531) ? 1'b1 : 1'b0);

assign icmp_ln79_2_fu_293_p2 = ((or_ln79_1_fu_287_p2 == conv1_i_cast_reg_531) ? 1'b1 : 1'b0);

assign icmp_ln79_3_fu_327_p2 = ((or_ln79_2_fu_321_p2 == conv1_i_cast_reg_531) ? 1'b1 : 1'b0);

assign icmp_ln79_4_fu_338_p2 = ((or_ln79_3_fu_332_p2 == conv1_i_cast_reg_531) ? 1'b1 : 1'b0);

assign icmp_ln79_5_fu_349_p2 = ((or_ln79_4_fu_343_p2 == conv1_i_cast_reg_531) ? 1'b1 : 1'b0);

assign icmp_ln79_6_fu_360_p2 = ((or_ln79_5_fu_354_p2 == conv1_i_cast_reg_531) ? 1'b1 : 1'b0);

assign icmp_ln79_7_fu_371_p2 = ((or_ln79_6_fu_365_p2 == conv1_i_cast_reg_531) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_225_p2 = ((inNeurons_0_fu_86 == conv1_i_cast_reg_531) ? 1'b1 : 1'b0);

assign or_ln79_1_fu_287_p2 = (inNeurons_0_fu_86 | 32'd2);

assign or_ln79_2_fu_321_p2 = (inNeurons_0_fu_86 | 32'd3);

assign or_ln79_3_fu_332_p2 = (inNeurons_0_fu_86 | 32'd4);

assign or_ln79_4_fu_343_p2 = (inNeurons_0_fu_86 | 32'd5);

assign or_ln79_5_fu_354_p2 = (inNeurons_0_fu_86 | 32'd6);

assign or_ln79_6_fu_365_p2 = (inNeurons_0_fu_86 | 32'd7);

assign or_ln79_fu_253_p2 = (inNeurons_0_fu_86 | 32'd1);

assign shl_ln737_2_fu_264_p3 = {{trunc_ln1_fu_243_p4}, {8'd0}};

assign shl_ln737_3_fu_298_p3 = {{trunc_ln717_1_fu_277_p4}, {8'd0}};

assign shl_ln737_6_fu_387_p3 = {{trunc_ln717_2_reg_570}, {8'd0}};

assign shl_ln737_7_fu_409_p3 = {{trunc_ln717_3_fu_399_p4}, {8'd0}};

assign shl_ln737_8_fu_432_p3 = {{trunc_ln717_4_fu_422_p4}, {8'd0}};

assign shl_ln737_9_fu_455_p3 = {{trunc_ln717_5_reg_606}, {8'd0}};

assign shl_ln737_s_fu_477_p3 = {{trunc_ln717_6_fu_467_p4}, {8'd0}};

assign shl_ln_fu_230_p3 = {{grp_load_fu_204_p1}, {8'd0}};

assign trunc_ln1_fu_243_p4 = {{add_ln1245_fu_238_p2[23:8]}};

assign trunc_ln1_out = trunc_ln1_reg_552;

assign trunc_ln717_1_fu_277_p4 = {{add_ln1245_1_fu_272_p2[23:8]}};

assign trunc_ln717_1_out = trunc_ln717_1_reg_561;

assign trunc_ln717_2_out = trunc_ln717_2_reg_570;

assign trunc_ln717_3_fu_399_p4 = {{add_ln1245_3_fu_394_p2[23:8]}};

assign trunc_ln717_3_out = trunc_ln717_3_reg_596;

assign trunc_ln717_4_fu_422_p4 = {{add_ln1245_4_fu_417_p2[23:8]}};

assign trunc_ln717_4_out = trunc_ln717_4_reg_601;

assign trunc_ln717_5_out = trunc_ln717_5_reg_606;

assign trunc_ln717_6_fu_467_p4 = {{add_ln1245_6_fu_462_p2[23:8]}};

assign trunc_ln717_6_out = trunc_ln717_6_reg_612;

always @ (posedge ap_clk) begin
    conv1_i_cast_reg_531[31:16] <= 16'b0000000000000000;
    ap_exit_tran_regpp0[7:3] <= 5'b00000;
end

endmodule //nnlayer_nnlayer_Pipeline_VITIS_LOOP_79_2
