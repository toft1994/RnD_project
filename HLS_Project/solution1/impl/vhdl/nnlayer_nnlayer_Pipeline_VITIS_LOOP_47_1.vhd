-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nnlayer_nnlayer_Pipeline_VITIS_LOOP_47_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    numOfInNeurons : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_0_0_i : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_0_0_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_0_0_o_ap_vld : OUT STD_LOGIC;
    p_ZL7output_0_1_i : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_0_1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_0_1_o_ap_vld : OUT STD_LOGIC;
    p_ZL7output_1_0_i : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_1_0_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_1_0_o_ap_vld : OUT STD_LOGIC;
    p_ZL7output_1_1_i : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_1_1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_1_1_o_ap_vld : OUT STD_LOGIC;
    p_ZL7output_2_0_i : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_2_0_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_2_0_o_ap_vld : OUT STD_LOGIC;
    p_ZL7output_2_1_i : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_2_1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_2_1_o_ap_vld : OUT STD_LOGIC;
    p_ZL7output_3_0_i : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_3_0_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_3_0_o_ap_vld : OUT STD_LOGIC;
    p_ZL7output_3_1_i : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_3_1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_3_1_o_ap_vld : OUT STD_LOGIC;
    p_ZL8weights_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_ZL8weights_0_ce0 : OUT STD_LOGIC;
    p_ZL8weights_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_ZL8weights_0_ce1 : OUT STD_LOGIC;
    p_ZL8weights_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_ZL8weights_1_ce0 : OUT STD_LOGIC;
    p_ZL8weights_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_ZL8weights_1_ce1 : OUT STD_LOGIC;
    p_ZL8weights_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_ZL8weights_2_ce0 : OUT STD_LOGIC;
    p_ZL8weights_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_2_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_ZL8weights_2_ce1 : OUT STD_LOGIC;
    p_ZL8weights_2_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_ZL8weights_3_ce0 : OUT STD_LOGIC;
    p_ZL8weights_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_3_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_ZL8weights_3_ce1 : OUT STD_LOGIC;
    p_ZL8weights_3_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of nnlayer_nnlayer_Pipeline_VITIS_LOOP_47_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv17_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_const_lv17_3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv17_4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_const_lv17_5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv17_6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000110";
    constant ap_const_lv17_7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln47_reg_1316 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal sext_ln1245_7_cast_fu_488_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_7_cast_reg_1276 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln1245_6_cast_fu_492_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_6_cast_reg_1281 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_5_cast_fu_496_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_5_cast_reg_1286 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_4_cast_fu_500_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_4_cast_reg_1291 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_3_cast_fu_504_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_3_cast_reg_1296 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_2_cast_fu_508_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_2_cast_reg_1301 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_1_cast_fu_512_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_1_cast_reg_1306 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_cast_fu_516_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_cast_reg_1311 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln47_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv1250_i_load_reg_1320 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_37_fu_548_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_37_reg_1325 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_reg_1335 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_reg_1335_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_38_fu_562_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_38_reg_1340 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_38_reg_1340_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_reg_1348 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv1250_i_cast6_fu_617_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal conv1250_i_cast6_reg_1393 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_1_1_fu_653_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_1_reg_1408 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_1_2_fu_711_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_2_reg_1458 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_3_fu_740_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_3_reg_1463 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_1_4_fu_879_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_4_reg_1518 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_5_fu_908_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_5_reg_1523 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal tmp_1_6_fu_983_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_6_reg_1578 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_7_fu_1012_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_7_reg_1583 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln1169_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1169_1_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_2_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln1169_3_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_4_fu_759_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln1169_5_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_6_fu_927_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln1169_7_fu_940_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_allocacmp_p_ZL7output_0_0_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_p_ZL7output_0_1_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_p_ZL7output_1_0_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_p_ZL7output_1_1_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_p_ZL7output_2_0_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_p_ZL7output_2_1_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_p_ZL7output_3_0_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_p_ZL7output_3_1_load : STD_LOGIC_VECTOR (15 downto 0);
    signal conv1250_i_fu_134 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln54_fu_601_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_conv1250_i_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_conv1250_i_load_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvars_iv16_fu_138 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln47_fu_539_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_indvars_iv16_load : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln1169_fu_584_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_620_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln52_fu_637_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_1_fu_653_p5 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1169_1_fu_667_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln1169_2_fu_680_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln52_1_fu_696_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_2_fu_711_p5 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln52_2_fu_725_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_3_fu_740_p5 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1169_3_fu_754_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln1169_4_fu_767_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_840_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_840_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_840_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_840_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_840_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln52_3_fu_864_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_4_fu_879_p5 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln52_4_fu_893_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_5_fu_908_p5 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1169_5_fu_922_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln1169_6_fu_935_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_948_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1197_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal tmp_7_fu_948_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln52_5_fu_968_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_6_fu_983_p5 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln52_6_fu_997_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_7_fu_1012_p5 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_fu_1026_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1205_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal tmp_8_fu_1026_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_1046_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1213_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal tmp_9_fu_1046_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_1066_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1221_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal tmp_s_fu_1066_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_1086_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1229_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_fu_1086_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_1106_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1237_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_fu_1106_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_1123_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1245_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_fu_1123_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln717_7_fu_1140_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1253_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1197_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1197_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1205_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1205_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1213_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1213_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1221_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1221_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1229_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1229_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1237_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1237_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1245_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1245_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1253_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1253_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component nnlayer_mux_412_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_mux_413_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_mux_42_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component nnlayer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_412_16_1_1_U18 : component nnlayer_mux_412_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 12,
        dout_WIDTH => 16)
    port map (
        din0 => p_ZL8weights_0_q1,
        din1 => p_ZL8weights_1_q1,
        din2 => p_ZL8weights_2_q1,
        din3 => p_ZL8weights_3_q1,
        din4 => lshr_ln_reg_1348,
        dout => tmp_1_fu_620_p6);

    mux_413_16_1_1_U19 : component nnlayer_mux_413_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 13,
        dout_WIDTH => 16)
    port map (
        din0 => p_ZL8weights_0_q0,
        din1 => p_ZL8weights_1_q0,
        din2 => p_ZL8weights_2_q0,
        din3 => p_ZL8weights_3_q0,
        din4 => tmp_1_1_fu_653_p5,
        dout => tmp_1_1_fu_653_p6);

    mux_413_16_1_1_U20 : component nnlayer_mux_413_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 13,
        dout_WIDTH => 16)
    port map (
        din0 => p_ZL8weights_0_q1,
        din1 => p_ZL8weights_1_q1,
        din2 => p_ZL8weights_2_q1,
        din3 => p_ZL8weights_3_q1,
        din4 => tmp_1_2_fu_711_p5,
        dout => tmp_1_2_fu_711_p6);

    mux_413_16_1_1_U21 : component nnlayer_mux_413_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 13,
        dout_WIDTH => 16)
    port map (
        din0 => p_ZL8weights_0_q0,
        din1 => p_ZL8weights_1_q0,
        din2 => p_ZL8weights_2_q0,
        din3 => p_ZL8weights_3_q0,
        din4 => tmp_1_3_fu_740_p5,
        dout => tmp_1_3_fu_740_p6);

    mux_42_16_1_1_U22 : component nnlayer_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_fu_840_p1,
        din1 => tmp_fu_840_p2,
        din2 => tmp_fu_840_p3,
        din3 => tmp_fu_840_p4,
        din4 => tmp_6_reg_1335,
        dout => tmp_fu_840_p6);

    mux_413_16_1_1_U23 : component nnlayer_mux_413_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 13,
        dout_WIDTH => 16)
    port map (
        din0 => p_ZL8weights_0_q1,
        din1 => p_ZL8weights_1_q1,
        din2 => p_ZL8weights_2_q1,
        din3 => p_ZL8weights_3_q1,
        din4 => tmp_1_4_fu_879_p5,
        dout => tmp_1_4_fu_879_p6);

    mux_413_16_1_1_U24 : component nnlayer_mux_413_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 13,
        dout_WIDTH => 16)
    port map (
        din0 => p_ZL8weights_0_q0,
        din1 => p_ZL8weights_1_q0,
        din2 => p_ZL8weights_2_q0,
        din3 => p_ZL8weights_3_q0,
        din4 => tmp_1_5_fu_908_p5,
        dout => tmp_1_5_fu_908_p6);

    mux_413_16_1_1_U25 : component nnlayer_mux_413_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 13,
        dout_WIDTH => 16)
    port map (
        din0 => p_ZL8weights_0_q1,
        din1 => p_ZL8weights_1_q1,
        din2 => p_ZL8weights_2_q1,
        din3 => p_ZL8weights_3_q1,
        din4 => tmp_1_6_fu_983_p5,
        dout => tmp_1_6_fu_983_p6);

    mux_413_16_1_1_U26 : component nnlayer_mux_413_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 13,
        dout_WIDTH => 16)
    port map (
        din0 => p_ZL8weights_0_q0,
        din1 => p_ZL8weights_1_q0,
        din2 => p_ZL8weights_2_q0,
        din3 => p_ZL8weights_3_q0,
        din4 => tmp_1_7_fu_1012_p5,
        dout => tmp_1_7_fu_1012_p6);

    mac_muladd_16s_16s_24ns_24_4_1_U27 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1197_p0,
        din1 => tmp_1_fu_620_p6,
        din2 => grp_fu_1197_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1197_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U28 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1205_p0,
        din1 => tmp_1_1_reg_1408,
        din2 => grp_fu_1205_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1205_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U29 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1213_p0,
        din1 => tmp_1_2_reg_1458,
        din2 => grp_fu_1213_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1213_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U30 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1221_p0,
        din1 => tmp_1_3_reg_1463,
        din2 => grp_fu_1221_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1221_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U31 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1229_p0,
        din1 => tmp_1_4_reg_1518,
        din2 => grp_fu_1229_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1229_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U32 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1237_p0,
        din1 => tmp_1_5_reg_1523,
        din2 => grp_fu_1237_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1237_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U33 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1245_p0,
        din1 => tmp_1_6_reg_1578,
        din2 => grp_fu_1245_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1245_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U34 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1253_p0,
        din1 => tmp_1_7_reg_1583,
        din2 => grp_fu_1253_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1253_p3);

    flow_control_loop_pipe_sequential_init_U : component nnlayer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    conv1250_i_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln47_fu_533_p2 = ap_const_lv1_0))) then 
                    conv1250_i_fu_134 <= add_ln54_fu_601_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    conv1250_i_fu_134 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    indvars_iv16_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln47_fu_533_p2 = ap_const_lv1_0))) then 
                    indvars_iv16_fu_138 <= add_ln47_fu_539_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvars_iv16_fu_138 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_reg_1316 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    conv1250_i_cast6_reg_1393(15 downto 0) <= conv1250_i_cast6_fu_617_p1(15 downto 0);
                tmp_1_1_reg_1408 <= tmp_1_1_fu_653_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln47_fu_533_p2 = ap_const_lv1_0))) then
                conv1250_i_load_reg_1320 <= ap_sig_allocacmp_conv1250_i_load;
                empty_37_reg_1325 <= empty_37_fu_548_p1;
                empty_38_reg_1340 <= empty_38_fu_562_p1;
                lshr_ln_reg_1348 <= ap_sig_allocacmp_conv1250_i_load(15 downto 4);
                tmp_6_reg_1335 <= ap_sig_allocacmp_indvars_iv16_load(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_38_reg_1340_pp0_iter1_reg <= empty_38_reg_1340;
                icmp_ln47_reg_1316 <= icmp_ln47_fu_533_p2;
                sext_ln1245_1_cast_reg_1306 <= sext_ln1245_1_cast_fu_512_p1;
                sext_ln1245_2_cast_reg_1301 <= sext_ln1245_2_cast_fu_508_p1;
                sext_ln1245_3_cast_reg_1296 <= sext_ln1245_3_cast_fu_504_p1;
                sext_ln1245_4_cast_reg_1291 <= sext_ln1245_4_cast_fu_500_p1;
                sext_ln1245_5_cast_reg_1286 <= sext_ln1245_5_cast_fu_496_p1;
                sext_ln1245_6_cast_reg_1281 <= sext_ln1245_6_cast_fu_492_p1;
                sext_ln1245_7_cast_reg_1276 <= sext_ln1245_7_cast_fu_488_p1;
                sext_ln1245_cast_reg_1311 <= sext_ln1245_cast_fu_516_p1;
                tmp_6_reg_1335_pp0_iter1_reg <= tmp_6_reg_1335;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_reg_1316 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_1_2_reg_1458 <= tmp_1_2_fu_711_p6;
                tmp_1_3_reg_1463 <= tmp_1_3_fu_740_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_reg_1316 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_1_4_reg_1518 <= tmp_1_4_fu_879_p6;
                tmp_1_5_reg_1523 <= tmp_1_5_fu_908_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_reg_1316 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp_1_6_reg_1578 <= tmp_1_6_fu_983_p6;
                tmp_1_7_reg_1583 <= tmp_1_7_fu_1012_p6;
            end if;
        end if;
    end process;
    conv1250_i_cast6_reg_1393(16) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_condition_exit_pp0_iter0_stage3, ap_block_pp0_stage7_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln1169_1_fu_667_p2 <= std_logic_vector(unsigned(empty_37_reg_1325) + unsigned(ap_const_lv4_2));
    add_ln1169_2_fu_680_p2 <= std_logic_vector(unsigned(empty_37_reg_1325) + unsigned(ap_const_lv4_3));
    add_ln1169_3_fu_754_p2 <= std_logic_vector(unsigned(empty_37_reg_1325) + unsigned(ap_const_lv4_4));
    add_ln1169_4_fu_767_p2 <= std_logic_vector(unsigned(empty_37_reg_1325) + unsigned(ap_const_lv4_5));
    add_ln1169_5_fu_922_p2 <= std_logic_vector(unsigned(empty_37_reg_1325) + unsigned(ap_const_lv4_6));
    add_ln1169_6_fu_935_p2 <= std_logic_vector(unsigned(empty_37_reg_1325) + unsigned(ap_const_lv4_7));
    add_ln1169_fu_584_p2 <= std_logic_vector(unsigned(empty_37_fu_548_p1) + unsigned(ap_const_lv4_1));
    add_ln47_fu_539_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvars_iv16_load) + unsigned(ap_const_lv4_1));
    add_ln52_1_fu_696_p2 <= std_logic_vector(unsigned(conv1250_i_cast6_reg_1393) + unsigned(ap_const_lv17_2));
    add_ln52_2_fu_725_p2 <= std_logic_vector(unsigned(conv1250_i_cast6_reg_1393) + unsigned(ap_const_lv17_3));
    add_ln52_3_fu_864_p2 <= std_logic_vector(unsigned(conv1250_i_cast6_reg_1393) + unsigned(ap_const_lv17_4));
    add_ln52_4_fu_893_p2 <= std_logic_vector(unsigned(conv1250_i_cast6_reg_1393) + unsigned(ap_const_lv17_5));
    add_ln52_5_fu_968_p2 <= std_logic_vector(unsigned(conv1250_i_cast6_reg_1393) + unsigned(ap_const_lv17_6));
    add_ln52_6_fu_997_p2 <= std_logic_vector(unsigned(conv1250_i_cast6_reg_1393) + unsigned(ap_const_lv17_7));
    add_ln52_fu_637_p2 <= std_logic_vector(unsigned(conv1250_i_cast6_fu_617_p1) + unsigned(ap_const_lv17_1));
    add_ln54_fu_601_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_conv1250_i_load_1) + unsigned(numOfInNeurons));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln47_reg_1316)
    begin
        if (((icmp_ln47_reg_1316 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_conv1250_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, conv1250_i_fu_134, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_conv1250_i_load <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_conv1250_i_load <= conv1250_i_fu_134;
        end if; 
    end process;


    ap_sig_allocacmp_conv1250_i_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, conv1250_i_fu_134, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_conv1250_i_load_1 <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_conv1250_i_load_1 <= conv1250_i_fu_134;
        end if; 
    end process;


    ap_sig_allocacmp_indvars_iv16_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvars_iv16_fu_138)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvars_iv16_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_indvars_iv16_load <= indvars_iv16_fu_138;
        end if; 
    end process;


    ap_sig_allocacmp_p_ZL7output_0_0_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, p_ZL7output_0_0_i, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3, trunc_ln717_7_fu_1140_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_0) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_0))) then 
            ap_sig_allocacmp_p_ZL7output_0_0_load <= trunc_ln717_7_fu_1140_p1(23 downto 8);
        else 
            ap_sig_allocacmp_p_ZL7output_0_0_load <= p_ZL7output_0_0_i;
        end if; 
    end process;


    ap_sig_allocacmp_p_ZL7output_0_1_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, p_ZL7output_0_1_i, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3, trunc_ln717_7_fu_1140_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_1) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_0))) then 
            ap_sig_allocacmp_p_ZL7output_0_1_load <= trunc_ln717_7_fu_1140_p1(23 downto 8);
        else 
            ap_sig_allocacmp_p_ZL7output_0_1_load <= p_ZL7output_0_1_i;
        end if; 
    end process;


    ap_sig_allocacmp_p_ZL7output_1_0_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, p_ZL7output_1_0_i, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3, trunc_ln717_7_fu_1140_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_0) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_1))) then 
            ap_sig_allocacmp_p_ZL7output_1_0_load <= trunc_ln717_7_fu_1140_p1(23 downto 8);
        else 
            ap_sig_allocacmp_p_ZL7output_1_0_load <= p_ZL7output_1_0_i;
        end if; 
    end process;


    ap_sig_allocacmp_p_ZL7output_1_1_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, p_ZL7output_1_1_i, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3, trunc_ln717_7_fu_1140_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_1) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_1))) then 
            ap_sig_allocacmp_p_ZL7output_1_1_load <= trunc_ln717_7_fu_1140_p1(23 downto 8);
        else 
            ap_sig_allocacmp_p_ZL7output_1_1_load <= p_ZL7output_1_1_i;
        end if; 
    end process;


    ap_sig_allocacmp_p_ZL7output_2_0_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, p_ZL7output_2_0_i, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3, trunc_ln717_7_fu_1140_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_0) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_2))) then 
            ap_sig_allocacmp_p_ZL7output_2_0_load <= trunc_ln717_7_fu_1140_p1(23 downto 8);
        else 
            ap_sig_allocacmp_p_ZL7output_2_0_load <= p_ZL7output_2_0_i;
        end if; 
    end process;


    ap_sig_allocacmp_p_ZL7output_2_1_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, p_ZL7output_2_1_i, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3, trunc_ln717_7_fu_1140_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_1) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_2))) then 
            ap_sig_allocacmp_p_ZL7output_2_1_load <= trunc_ln717_7_fu_1140_p1(23 downto 8);
        else 
            ap_sig_allocacmp_p_ZL7output_2_1_load <= p_ZL7output_2_1_i;
        end if; 
    end process;


    ap_sig_allocacmp_p_ZL7output_3_0_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, p_ZL7output_3_0_i, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3, trunc_ln717_7_fu_1140_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_0) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_3))) then 
            ap_sig_allocacmp_p_ZL7output_3_0_load <= trunc_ln717_7_fu_1140_p1(23 downto 8);
        else 
            ap_sig_allocacmp_p_ZL7output_3_0_load <= p_ZL7output_3_0_i;
        end if; 
    end process;


    ap_sig_allocacmp_p_ZL7output_3_1_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, p_ZL7output_3_1_i, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3, trunc_ln717_7_fu_1140_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_1) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_3))) then 
            ap_sig_allocacmp_p_ZL7output_3_1_load <= trunc_ln717_7_fu_1140_p1(23 downto 8);
        else 
            ap_sig_allocacmp_p_ZL7output_3_1_load <= p_ZL7output_3_1_i;
        end if; 
    end process;

    conv1250_i_cast6_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv1250_i_load_reg_1320),17));
    empty_37_fu_548_p1 <= ap_sig_allocacmp_conv1250_i_load(4 - 1 downto 0);
    empty_38_fu_562_p1 <= ap_sig_allocacmp_indvars_iv16_load(1 - 1 downto 0);
    grp_fu_1197_p0 <= sext_ln1245_cast_reg_1311(16 - 1 downto 0);
    grp_fu_1197_p2 <= (tmp_fu_840_p6 & ap_const_lv8_0);
    grp_fu_1205_p0 <= sext_ln1245_1_cast_reg_1306(16 - 1 downto 0);
    grp_fu_1205_p2 <= (tmp_7_fu_948_p4 & ap_const_lv8_0);
    grp_fu_1213_p0 <= sext_ln1245_2_cast_reg_1301(16 - 1 downto 0);
    grp_fu_1213_p2 <= (tmp_8_fu_1026_p4 & ap_const_lv8_0);
    grp_fu_1221_p0 <= sext_ln1245_3_cast_reg_1296(16 - 1 downto 0);
    grp_fu_1221_p2 <= (tmp_9_fu_1046_p4 & ap_const_lv8_0);
    grp_fu_1229_p0 <= sext_ln1245_4_cast_reg_1291(16 - 1 downto 0);
    grp_fu_1229_p2 <= (tmp_s_fu_1066_p4 & ap_const_lv8_0);
    grp_fu_1237_p0 <= sext_ln1245_5_cast_reg_1286(16 - 1 downto 0);
    grp_fu_1237_p2 <= (tmp_2_fu_1086_p4 & ap_const_lv8_0);
    grp_fu_1245_p0 <= sext_ln1245_6_cast_reg_1281(16 - 1 downto 0);
    grp_fu_1245_p2 <= (tmp_3_fu_1106_p4 & ap_const_lv8_0);
    grp_fu_1253_p0 <= sext_ln1245_7_cast_reg_1276(16 - 1 downto 0);
    grp_fu_1253_p2 <= (tmp_4_fu_1123_p4 & ap_const_lv8_0);
    icmp_ln47_fu_533_p2 <= "1" when (ap_sig_allocacmp_indvars_iv16_load = ap_const_lv4_8) else "0";

    p_ZL7output_0_0_o_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, p_ZL7output_0_0_i, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3, trunc_ln717_7_fu_1140_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_0) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_0))) then 
            p_ZL7output_0_0_o <= trunc_ln717_7_fu_1140_p1(23 downto 8);
        else 
            p_ZL7output_0_0_o <= p_ZL7output_0_0_i;
        end if; 
    end process;


    p_ZL7output_0_0_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_0) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_0))) then 
            p_ZL7output_0_0_o_ap_vld <= ap_const_logic_1;
        else 
            p_ZL7output_0_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL7output_0_1_o_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, p_ZL7output_0_1_i, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3, trunc_ln717_7_fu_1140_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_1) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_0))) then 
            p_ZL7output_0_1_o <= trunc_ln717_7_fu_1140_p1(23 downto 8);
        else 
            p_ZL7output_0_1_o <= p_ZL7output_0_1_i;
        end if; 
    end process;


    p_ZL7output_0_1_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_1) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_0))) then 
            p_ZL7output_0_1_o_ap_vld <= ap_const_logic_1;
        else 
            p_ZL7output_0_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL7output_1_0_o_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, p_ZL7output_1_0_i, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3, trunc_ln717_7_fu_1140_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_0) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_1))) then 
            p_ZL7output_1_0_o <= trunc_ln717_7_fu_1140_p1(23 downto 8);
        else 
            p_ZL7output_1_0_o <= p_ZL7output_1_0_i;
        end if; 
    end process;


    p_ZL7output_1_0_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_0) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_1))) then 
            p_ZL7output_1_0_o_ap_vld <= ap_const_logic_1;
        else 
            p_ZL7output_1_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL7output_1_1_o_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, p_ZL7output_1_1_i, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3, trunc_ln717_7_fu_1140_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_1) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_1))) then 
            p_ZL7output_1_1_o <= trunc_ln717_7_fu_1140_p1(23 downto 8);
        else 
            p_ZL7output_1_1_o <= p_ZL7output_1_1_i;
        end if; 
    end process;


    p_ZL7output_1_1_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_1) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_1))) then 
            p_ZL7output_1_1_o_ap_vld <= ap_const_logic_1;
        else 
            p_ZL7output_1_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL7output_2_0_o_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, p_ZL7output_2_0_i, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3, trunc_ln717_7_fu_1140_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_0) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_2))) then 
            p_ZL7output_2_0_o <= trunc_ln717_7_fu_1140_p1(23 downto 8);
        else 
            p_ZL7output_2_0_o <= p_ZL7output_2_0_i;
        end if; 
    end process;


    p_ZL7output_2_0_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_0) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_2))) then 
            p_ZL7output_2_0_o_ap_vld <= ap_const_logic_1;
        else 
            p_ZL7output_2_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL7output_2_1_o_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, p_ZL7output_2_1_i, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3, trunc_ln717_7_fu_1140_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_1) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_2))) then 
            p_ZL7output_2_1_o <= trunc_ln717_7_fu_1140_p1(23 downto 8);
        else 
            p_ZL7output_2_1_o <= p_ZL7output_2_1_i;
        end if; 
    end process;


    p_ZL7output_2_1_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_1) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_2))) then 
            p_ZL7output_2_1_o_ap_vld <= ap_const_logic_1;
        else 
            p_ZL7output_2_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL7output_3_0_o_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, p_ZL7output_3_0_i, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3, trunc_ln717_7_fu_1140_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_0) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_3))) then 
            p_ZL7output_3_0_o <= trunc_ln717_7_fu_1140_p1(23 downto 8);
        else 
            p_ZL7output_3_0_o <= p_ZL7output_3_0_i;
        end if; 
    end process;


    p_ZL7output_3_0_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_0) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_3))) then 
            p_ZL7output_3_0_o_ap_vld <= ap_const_logic_1;
        else 
            p_ZL7output_3_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL7output_3_1_o_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, p_ZL7output_3_1_i, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3, trunc_ln717_7_fu_1140_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_1) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_3))) then 
            p_ZL7output_3_1_o <= trunc_ln717_7_fu_1140_p1(23 downto 8);
        else 
            p_ZL7output_3_1_o <= p_ZL7output_3_1_i;
        end if; 
    end process;


    p_ZL7output_3_1_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, tmp_6_reg_1335_pp0_iter1_reg, empty_38_reg_1340_pp0_iter1_reg, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (empty_38_reg_1340_pp0_iter1_reg = ap_const_lv1_1) and (tmp_6_reg_1335_pp0_iter1_reg = ap_const_lv2_3))) then 
            p_ZL7output_3_1_o_ap_vld <= ap_const_logic_1;
        else 
            p_ZL7output_3_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL8weights_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln1169_1_fu_590_p1, ap_block_pp0_stage1, zext_ln1169_3_fu_685_p1, ap_block_pp0_stage2, zext_ln1169_5_fu_772_p1, ap_block_pp0_stage3, zext_ln1169_7_fu_940_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                p_ZL8weights_0_address0 <= zext_ln1169_7_fu_940_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                p_ZL8weights_0_address0 <= zext_ln1169_5_fu_772_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                p_ZL8weights_0_address0 <= zext_ln1169_3_fu_685_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_ZL8weights_0_address0 <= zext_ln1169_1_fu_590_p1(4 - 1 downto 0);
            else 
                p_ZL8weights_0_address0 <= "XXXX";
            end if;
        else 
            p_ZL8weights_0_address0 <= "XXXX";
        end if; 
    end process;


    p_ZL8weights_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln1169_fu_576_p1, ap_block_pp0_stage0, zext_ln1169_2_fu_672_p1, ap_block_pp0_stage1, zext_ln1169_4_fu_759_p1, ap_block_pp0_stage2, zext_ln1169_6_fu_927_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                p_ZL8weights_0_address1 <= zext_ln1169_6_fu_927_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                p_ZL8weights_0_address1 <= zext_ln1169_4_fu_759_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                p_ZL8weights_0_address1 <= zext_ln1169_2_fu_672_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_ZL8weights_0_address1 <= zext_ln1169_fu_576_p1(4 - 1 downto 0);
            else 
                p_ZL8weights_0_address1 <= "XXXX";
            end if;
        else 
            p_ZL8weights_0_address1 <= "XXXX";
        end if; 
    end process;


    p_ZL8weights_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_ZL8weights_0_ce0 <= ap_const_logic_1;
        else 
            p_ZL8weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL8weights_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_ZL8weights_0_ce1 <= ap_const_logic_1;
        else 
            p_ZL8weights_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL8weights_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln1169_1_fu_590_p1, ap_block_pp0_stage1, zext_ln1169_3_fu_685_p1, ap_block_pp0_stage2, zext_ln1169_5_fu_772_p1, ap_block_pp0_stage3, zext_ln1169_7_fu_940_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                p_ZL8weights_1_address0 <= zext_ln1169_7_fu_940_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                p_ZL8weights_1_address0 <= zext_ln1169_5_fu_772_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                p_ZL8weights_1_address0 <= zext_ln1169_3_fu_685_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_ZL8weights_1_address0 <= zext_ln1169_1_fu_590_p1(4 - 1 downto 0);
            else 
                p_ZL8weights_1_address0 <= "XXXX";
            end if;
        else 
            p_ZL8weights_1_address0 <= "XXXX";
        end if; 
    end process;


    p_ZL8weights_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln1169_fu_576_p1, ap_block_pp0_stage0, zext_ln1169_2_fu_672_p1, ap_block_pp0_stage1, zext_ln1169_4_fu_759_p1, ap_block_pp0_stage2, zext_ln1169_6_fu_927_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                p_ZL8weights_1_address1 <= zext_ln1169_6_fu_927_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                p_ZL8weights_1_address1 <= zext_ln1169_4_fu_759_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                p_ZL8weights_1_address1 <= zext_ln1169_2_fu_672_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_ZL8weights_1_address1 <= zext_ln1169_fu_576_p1(4 - 1 downto 0);
            else 
                p_ZL8weights_1_address1 <= "XXXX";
            end if;
        else 
            p_ZL8weights_1_address1 <= "XXXX";
        end if; 
    end process;


    p_ZL8weights_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_ZL8weights_1_ce0 <= ap_const_logic_1;
        else 
            p_ZL8weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL8weights_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_ZL8weights_1_ce1 <= ap_const_logic_1;
        else 
            p_ZL8weights_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL8weights_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln1169_1_fu_590_p1, ap_block_pp0_stage1, zext_ln1169_3_fu_685_p1, ap_block_pp0_stage2, zext_ln1169_5_fu_772_p1, ap_block_pp0_stage3, zext_ln1169_7_fu_940_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                p_ZL8weights_2_address0 <= zext_ln1169_7_fu_940_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                p_ZL8weights_2_address0 <= zext_ln1169_5_fu_772_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                p_ZL8weights_2_address0 <= zext_ln1169_3_fu_685_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_ZL8weights_2_address0 <= zext_ln1169_1_fu_590_p1(4 - 1 downto 0);
            else 
                p_ZL8weights_2_address0 <= "XXXX";
            end if;
        else 
            p_ZL8weights_2_address0 <= "XXXX";
        end if; 
    end process;


    p_ZL8weights_2_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln1169_fu_576_p1, ap_block_pp0_stage0, zext_ln1169_2_fu_672_p1, ap_block_pp0_stage1, zext_ln1169_4_fu_759_p1, ap_block_pp0_stage2, zext_ln1169_6_fu_927_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                p_ZL8weights_2_address1 <= zext_ln1169_6_fu_927_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                p_ZL8weights_2_address1 <= zext_ln1169_4_fu_759_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                p_ZL8weights_2_address1 <= zext_ln1169_2_fu_672_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_ZL8weights_2_address1 <= zext_ln1169_fu_576_p1(4 - 1 downto 0);
            else 
                p_ZL8weights_2_address1 <= "XXXX";
            end if;
        else 
            p_ZL8weights_2_address1 <= "XXXX";
        end if; 
    end process;


    p_ZL8weights_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_ZL8weights_2_ce0 <= ap_const_logic_1;
        else 
            p_ZL8weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL8weights_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_ZL8weights_2_ce1 <= ap_const_logic_1;
        else 
            p_ZL8weights_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL8weights_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln1169_1_fu_590_p1, ap_block_pp0_stage1, zext_ln1169_3_fu_685_p1, ap_block_pp0_stage2, zext_ln1169_5_fu_772_p1, ap_block_pp0_stage3, zext_ln1169_7_fu_940_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                p_ZL8weights_3_address0 <= zext_ln1169_7_fu_940_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                p_ZL8weights_3_address0 <= zext_ln1169_5_fu_772_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                p_ZL8weights_3_address0 <= zext_ln1169_3_fu_685_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_ZL8weights_3_address0 <= zext_ln1169_1_fu_590_p1(4 - 1 downto 0);
            else 
                p_ZL8weights_3_address0 <= "XXXX";
            end if;
        else 
            p_ZL8weights_3_address0 <= "XXXX";
        end if; 
    end process;


    p_ZL8weights_3_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln1169_fu_576_p1, ap_block_pp0_stage0, zext_ln1169_2_fu_672_p1, ap_block_pp0_stage1, zext_ln1169_4_fu_759_p1, ap_block_pp0_stage2, zext_ln1169_6_fu_927_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                p_ZL8weights_3_address1 <= zext_ln1169_6_fu_927_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                p_ZL8weights_3_address1 <= zext_ln1169_4_fu_759_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                p_ZL8weights_3_address1 <= zext_ln1169_2_fu_672_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_ZL8weights_3_address1 <= zext_ln1169_fu_576_p1(4 - 1 downto 0);
            else 
                p_ZL8weights_3_address1 <= "XXXX";
            end if;
        else 
            p_ZL8weights_3_address1 <= "XXXX";
        end if; 
    end process;


    p_ZL8weights_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_ZL8weights_3_ce0 <= ap_const_logic_1;
        else 
            p_ZL8weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZL8weights_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_ZL8weights_3_ce1 <= ap_const_logic_1;
        else 
            p_ZL8weights_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1245_1_cast_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_1),24));

        sext_ln1245_2_cast_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_2),24));

        sext_ln1245_3_cast_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_3),24));

        sext_ln1245_4_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_4),24));

        sext_ln1245_5_cast_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_5),24));

        sext_ln1245_6_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_6),24));

        sext_ln1245_7_cast_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_7),24));

        sext_ln1245_cast_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245),24));

    tmp_1_1_fu_653_p5 <= add_ln52_fu_637_p2(16 downto 4);
    tmp_1_2_fu_711_p5 <= add_ln52_1_fu_696_p2(16 downto 4);
    tmp_1_3_fu_740_p5 <= add_ln52_2_fu_725_p2(16 downto 4);
    tmp_1_4_fu_879_p5 <= add_ln52_3_fu_864_p2(16 downto 4);
    tmp_1_5_fu_908_p5 <= add_ln52_4_fu_893_p2(16 downto 4);
    tmp_1_6_fu_983_p5 <= add_ln52_5_fu_968_p2(16 downto 4);
    tmp_1_7_fu_1012_p5 <= add_ln52_6_fu_997_p2(16 downto 4);
    tmp_2_fu_1086_p1 <= grp_fu_1229_p3;
    tmp_2_fu_1086_p4 <= tmp_2_fu_1086_p1(23 downto 8);
    tmp_3_fu_1106_p1 <= grp_fu_1237_p3;
    tmp_3_fu_1106_p4 <= tmp_3_fu_1106_p1(23 downto 8);
    tmp_4_fu_1123_p1 <= grp_fu_1245_p3;
    tmp_4_fu_1123_p4 <= tmp_4_fu_1123_p1(23 downto 8);
    tmp_7_fu_948_p1 <= grp_fu_1197_p3;
    tmp_7_fu_948_p4 <= tmp_7_fu_948_p1(23 downto 8);
    tmp_8_fu_1026_p1 <= grp_fu_1205_p3;
    tmp_8_fu_1026_p4 <= tmp_8_fu_1026_p1(23 downto 8);
    tmp_9_fu_1046_p1 <= grp_fu_1213_p3;
    tmp_9_fu_1046_p4 <= tmp_9_fu_1046_p1(23 downto 8);
    tmp_fu_840_p1 <= 
        ap_sig_allocacmp_p_ZL7output_0_1_load when (empty_38_reg_1340(0) = '1') else 
        ap_sig_allocacmp_p_ZL7output_0_0_load;
    tmp_fu_840_p2 <= 
        ap_sig_allocacmp_p_ZL7output_1_1_load when (empty_38_reg_1340(0) = '1') else 
        ap_sig_allocacmp_p_ZL7output_1_0_load;
    tmp_fu_840_p3 <= 
        ap_sig_allocacmp_p_ZL7output_2_1_load when (empty_38_reg_1340(0) = '1') else 
        ap_sig_allocacmp_p_ZL7output_2_0_load;
    tmp_fu_840_p4 <= 
        ap_sig_allocacmp_p_ZL7output_3_1_load when (empty_38_reg_1340(0) = '1') else 
        ap_sig_allocacmp_p_ZL7output_3_0_load;
    tmp_s_fu_1066_p1 <= grp_fu_1221_p3;
    tmp_s_fu_1066_p4 <= tmp_s_fu_1066_p1(23 downto 8);
    trunc_ln717_7_fu_1140_p1 <= grp_fu_1253_p3;
    zext_ln1169_1_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_fu_584_p2),64));
    zext_ln1169_2_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_1_fu_667_p2),64));
    zext_ln1169_3_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_2_fu_680_p2),64));
    zext_ln1169_4_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_3_fu_754_p2),64));
    zext_ln1169_5_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_4_fu_767_p2),64));
    zext_ln1169_6_fu_927_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_5_fu_922_p2),64));
    zext_ln1169_7_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_6_fu_935_p2),64));
    zext_ln1169_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_37_fu_548_p1),64));
end behav;
