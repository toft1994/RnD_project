-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nnlayer_nnlayer_Pipeline_VITIS_LOOP_80_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_V_load : IN STD_LOGIC_VECTOR (15 downto 0);
    numOfInNeurons : IN STD_LOGIC_VECTOR (15 downto 0);
    conv1450_i_cast : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_0_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_1_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_2_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_3_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_4_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_5_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_6_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_7_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_8_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_9_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_10_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_11_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_12_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_13_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_14_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_15_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_16_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_17_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_18_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_19_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_20_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_21_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_22_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_23_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_24_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_25_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_26_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_27_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_28_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_29_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_30_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_31_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_32_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_33_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_34_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_35_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_36_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_37_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_38_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_39_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_40_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_41_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_42_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_43_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_44_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_45_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_46_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_47_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_48_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_49_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_50_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_51_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_52_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_53_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_54_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_55_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_56_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_57_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_58_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_59_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_60_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_61_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_62_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL8weights_63_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL6input_0_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL6input_1_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL6input_2_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL6input_3_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL6input_4_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL6input_5_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL6input_6_load : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL6input_7_load : IN STD_LOGIC_VECTOR (15 downto 0);
    lhs_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    lhs_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of nnlayer_nnlayer_Pipeline_VITIS_LOOP_80_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln80_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln80_reg_1026 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_1026_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inc3741_i_fu_188 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln80_fu_676_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_inc3741_i_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal lhs_fu_192 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_lhs_load_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln80_fu_682_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal conv1450_i_cast_cast_fu_653_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_fu_692_p65 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_fu_692_p66 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_830_p66 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_984_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1002_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1002_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component nnlayer_mux_6417_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (15 downto 0);
        din46 : IN STD_LOGIC_VECTOR (15 downto 0);
        din47 : IN STD_LOGIC_VECTOR (15 downto 0);
        din48 : IN STD_LOGIC_VECTOR (15 downto 0);
        din49 : IN STD_LOGIC_VECTOR (15 downto 0);
        din50 : IN STD_LOGIC_VECTOR (15 downto 0);
        din51 : IN STD_LOGIC_VECTOR (15 downto 0);
        din52 : IN STD_LOGIC_VECTOR (15 downto 0);
        din53 : IN STD_LOGIC_VECTOR (15 downto 0);
        din54 : IN STD_LOGIC_VECTOR (15 downto 0);
        din55 : IN STD_LOGIC_VECTOR (15 downto 0);
        din56 : IN STD_LOGIC_VECTOR (15 downto 0);
        din57 : IN STD_LOGIC_VECTOR (15 downto 0);
        din58 : IN STD_LOGIC_VECTOR (15 downto 0);
        din59 : IN STD_LOGIC_VECTOR (15 downto 0);
        din60 : IN STD_LOGIC_VECTOR (15 downto 0);
        din61 : IN STD_LOGIC_VECTOR (15 downto 0);
        din62 : IN STD_LOGIC_VECTOR (15 downto 0);
        din63 : IN STD_LOGIC_VECTOR (15 downto 0);
        din64 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_mux_6416_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (15 downto 0);
        din46 : IN STD_LOGIC_VECTOR (15 downto 0);
        din47 : IN STD_LOGIC_VECTOR (15 downto 0);
        din48 : IN STD_LOGIC_VECTOR (15 downto 0);
        din49 : IN STD_LOGIC_VECTOR (15 downto 0);
        din50 : IN STD_LOGIC_VECTOR (15 downto 0);
        din51 : IN STD_LOGIC_VECTOR (15 downto 0);
        din52 : IN STD_LOGIC_VECTOR (15 downto 0);
        din53 : IN STD_LOGIC_VECTOR (15 downto 0);
        din54 : IN STD_LOGIC_VECTOR (15 downto 0);
        din55 : IN STD_LOGIC_VECTOR (15 downto 0);
        din56 : IN STD_LOGIC_VECTOR (15 downto 0);
        din57 : IN STD_LOGIC_VECTOR (15 downto 0);
        din58 : IN STD_LOGIC_VECTOR (15 downto 0);
        din59 : IN STD_LOGIC_VECTOR (15 downto 0);
        din60 : IN STD_LOGIC_VECTOR (15 downto 0);
        din61 : IN STD_LOGIC_VECTOR (15 downto 0);
        din62 : IN STD_LOGIC_VECTOR (15 downto 0);
        din63 : IN STD_LOGIC_VECTOR (15 downto 0);
        din64 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component nnlayer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_6417_16_1_1_U77 : component nnlayer_mux_6417_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 16,
        din46_WIDTH => 16,
        din47_WIDTH => 16,
        din48_WIDTH => 16,
        din49_WIDTH => 16,
        din50_WIDTH => 16,
        din51_WIDTH => 16,
        din52_WIDTH => 16,
        din53_WIDTH => 16,
        din54_WIDTH => 16,
        din55_WIDTH => 16,
        din56_WIDTH => 16,
        din57_WIDTH => 16,
        din58_WIDTH => 16,
        din59_WIDTH => 16,
        din60_WIDTH => 16,
        din61_WIDTH => 16,
        din62_WIDTH => 16,
        din63_WIDTH => 16,
        din64_WIDTH => 17,
        dout_WIDTH => 16)
    port map (
        din0 => p_ZL8weights_0_load,
        din1 => p_ZL8weights_1_load,
        din2 => p_ZL8weights_2_load,
        din3 => p_ZL8weights_3_load,
        din4 => p_ZL8weights_4_load,
        din5 => p_ZL8weights_5_load,
        din6 => p_ZL8weights_6_load,
        din7 => p_ZL8weights_7_load,
        din8 => p_ZL8weights_8_load,
        din9 => p_ZL8weights_9_load,
        din10 => p_ZL8weights_10_load,
        din11 => p_ZL8weights_11_load,
        din12 => p_ZL8weights_12_load,
        din13 => p_ZL8weights_13_load,
        din14 => p_ZL8weights_14_load,
        din15 => p_ZL8weights_15_load,
        din16 => p_ZL8weights_16_load,
        din17 => p_ZL8weights_17_load,
        din18 => p_ZL8weights_18_load,
        din19 => p_ZL8weights_19_load,
        din20 => p_ZL8weights_20_load,
        din21 => p_ZL8weights_21_load,
        din22 => p_ZL8weights_22_load,
        din23 => p_ZL8weights_23_load,
        din24 => p_ZL8weights_24_load,
        din25 => p_ZL8weights_25_load,
        din26 => p_ZL8weights_26_load,
        din27 => p_ZL8weights_27_load,
        din28 => p_ZL8weights_28_load,
        din29 => p_ZL8weights_29_load,
        din30 => p_ZL8weights_30_load,
        din31 => p_ZL8weights_31_load,
        din32 => p_ZL8weights_32_load,
        din33 => p_ZL8weights_33_load,
        din34 => p_ZL8weights_34_load,
        din35 => p_ZL8weights_35_load,
        din36 => p_ZL8weights_36_load,
        din37 => p_ZL8weights_37_load,
        din38 => p_ZL8weights_38_load,
        din39 => p_ZL8weights_39_load,
        din40 => p_ZL8weights_40_load,
        din41 => p_ZL8weights_41_load,
        din42 => p_ZL8weights_42_load,
        din43 => p_ZL8weights_43_load,
        din44 => p_ZL8weights_44_load,
        din45 => p_ZL8weights_45_load,
        din46 => p_ZL8weights_46_load,
        din47 => p_ZL8weights_47_load,
        din48 => p_ZL8weights_48_load,
        din49 => p_ZL8weights_49_load,
        din50 => p_ZL8weights_50_load,
        din51 => p_ZL8weights_51_load,
        din52 => p_ZL8weights_52_load,
        din53 => p_ZL8weights_53_load,
        din54 => p_ZL8weights_54_load,
        din55 => p_ZL8weights_55_load,
        din56 => p_ZL8weights_56_load,
        din57 => p_ZL8weights_57_load,
        din58 => p_ZL8weights_58_load,
        din59 => p_ZL8weights_59_load,
        din60 => p_ZL8weights_60_load,
        din61 => p_ZL8weights_61_load,
        din62 => p_ZL8weights_62_load,
        din63 => p_ZL8weights_63_load,
        din64 => r_V_fu_692_p65,
        dout => r_V_fu_692_p66);

    mux_6416_16_1_1_U78 : component nnlayer_mux_6416_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 16,
        din46_WIDTH => 16,
        din47_WIDTH => 16,
        din48_WIDTH => 16,
        din49_WIDTH => 16,
        din50_WIDTH => 16,
        din51_WIDTH => 16,
        din52_WIDTH => 16,
        din53_WIDTH => 16,
        din54_WIDTH => 16,
        din55_WIDTH => 16,
        din56_WIDTH => 16,
        din57_WIDTH => 16,
        din58_WIDTH => 16,
        din59_WIDTH => 16,
        din60_WIDTH => 16,
        din61_WIDTH => 16,
        din62_WIDTH => 16,
        din63_WIDTH => 16,
        din64_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => p_ZL6input_0_load,
        din1 => p_ZL6input_1_load,
        din2 => p_ZL6input_2_load,
        din3 => p_ZL6input_3_load,
        din4 => p_ZL6input_4_load,
        din5 => p_ZL6input_5_load,
        din6 => p_ZL6input_6_load,
        din7 => p_ZL6input_7_load,
        din8 => ap_const_lv16_0,
        din9 => ap_const_lv16_0,
        din10 => ap_const_lv16_0,
        din11 => ap_const_lv16_0,
        din12 => ap_const_lv16_0,
        din13 => ap_const_lv16_0,
        din14 => ap_const_lv16_0,
        din15 => ap_const_lv16_0,
        din16 => ap_const_lv16_0,
        din17 => ap_const_lv16_0,
        din18 => ap_const_lv16_0,
        din19 => ap_const_lv16_0,
        din20 => ap_const_lv16_0,
        din21 => ap_const_lv16_0,
        din22 => ap_const_lv16_0,
        din23 => ap_const_lv16_0,
        din24 => ap_const_lv16_0,
        din25 => ap_const_lv16_0,
        din26 => ap_const_lv16_0,
        din27 => ap_const_lv16_0,
        din28 => ap_const_lv16_0,
        din29 => ap_const_lv16_0,
        din30 => ap_const_lv16_0,
        din31 => ap_const_lv16_0,
        din32 => ap_const_lv16_0,
        din33 => ap_const_lv16_0,
        din34 => ap_const_lv16_0,
        din35 => ap_const_lv16_0,
        din36 => ap_const_lv16_0,
        din37 => ap_const_lv16_0,
        din38 => ap_const_lv16_0,
        din39 => ap_const_lv16_0,
        din40 => ap_const_lv16_0,
        din41 => ap_const_lv16_0,
        din42 => ap_const_lv16_0,
        din43 => ap_const_lv16_0,
        din44 => ap_const_lv16_0,
        din45 => ap_const_lv16_0,
        din46 => ap_const_lv16_0,
        din47 => ap_const_lv16_0,
        din48 => ap_const_lv16_0,
        din49 => ap_const_lv16_0,
        din50 => ap_const_lv16_0,
        din51 => ap_const_lv16_0,
        din52 => ap_const_lv16_0,
        din53 => ap_const_lv16_0,
        din54 => ap_const_lv16_0,
        din55 => ap_const_lv16_0,
        din56 => ap_const_lv16_0,
        din57 => ap_const_lv16_0,
        din58 => ap_const_lv16_0,
        din59 => ap_const_lv16_0,
        din60 => ap_const_lv16_0,
        din61 => ap_const_lv16_0,
        din62 => ap_const_lv16_0,
        din63 => ap_const_lv16_0,
        din64 => ap_sig_allocacmp_inc3741_i_load,
        dout => tmp_1_fu_830_p66);

    mac_muladd_16s_16s_24ns_24_4_1_U79 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_fu_830_p66,
        din1 => r_V_fu_692_p66,
        din2 => grp_fu_1002_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1002_p3);

    flow_control_loop_pipe_sequential_init_U : component nnlayer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    inc3741_i_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln80_fu_670_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    inc3741_i_fu_188 <= add_ln80_fu_676_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    inc3741_i_fu_188 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    lhs_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    lhs_fu_192 <= output_V_load;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    lhs_fu_192 <= trunc_ln_fu_984_p1(23 downto 8);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln80_reg_1026 <= icmp_ln80_fu_670_p2;
                icmp_ln80_reg_1026_pp0_iter1_reg <= icmp_ln80_reg_1026;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln80_fu_676_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_inc3741_i_load) + unsigned(ap_const_lv16_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln80_fu_670_p2)
    begin
        if (((icmp_ln80_fu_670_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_inc3741_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, inc3741_i_fu_188, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_inc3741_i_load <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_inc3741_i_load <= inc3741_i_fu_188;
        end if; 
    end process;


    ap_sig_allocacmp_lhs_load_1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, lhs_fu_192, trunc_ln_fu_984_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_sig_allocacmp_lhs_load_1 <= trunc_ln_fu_984_p1(23 downto 8);
        else 
            ap_sig_allocacmp_lhs_load_1 <= lhs_fu_192;
        end if; 
    end process;

    conv1450_i_cast_cast_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv1450_i_cast),17));
    grp_fu_1002_p2 <= (ap_sig_allocacmp_lhs_load_1 & ap_const_lv8_0);
    icmp_ln80_fu_670_p2 <= "1" when (ap_sig_allocacmp_inc3741_i_load = numOfInNeurons) else "0";
    lhs_out <= lhs_fu_192;

    lhs_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln80_reg_1026_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln80_reg_1026_pp0_iter1_reg = ap_const_lv1_1))) then 
            lhs_out_ap_vld <= ap_const_logic_1;
        else 
            lhs_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_V_fu_692_p65 <= std_logic_vector(unsigned(zext_ln80_fu_682_p1) + unsigned(conv1450_i_cast_cast_fu_653_p1));
    trunc_ln_fu_984_p1 <= grp_fu_1002_p3;
    zext_ln80_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_inc3741_i_load),17));
end behav;
