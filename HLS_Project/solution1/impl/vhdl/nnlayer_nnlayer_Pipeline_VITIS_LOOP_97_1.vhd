-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nnlayer_nnlayer_Pipeline_VITIS_LOOP_97_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights_0_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_1_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_2_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_3_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_4_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_5_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_6_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_7_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_8_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_9_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_10_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_11_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_12_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_13_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_14_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_15_load : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_0_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_1_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_2_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_3_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_4_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_5_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_6_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_7_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_8_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_9_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_10_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_11_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_12_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_13_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_14_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_15_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_0_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_1_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_2_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_3_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_4_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_5_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_6_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_7_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_8_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_9_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_10_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_11_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_12_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_13_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_14_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_15_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_0_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_1_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_2_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_3_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_4_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_5_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_6_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_7_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_8_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_9_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_10_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_11_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_12_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_13_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_14_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_15_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_0_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_1_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_2_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_3_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_4_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_5_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_6_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_7_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_8_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_9_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_10_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_11_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_12_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_13_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_14_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_15_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_0_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_1_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_2_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_3_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_4_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_5_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_6_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_7_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_8_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_9_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_10_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_11_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_12_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_13_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_14_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_15_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_0_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_1_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_2_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_3_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_4_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_5_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_6_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_7_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_8_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_9_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_10_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_11_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_12_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_13_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_14_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_15_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_0_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_1_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_2_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_3_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_4_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_5_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_6_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_7_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_8_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_9_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_10_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_11_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_12_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_13_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_14_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_15_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_0_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_1_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_2_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_3_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_4_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_5_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_6_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_7_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_8_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_9_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_10_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_11_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_12_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_13_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_14_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_15_load_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_0_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_1_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_2_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_3_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_4_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_5_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_6_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_7_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_8_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_9_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_10_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_11_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_12_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_13_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_14_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_15_load_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_0_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_1_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_2_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_3_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_4_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_5_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_6_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_7_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_8_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_9_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_10_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_11_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_12_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_13_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_14_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_15_load_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_0_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_1_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_2_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_3_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_4_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_5_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_6_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_7_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_8_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_9_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_10_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_11_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_12_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_13_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_14_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_15_load_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_0_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_1_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_2_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_3_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_4_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_5_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_6_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_7_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_8_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_9_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_10_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_11_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_12_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_13_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_14_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_15_load_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_0_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_1_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_2_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_3_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_4_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_5_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_6_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_7_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_8_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_9_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_10_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_11_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_12_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_13_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_14_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_15_load_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_0_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_1_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_2_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_3_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_4_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_5_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_6_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_7_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_8_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_9_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_10_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_11_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_12_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_13_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_14_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_15_load_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_0_load_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_1_load_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_2_load_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_3_load_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_4_load_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_5_load_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_6_load_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_7_load_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_8_load_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_9_load_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_10_load_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_11_load_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_12_load_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_13_load_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_14_load_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_15_load_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_V_ce1 : OUT STD_LOGIC;
    output_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of nnlayer_nnlayer_Pipeline_VITIS_LOOP_97_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln97_fu_2310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln1245_15_cast_fu_2238_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_15_cast_reg_4361 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_14_cast_fu_2242_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_14_cast_reg_4366 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_13_cast_fu_2246_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_13_cast_reg_4371 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_12_cast_fu_2250_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_12_cast_reg_4376 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_11_cast_fu_2254_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_11_cast_reg_4381 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_10_cast_fu_2258_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_10_cast_reg_4386 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_9_cast_fu_2262_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_9_cast_reg_4391 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_8_cast_fu_2266_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_8_cast_reg_4396 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_7_cast_fu_2270_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_7_cast_reg_4401 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_6_cast_fu_2274_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_6_cast_reg_4406 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_5_cast_fu_2278_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_5_cast_reg_4411 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_4_cast_fu_2282_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_4_cast_reg_4416 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_3_cast_fu_2286_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_3_cast_reg_4421 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_2_cast_fu_2290_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_2_cast_reg_4426 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_1_cast_fu_2294_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_1_cast_reg_4431 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_62_fu_2327_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_62_reg_4445 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_62_reg_4445_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_62_reg_4445_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_62_reg_4445_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_62_reg_4445_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_62_reg_4445_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_62_reg_4445_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_62_reg_4445_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_62_reg_4445_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_62_reg_4445_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_62_reg_4445_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_62_reg_4445_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_62_reg_4445_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_62_reg_4445_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_4464 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_4464_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_4464_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_4464_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_4464_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_4464_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_4464_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_4464_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_4464_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_4464_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_4464_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_4464_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_4464_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_4464_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_4464_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_4464_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_4464_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_4464_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_fu_2940_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_reg_4610 : STD_LOGIC_VECTOR (15 downto 0);
    signal outNeurons_cast2_fu_2322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal outNeurons_fu_586 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln97_fu_2316_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_outNeurons_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_2331_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_2331_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_2378_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_2411_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_2436_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3025_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_15_fu_2436_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_2453_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_2478_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3034_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_16_fu_2478_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_2495_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_2520_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3042_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_17_fu_2520_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_2537_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_2562_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3050_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_fu_2562_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_2579_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_2604_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3058_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_19_fu_2604_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_2621_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_2646_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3066_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_20_fu_2646_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_2663_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_2688_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3074_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_21_fu_2688_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_2705_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_2730_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3082_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_22_fu_2730_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_2747_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_fu_2772_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3090_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_23_fu_2772_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_2789_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_2814_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3098_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_24_fu_2814_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_2831_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_fu_2856_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3106_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_25_fu_2856_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_2873_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_fu_2898_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3114_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_26_fu_2898_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_2915_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_2961_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3122_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_27_fu_2961_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_2981_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3130_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_28_fu_2981_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_2998_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3138_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_29_fu_2998_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln717_s_fu_3015_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3146_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3025_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3034_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_3034_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3042_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_3042_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3050_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_3050_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3058_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_3058_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3066_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_3066_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3074_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_3074_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3082_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_3082_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3090_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_3090_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3098_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_3098_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3106_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_3106_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3114_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_3114_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3122_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_3122_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3130_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_3130_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3138_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_3138_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_3146_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_3146_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component nnlayer_mux_164_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component nnlayer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_164_16_1_1_U4 : component nnlayer_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => weights_0_load,
        din1 => weights_1_load,
        din2 => weights_2_load,
        din3 => weights_3_load,
        din4 => weights_4_load,
        din5 => weights_5_load,
        din6 => weights_6_load,
        din7 => weights_7_load,
        din8 => weights_8_load,
        din9 => weights_9_load,
        din10 => weights_10_load,
        din11 => weights_11_load,
        din12 => weights_12_load,
        din13 => weights_13_load,
        din14 => weights_14_load,
        din15 => weights_15_load,
        din16 => tmp_fu_2331_p17,
        dout => tmp_fu_2331_p18);

    mux_164_16_1_1_U5 : component nnlayer_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => weights_0_load_1,
        din1 => weights_1_load_1,
        din2 => weights_2_load_1,
        din3 => weights_3_load_1,
        din4 => weights_4_load_1,
        din5 => weights_5_load_1,
        din6 => weights_6_load_1,
        din7 => weights_7_load_1,
        din8 => weights_8_load_1,
        din9 => weights_9_load_1,
        din10 => weights_10_load_1,
        din11 => weights_11_load_1,
        din12 => weights_12_load_1,
        din13 => weights_13_load_1,
        din14 => weights_14_load_1,
        din15 => weights_15_load_1,
        din16 => empty_62_reg_4445,
        dout => tmp_s_fu_2378_p18);

    mux_164_16_1_1_U6 : component nnlayer_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => weights_0_load_2,
        din1 => weights_1_load_2,
        din2 => weights_2_load_2,
        din3 => weights_3_load_2,
        din4 => weights_4_load_2,
        din5 => weights_5_load_2,
        din6 => weights_6_load_2,
        din7 => weights_7_load_2,
        din8 => weights_8_load_2,
        din9 => weights_9_load_2,
        din10 => weights_10_load_2,
        din11 => weights_11_load_2,
        din12 => weights_12_load_2,
        din13 => weights_13_load_2,
        din14 => weights_14_load_2,
        din15 => weights_15_load_2,
        din16 => empty_62_reg_4445_pp0_iter1_reg,
        dout => tmp_2_fu_2411_p18);

    mux_164_16_1_1_U7 : component nnlayer_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => weights_0_load_3,
        din1 => weights_1_load_3,
        din2 => weights_2_load_3,
        din3 => weights_3_load_3,
        din4 => weights_4_load_3,
        din5 => weights_5_load_3,
        din6 => weights_6_load_3,
        din7 => weights_7_load_3,
        din8 => weights_8_load_3,
        din9 => weights_9_load_3,
        din10 => weights_10_load_3,
        din11 => weights_11_load_3,
        din12 => weights_12_load_3,
        din13 => weights_13_load_3,
        din14 => weights_14_load_3,
        din15 => weights_15_load_3,
        din16 => empty_62_reg_4445_pp0_iter2_reg,
        dout => tmp_3_fu_2453_p18);

    mux_164_16_1_1_U8 : component nnlayer_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => weights_0_load_4,
        din1 => weights_1_load_4,
        din2 => weights_2_load_4,
        din3 => weights_3_load_4,
        din4 => weights_4_load_4,
        din5 => weights_5_load_4,
        din6 => weights_6_load_4,
        din7 => weights_7_load_4,
        din8 => weights_8_load_4,
        din9 => weights_9_load_4,
        din10 => weights_10_load_4,
        din11 => weights_11_load_4,
        din12 => weights_12_load_4,
        din13 => weights_13_load_4,
        din14 => weights_14_load_4,
        din15 => weights_15_load_4,
        din16 => empty_62_reg_4445_pp0_iter3_reg,
        dout => tmp_4_fu_2495_p18);

    mux_164_16_1_1_U9 : component nnlayer_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => weights_0_load_5,
        din1 => weights_1_load_5,
        din2 => weights_2_load_5,
        din3 => weights_3_load_5,
        din4 => weights_4_load_5,
        din5 => weights_5_load_5,
        din6 => weights_6_load_5,
        din7 => weights_7_load_5,
        din8 => weights_8_load_5,
        din9 => weights_9_load_5,
        din10 => weights_10_load_5,
        din11 => weights_11_load_5,
        din12 => weights_12_load_5,
        din13 => weights_13_load_5,
        din14 => weights_14_load_5,
        din15 => weights_15_load_5,
        din16 => empty_62_reg_4445_pp0_iter4_reg,
        dout => tmp_5_fu_2537_p18);

    mux_164_16_1_1_U10 : component nnlayer_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => weights_0_load_6,
        din1 => weights_1_load_6,
        din2 => weights_2_load_6,
        din3 => weights_3_load_6,
        din4 => weights_4_load_6,
        din5 => weights_5_load_6,
        din6 => weights_6_load_6,
        din7 => weights_7_load_6,
        din8 => weights_8_load_6,
        din9 => weights_9_load_6,
        din10 => weights_10_load_6,
        din11 => weights_11_load_6,
        din12 => weights_12_load_6,
        din13 => weights_13_load_6,
        din14 => weights_14_load_6,
        din15 => weights_15_load_6,
        din16 => empty_62_reg_4445_pp0_iter5_reg,
        dout => tmp_6_fu_2579_p18);

    mux_164_16_1_1_U11 : component nnlayer_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => weights_0_load_7,
        din1 => weights_1_load_7,
        din2 => weights_2_load_7,
        din3 => weights_3_load_7,
        din4 => weights_4_load_7,
        din5 => weights_5_load_7,
        din6 => weights_6_load_7,
        din7 => weights_7_load_7,
        din8 => weights_8_load_7,
        din9 => weights_9_load_7,
        din10 => weights_10_load_7,
        din11 => weights_11_load_7,
        din12 => weights_12_load_7,
        din13 => weights_13_load_7,
        din14 => weights_14_load_7,
        din15 => weights_15_load_7,
        din16 => empty_62_reg_4445_pp0_iter6_reg,
        dout => tmp_7_fu_2621_p18);

    mux_164_16_1_1_U12 : component nnlayer_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => weights_0_load_8,
        din1 => weights_1_load_8,
        din2 => weights_2_load_8,
        din3 => weights_3_load_8,
        din4 => weights_4_load_8,
        din5 => weights_5_load_8,
        din6 => weights_6_load_8,
        din7 => weights_7_load_8,
        din8 => weights_8_load_8,
        din9 => weights_9_load_8,
        din10 => weights_10_load_8,
        din11 => weights_11_load_8,
        din12 => weights_12_load_8,
        din13 => weights_13_load_8,
        din14 => weights_14_load_8,
        din15 => weights_15_load_8,
        din16 => empty_62_reg_4445_pp0_iter7_reg,
        dout => tmp_8_fu_2663_p18);

    mux_164_16_1_1_U13 : component nnlayer_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => weights_0_load_9,
        din1 => weights_1_load_9,
        din2 => weights_2_load_9,
        din3 => weights_3_load_9,
        din4 => weights_4_load_9,
        din5 => weights_5_load_9,
        din6 => weights_6_load_9,
        din7 => weights_7_load_9,
        din8 => weights_8_load_9,
        din9 => weights_9_load_9,
        din10 => weights_10_load_9,
        din11 => weights_11_load_9,
        din12 => weights_12_load_9,
        din13 => weights_13_load_9,
        din14 => weights_14_load_9,
        din15 => weights_15_load_9,
        din16 => empty_62_reg_4445_pp0_iter8_reg,
        dout => tmp_9_fu_2705_p18);

    mux_164_16_1_1_U14 : component nnlayer_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => weights_0_load_10,
        din1 => weights_1_load_10,
        din2 => weights_2_load_10,
        din3 => weights_3_load_10,
        din4 => weights_4_load_10,
        din5 => weights_5_load_10,
        din6 => weights_6_load_10,
        din7 => weights_7_load_10,
        din8 => weights_8_load_10,
        din9 => weights_9_load_10,
        din10 => weights_10_load_10,
        din11 => weights_11_load_10,
        din12 => weights_12_load_10,
        din13 => weights_13_load_10,
        din14 => weights_14_load_10,
        din15 => weights_15_load_10,
        din16 => empty_62_reg_4445_pp0_iter9_reg,
        dout => tmp_1_fu_2747_p18);

    mux_164_16_1_1_U15 : component nnlayer_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => weights_0_load_11,
        din1 => weights_1_load_11,
        din2 => weights_2_load_11,
        din3 => weights_3_load_11,
        din4 => weights_4_load_11,
        din5 => weights_5_load_11,
        din6 => weights_6_load_11,
        din7 => weights_7_load_11,
        din8 => weights_8_load_11,
        din9 => weights_9_load_11,
        din10 => weights_10_load_11,
        din11 => weights_11_load_11,
        din12 => weights_12_load_11,
        din13 => weights_13_load_11,
        din14 => weights_14_load_11,
        din15 => weights_15_load_11,
        din16 => empty_62_reg_4445_pp0_iter10_reg,
        dout => tmp_10_fu_2789_p18);

    mux_164_16_1_1_U16 : component nnlayer_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => weights_0_load_12,
        din1 => weights_1_load_12,
        din2 => weights_2_load_12,
        din3 => weights_3_load_12,
        din4 => weights_4_load_12,
        din5 => weights_5_load_12,
        din6 => weights_6_load_12,
        din7 => weights_7_load_12,
        din8 => weights_8_load_12,
        din9 => weights_9_load_12,
        din10 => weights_10_load_12,
        din11 => weights_11_load_12,
        din12 => weights_12_load_12,
        din13 => weights_13_load_12,
        din14 => weights_14_load_12,
        din15 => weights_15_load_12,
        din16 => empty_62_reg_4445_pp0_iter11_reg,
        dout => tmp_11_fu_2831_p18);

    mux_164_16_1_1_U17 : component nnlayer_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => weights_0_load_13,
        din1 => weights_1_load_13,
        din2 => weights_2_load_13,
        din3 => weights_3_load_13,
        din4 => weights_4_load_13,
        din5 => weights_5_load_13,
        din6 => weights_6_load_13,
        din7 => weights_7_load_13,
        din8 => weights_8_load_13,
        din9 => weights_9_load_13,
        din10 => weights_10_load_13,
        din11 => weights_11_load_13,
        din12 => weights_12_load_13,
        din13 => weights_13_load_13,
        din14 => weights_14_load_13,
        din15 => weights_15_load_13,
        din16 => empty_62_reg_4445_pp0_iter12_reg,
        dout => tmp_12_fu_2873_p18);

    mux_164_16_1_1_U18 : component nnlayer_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => weights_0_load_14,
        din1 => weights_1_load_14,
        din2 => weights_2_load_14,
        din3 => weights_3_load_14,
        din4 => weights_4_load_14,
        din5 => weights_5_load_14,
        din6 => weights_6_load_14,
        din7 => weights_7_load_14,
        din8 => weights_8_load_14,
        din9 => weights_9_load_14,
        din10 => weights_10_load_14,
        din11 => weights_11_load_14,
        din12 => weights_12_load_14,
        din13 => weights_13_load_14,
        din14 => weights_14_load_14,
        din15 => weights_15_load_14,
        din16 => empty_62_reg_4445_pp0_iter13_reg,
        dout => tmp_13_fu_2915_p18);

    mux_164_16_1_1_U19 : component nnlayer_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => weights_0_load_15,
        din1 => weights_1_load_15,
        din2 => weights_2_load_15,
        din3 => weights_3_load_15,
        din4 => weights_4_load_15,
        din5 => weights_5_load_15,
        din6 => weights_6_load_15,
        din7 => weights_7_load_15,
        din8 => weights_8_load_15,
        din9 => weights_9_load_15,
        din10 => weights_10_load_15,
        din11 => weights_11_load_15,
        din12 => weights_12_load_15,
        din13 => weights_13_load_15,
        din14 => weights_14_load_15,
        din15 => weights_15_load_15,
        din16 => empty_62_reg_4445_pp0_iter13_reg,
        dout => tmp_14_fu_2940_p18);

    mac_muladd_16s_16s_24ns_24_4_1_U20 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sext_ln1245,
        din1 => tmp_fu_2331_p18,
        din2 => grp_fu_3025_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_3025_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U21 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3034_p0,
        din1 => tmp_s_fu_2378_p18,
        din2 => grp_fu_3034_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_3034_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U22 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3042_p0,
        din1 => tmp_2_fu_2411_p18,
        din2 => grp_fu_3042_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_3042_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U23 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3050_p0,
        din1 => tmp_3_fu_2453_p18,
        din2 => grp_fu_3050_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_3050_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U24 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3058_p0,
        din1 => tmp_4_fu_2495_p18,
        din2 => grp_fu_3058_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_3058_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U25 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3066_p0,
        din1 => tmp_5_fu_2537_p18,
        din2 => grp_fu_3066_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_3066_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U26 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3074_p0,
        din1 => tmp_6_fu_2579_p18,
        din2 => grp_fu_3074_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_3074_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U27 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3082_p0,
        din1 => tmp_7_fu_2621_p18,
        din2 => grp_fu_3082_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_3082_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U28 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3090_p0,
        din1 => tmp_8_fu_2663_p18,
        din2 => grp_fu_3090_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_3090_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U29 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3098_p0,
        din1 => tmp_9_fu_2705_p18,
        din2 => grp_fu_3098_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_3098_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U30 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3106_p0,
        din1 => tmp_1_fu_2747_p18,
        din2 => grp_fu_3106_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_3106_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U31 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3114_p0,
        din1 => tmp_10_fu_2789_p18,
        din2 => grp_fu_3114_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_3114_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U32 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3122_p0,
        din1 => tmp_11_fu_2831_p18,
        din2 => grp_fu_3122_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_3122_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U33 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3130_p0,
        din1 => tmp_12_fu_2873_p18,
        din2 => grp_fu_3130_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_3130_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U34 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3138_p0,
        din1 => tmp_13_fu_2915_p18,
        din2 => grp_fu_3138_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_3138_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U35 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3146_p0,
        din1 => tmp_14_reg_4610,
        din2 => grp_fu_3146_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_3146_p3);

    flow_control_loop_pipe_sequential_init_U : component nnlayer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    outNeurons_fu_586_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln97_fu_2310_p2 = ap_const_lv1_0))) then 
                    outNeurons_fu_586 <= add_ln97_fu_2316_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    outNeurons_fu_586 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                empty_62_reg_4445_pp0_iter10_reg <= empty_62_reg_4445_pp0_iter9_reg;
                empty_62_reg_4445_pp0_iter11_reg <= empty_62_reg_4445_pp0_iter10_reg;
                empty_62_reg_4445_pp0_iter12_reg <= empty_62_reg_4445_pp0_iter11_reg;
                empty_62_reg_4445_pp0_iter13_reg <= empty_62_reg_4445_pp0_iter12_reg;
                empty_62_reg_4445_pp0_iter2_reg <= empty_62_reg_4445_pp0_iter1_reg;
                empty_62_reg_4445_pp0_iter3_reg <= empty_62_reg_4445_pp0_iter2_reg;
                empty_62_reg_4445_pp0_iter4_reg <= empty_62_reg_4445_pp0_iter3_reg;
                empty_62_reg_4445_pp0_iter5_reg <= empty_62_reg_4445_pp0_iter4_reg;
                empty_62_reg_4445_pp0_iter6_reg <= empty_62_reg_4445_pp0_iter5_reg;
                empty_62_reg_4445_pp0_iter7_reg <= empty_62_reg_4445_pp0_iter6_reg;
                empty_62_reg_4445_pp0_iter8_reg <= empty_62_reg_4445_pp0_iter7_reg;
                empty_62_reg_4445_pp0_iter9_reg <= empty_62_reg_4445_pp0_iter8_reg;
                output_V_addr_reg_4464_pp0_iter10_reg <= output_V_addr_reg_4464_pp0_iter9_reg;
                output_V_addr_reg_4464_pp0_iter11_reg <= output_V_addr_reg_4464_pp0_iter10_reg;
                output_V_addr_reg_4464_pp0_iter12_reg <= output_V_addr_reg_4464_pp0_iter11_reg;
                output_V_addr_reg_4464_pp0_iter13_reg <= output_V_addr_reg_4464_pp0_iter12_reg;
                output_V_addr_reg_4464_pp0_iter14_reg <= output_V_addr_reg_4464_pp0_iter13_reg;
                output_V_addr_reg_4464_pp0_iter15_reg <= output_V_addr_reg_4464_pp0_iter14_reg;
                output_V_addr_reg_4464_pp0_iter16_reg <= output_V_addr_reg_4464_pp0_iter15_reg;
                output_V_addr_reg_4464_pp0_iter17_reg <= output_V_addr_reg_4464_pp0_iter16_reg;
                output_V_addr_reg_4464_pp0_iter2_reg <= output_V_addr_reg_4464_pp0_iter1_reg;
                output_V_addr_reg_4464_pp0_iter3_reg <= output_V_addr_reg_4464_pp0_iter2_reg;
                output_V_addr_reg_4464_pp0_iter4_reg <= output_V_addr_reg_4464_pp0_iter3_reg;
                output_V_addr_reg_4464_pp0_iter5_reg <= output_V_addr_reg_4464_pp0_iter4_reg;
                output_V_addr_reg_4464_pp0_iter6_reg <= output_V_addr_reg_4464_pp0_iter5_reg;
                output_V_addr_reg_4464_pp0_iter7_reg <= output_V_addr_reg_4464_pp0_iter6_reg;
                output_V_addr_reg_4464_pp0_iter8_reg <= output_V_addr_reg_4464_pp0_iter7_reg;
                output_V_addr_reg_4464_pp0_iter9_reg <= output_V_addr_reg_4464_pp0_iter8_reg;
                tmp_14_reg_4610 <= tmp_14_fu_2940_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_62_reg_4445_pp0_iter1_reg <= empty_62_reg_4445;
                output_V_addr_reg_4464_pp0_iter1_reg <= output_V_addr_reg_4464;
                sext_ln1245_10_cast_reg_4386 <= sext_ln1245_10_cast_fu_2258_p1;
                sext_ln1245_11_cast_reg_4381 <= sext_ln1245_11_cast_fu_2254_p1;
                sext_ln1245_12_cast_reg_4376 <= sext_ln1245_12_cast_fu_2250_p1;
                sext_ln1245_13_cast_reg_4371 <= sext_ln1245_13_cast_fu_2246_p1;
                sext_ln1245_14_cast_reg_4366 <= sext_ln1245_14_cast_fu_2242_p1;
                sext_ln1245_15_cast_reg_4361 <= sext_ln1245_15_cast_fu_2238_p1;
                sext_ln1245_1_cast_reg_4431 <= sext_ln1245_1_cast_fu_2294_p1;
                sext_ln1245_2_cast_reg_4426 <= sext_ln1245_2_cast_fu_2290_p1;
                sext_ln1245_3_cast_reg_4421 <= sext_ln1245_3_cast_fu_2286_p1;
                sext_ln1245_4_cast_reg_4416 <= sext_ln1245_4_cast_fu_2282_p1;
                sext_ln1245_5_cast_reg_4411 <= sext_ln1245_5_cast_fu_2278_p1;
                sext_ln1245_6_cast_reg_4406 <= sext_ln1245_6_cast_fu_2274_p1;
                sext_ln1245_7_cast_reg_4401 <= sext_ln1245_7_cast_fu_2270_p1;
                sext_ln1245_8_cast_reg_4396 <= sext_ln1245_8_cast_fu_2266_p1;
                sext_ln1245_9_cast_reg_4391 <= sext_ln1245_9_cast_fu_2262_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln97_fu_2310_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_62_reg_4445 <= empty_62_fu_2327_p1;
                output_V_addr_reg_4464 <= outNeurons_cast2_fu_2322_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln97_fu_2316_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_outNeurons_1) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln97_fu_2310_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln97_fu_2310_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter17_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_outNeurons_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, outNeurons_fu_586, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_outNeurons_1 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_outNeurons_1 <= outNeurons_fu_586;
        end if; 
    end process;

    empty_62_fu_2327_p1 <= ap_sig_allocacmp_outNeurons_1(4 - 1 downto 0);
    grp_fu_3025_p2 <= (output_V_q1 & ap_const_lv8_0);
    grp_fu_3034_p0 <= sext_ln1245_1_cast_reg_4431(16 - 1 downto 0);
    grp_fu_3034_p2 <= (tmp_15_fu_2436_p4 & ap_const_lv8_0);
    grp_fu_3042_p0 <= sext_ln1245_2_cast_reg_4426(16 - 1 downto 0);
    grp_fu_3042_p2 <= (tmp_16_fu_2478_p4 & ap_const_lv8_0);
    grp_fu_3050_p0 <= sext_ln1245_3_cast_reg_4421(16 - 1 downto 0);
    grp_fu_3050_p2 <= (tmp_17_fu_2520_p4 & ap_const_lv8_0);
    grp_fu_3058_p0 <= sext_ln1245_4_cast_reg_4416(16 - 1 downto 0);
    grp_fu_3058_p2 <= (tmp_18_fu_2562_p4 & ap_const_lv8_0);
    grp_fu_3066_p0 <= sext_ln1245_5_cast_reg_4411(16 - 1 downto 0);
    grp_fu_3066_p2 <= (tmp_19_fu_2604_p4 & ap_const_lv8_0);
    grp_fu_3074_p0 <= sext_ln1245_6_cast_reg_4406(16 - 1 downto 0);
    grp_fu_3074_p2 <= (tmp_20_fu_2646_p4 & ap_const_lv8_0);
    grp_fu_3082_p0 <= sext_ln1245_7_cast_reg_4401(16 - 1 downto 0);
    grp_fu_3082_p2 <= (tmp_21_fu_2688_p4 & ap_const_lv8_0);
    grp_fu_3090_p0 <= sext_ln1245_8_cast_reg_4396(16 - 1 downto 0);
    grp_fu_3090_p2 <= (tmp_22_fu_2730_p4 & ap_const_lv8_0);
    grp_fu_3098_p0 <= sext_ln1245_9_cast_reg_4391(16 - 1 downto 0);
    grp_fu_3098_p2 <= (tmp_23_fu_2772_p4 & ap_const_lv8_0);
    grp_fu_3106_p0 <= sext_ln1245_10_cast_reg_4386(16 - 1 downto 0);
    grp_fu_3106_p2 <= (tmp_24_fu_2814_p4 & ap_const_lv8_0);
    grp_fu_3114_p0 <= sext_ln1245_11_cast_reg_4381(16 - 1 downto 0);
    grp_fu_3114_p2 <= (tmp_25_fu_2856_p4 & ap_const_lv8_0);
    grp_fu_3122_p0 <= sext_ln1245_12_cast_reg_4376(16 - 1 downto 0);
    grp_fu_3122_p2 <= (tmp_26_fu_2898_p4 & ap_const_lv8_0);
    grp_fu_3130_p0 <= sext_ln1245_13_cast_reg_4371(16 - 1 downto 0);
    grp_fu_3130_p2 <= (tmp_27_fu_2961_p4 & ap_const_lv8_0);
    grp_fu_3138_p0 <= sext_ln1245_14_cast_reg_4366(16 - 1 downto 0);
    grp_fu_3138_p2 <= (tmp_28_fu_2981_p4 & ap_const_lv8_0);
    grp_fu_3146_p0 <= sext_ln1245_15_cast_reg_4361(16 - 1 downto 0);
    grp_fu_3146_p2 <= (tmp_29_fu_2998_p4 & ap_const_lv8_0);
    icmp_ln97_fu_2310_p2 <= "1" when (ap_sig_allocacmp_outNeurons_1 = ap_const_lv5_10) else "0";
    outNeurons_cast2_fu_2322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_outNeurons_1),64));
    output_V_address0 <= output_V_addr_reg_4464_pp0_iter17_reg;
    output_V_address1 <= output_V_addr_reg_4464;

    output_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_V_ce1 <= ap_const_logic_1;
        else 
            output_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= trunc_ln717_s_fu_3015_p1(23 downto 8);

    output_V_we0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1245_10_cast_fu_2258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_10),24));

        sext_ln1245_11_cast_fu_2254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_11),24));

        sext_ln1245_12_cast_fu_2250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_12),24));

        sext_ln1245_13_cast_fu_2246_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_13),24));

        sext_ln1245_14_cast_fu_2242_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_14),24));

        sext_ln1245_15_cast_fu_2238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_15),24));

        sext_ln1245_1_cast_fu_2294_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_1),24));

        sext_ln1245_2_cast_fu_2290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_2),24));

        sext_ln1245_3_cast_fu_2286_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_3),24));

        sext_ln1245_4_cast_fu_2282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_4),24));

        sext_ln1245_5_cast_fu_2278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_5),24));

        sext_ln1245_6_cast_fu_2274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_6),24));

        sext_ln1245_7_cast_fu_2270_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_7),24));

        sext_ln1245_8_cast_fu_2266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_8),24));

        sext_ln1245_9_cast_fu_2262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_9),24));

    tmp_15_fu_2436_p1 <= grp_fu_3025_p3;
    tmp_15_fu_2436_p4 <= tmp_15_fu_2436_p1(23 downto 8);
    tmp_16_fu_2478_p1 <= grp_fu_3034_p3;
    tmp_16_fu_2478_p4 <= tmp_16_fu_2478_p1(23 downto 8);
    tmp_17_fu_2520_p1 <= grp_fu_3042_p3;
    tmp_17_fu_2520_p4 <= tmp_17_fu_2520_p1(23 downto 8);
    tmp_18_fu_2562_p1 <= grp_fu_3050_p3;
    tmp_18_fu_2562_p4 <= tmp_18_fu_2562_p1(23 downto 8);
    tmp_19_fu_2604_p1 <= grp_fu_3058_p3;
    tmp_19_fu_2604_p4 <= tmp_19_fu_2604_p1(23 downto 8);
    tmp_20_fu_2646_p1 <= grp_fu_3066_p3;
    tmp_20_fu_2646_p4 <= tmp_20_fu_2646_p1(23 downto 8);
    tmp_21_fu_2688_p1 <= grp_fu_3074_p3;
    tmp_21_fu_2688_p4 <= tmp_21_fu_2688_p1(23 downto 8);
    tmp_22_fu_2730_p1 <= grp_fu_3082_p3;
    tmp_22_fu_2730_p4 <= tmp_22_fu_2730_p1(23 downto 8);
    tmp_23_fu_2772_p1 <= grp_fu_3090_p3;
    tmp_23_fu_2772_p4 <= tmp_23_fu_2772_p1(23 downto 8);
    tmp_24_fu_2814_p1 <= grp_fu_3098_p3;
    tmp_24_fu_2814_p4 <= tmp_24_fu_2814_p1(23 downto 8);
    tmp_25_fu_2856_p1 <= grp_fu_3106_p3;
    tmp_25_fu_2856_p4 <= tmp_25_fu_2856_p1(23 downto 8);
    tmp_26_fu_2898_p1 <= grp_fu_3114_p3;
    tmp_26_fu_2898_p4 <= tmp_26_fu_2898_p1(23 downto 8);
    tmp_27_fu_2961_p1 <= grp_fu_3122_p3;
    tmp_27_fu_2961_p4 <= tmp_27_fu_2961_p1(23 downto 8);
    tmp_28_fu_2981_p1 <= grp_fu_3130_p3;
    tmp_28_fu_2981_p4 <= tmp_28_fu_2981_p1(23 downto 8);
    tmp_29_fu_2998_p1 <= grp_fu_3138_p3;
    tmp_29_fu_2998_p4 <= tmp_29_fu_2998_p1(23 downto 8);
    tmp_fu_2331_p17 <= ap_sig_allocacmp_outNeurons_1(4 - 1 downto 0);
    trunc_ln717_s_fu_3015_p1 <= grp_fu_3146_p3;
end behav;
