-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nnlayer_nnlayer_Pipeline_VITIS_LOOP_99_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights_0_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_8_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_16_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_24_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_32_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_40_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_48_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_56_load : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_1_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_9_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_17_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_25_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_33_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_41_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_49_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_57_load : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_2_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_10_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_18_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_26_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_34_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_42_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_50_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_58_load : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_3_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_11_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_19_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_27_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_35_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_43_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_51_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_59_load : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_4_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_12_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_20_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_28_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_36_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_44_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_52_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_60_load : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_5_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_13_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_21_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_29_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_37_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_45_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_53_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_61_load : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_6_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_14_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_22_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_30_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_38_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_46_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_54_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_62_load : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_7_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_15_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_23_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_31_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_39_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_47_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_55_load : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_63_load : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_V_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_V_ce1 : OUT STD_LOGIC;
    output_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of nnlayer_nnlayer_Pipeline_VITIS_LOOP_99_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln99_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln1245_7_cast_fu_672_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_7_cast_reg_2261 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_6_cast_fu_676_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_6_cast_reg_2266 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_5_cast_fu_680_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_5_cast_reg_2271 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_4_cast_fu_684_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_4_cast_reg_2276 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_3_cast_fu_688_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_3_cast_reg_2281 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_2_cast_fu_692_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_2_cast_reg_2286 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_1_cast_fu_696_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_1_cast_reg_2291 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_i_fu_733_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_i_reg_2305 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_i_reg_2305_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_i_reg_2305_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_i_reg_2305_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_i_reg_2305_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_i_reg_2305_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal output_V_addr_reg_2316 : STD_LOGIC_VECTOR (2 downto 0);
    signal output_V_addr_reg_2316_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal output_V_addr_reg_2316_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal output_V_addr_reg_2316_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal output_V_addr_reg_2316_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal output_V_addr_reg_2316_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal output_V_addr_reg_2316_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal output_V_addr_reg_2316_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal output_V_addr_reg_2316_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal output_V_addr_reg_2316_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_1719_p66 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_2382 : STD_LOGIC_VECTOR (15 downto 0);
    signal outNeurons_cast2_fu_724_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal outNeurons_fu_220 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln99_fu_718_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_outNeurons_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_294_fu_729_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_741_p58 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_741_p59 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_875_p59 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_875_p60 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_1006_p60 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_1006_p61 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_1126_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1909_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_1126_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_1148_p61 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1148_p62 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_1270_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1918_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_fu_1270_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_1292_p62 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_1292_p63 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_1416_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1926_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_1416_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_1438_p63 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_1438_p64 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_1564_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1934_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_10_fu_1564_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_1586_p64 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_1586_p65 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_1719_p65 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_1845_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1942_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_fu_1845_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_1865_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1950_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_12_fu_1865_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_1882_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1958_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_13_fu_1882_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln717_7_fu_1899_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1966_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1909_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1918_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1918_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1926_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1926_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1934_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1934_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1942_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1942_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1950_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1950_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1958_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1958_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1966_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1966_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component nnlayer_mux_576_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (15 downto 0);
        din46 : IN STD_LOGIC_VECTOR (15 downto 0);
        din47 : IN STD_LOGIC_VECTOR (15 downto 0);
        din48 : IN STD_LOGIC_VECTOR (15 downto 0);
        din49 : IN STD_LOGIC_VECTOR (15 downto 0);
        din50 : IN STD_LOGIC_VECTOR (15 downto 0);
        din51 : IN STD_LOGIC_VECTOR (15 downto 0);
        din52 : IN STD_LOGIC_VECTOR (15 downto 0);
        din53 : IN STD_LOGIC_VECTOR (15 downto 0);
        din54 : IN STD_LOGIC_VECTOR (15 downto 0);
        din55 : IN STD_LOGIC_VECTOR (15 downto 0);
        din56 : IN STD_LOGIC_VECTOR (15 downto 0);
        din57 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_mux_586_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (15 downto 0);
        din46 : IN STD_LOGIC_VECTOR (15 downto 0);
        din47 : IN STD_LOGIC_VECTOR (15 downto 0);
        din48 : IN STD_LOGIC_VECTOR (15 downto 0);
        din49 : IN STD_LOGIC_VECTOR (15 downto 0);
        din50 : IN STD_LOGIC_VECTOR (15 downto 0);
        din51 : IN STD_LOGIC_VECTOR (15 downto 0);
        din52 : IN STD_LOGIC_VECTOR (15 downto 0);
        din53 : IN STD_LOGIC_VECTOR (15 downto 0);
        din54 : IN STD_LOGIC_VECTOR (15 downto 0);
        din55 : IN STD_LOGIC_VECTOR (15 downto 0);
        din56 : IN STD_LOGIC_VECTOR (15 downto 0);
        din57 : IN STD_LOGIC_VECTOR (15 downto 0);
        din58 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_mux_596_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (15 downto 0);
        din46 : IN STD_LOGIC_VECTOR (15 downto 0);
        din47 : IN STD_LOGIC_VECTOR (15 downto 0);
        din48 : IN STD_LOGIC_VECTOR (15 downto 0);
        din49 : IN STD_LOGIC_VECTOR (15 downto 0);
        din50 : IN STD_LOGIC_VECTOR (15 downto 0);
        din51 : IN STD_LOGIC_VECTOR (15 downto 0);
        din52 : IN STD_LOGIC_VECTOR (15 downto 0);
        din53 : IN STD_LOGIC_VECTOR (15 downto 0);
        din54 : IN STD_LOGIC_VECTOR (15 downto 0);
        din55 : IN STD_LOGIC_VECTOR (15 downto 0);
        din56 : IN STD_LOGIC_VECTOR (15 downto 0);
        din57 : IN STD_LOGIC_VECTOR (15 downto 0);
        din58 : IN STD_LOGIC_VECTOR (15 downto 0);
        din59 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_mux_606_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (15 downto 0);
        din46 : IN STD_LOGIC_VECTOR (15 downto 0);
        din47 : IN STD_LOGIC_VECTOR (15 downto 0);
        din48 : IN STD_LOGIC_VECTOR (15 downto 0);
        din49 : IN STD_LOGIC_VECTOR (15 downto 0);
        din50 : IN STD_LOGIC_VECTOR (15 downto 0);
        din51 : IN STD_LOGIC_VECTOR (15 downto 0);
        din52 : IN STD_LOGIC_VECTOR (15 downto 0);
        din53 : IN STD_LOGIC_VECTOR (15 downto 0);
        din54 : IN STD_LOGIC_VECTOR (15 downto 0);
        din55 : IN STD_LOGIC_VECTOR (15 downto 0);
        din56 : IN STD_LOGIC_VECTOR (15 downto 0);
        din57 : IN STD_LOGIC_VECTOR (15 downto 0);
        din58 : IN STD_LOGIC_VECTOR (15 downto 0);
        din59 : IN STD_LOGIC_VECTOR (15 downto 0);
        din60 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_mux_616_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (15 downto 0);
        din46 : IN STD_LOGIC_VECTOR (15 downto 0);
        din47 : IN STD_LOGIC_VECTOR (15 downto 0);
        din48 : IN STD_LOGIC_VECTOR (15 downto 0);
        din49 : IN STD_LOGIC_VECTOR (15 downto 0);
        din50 : IN STD_LOGIC_VECTOR (15 downto 0);
        din51 : IN STD_LOGIC_VECTOR (15 downto 0);
        din52 : IN STD_LOGIC_VECTOR (15 downto 0);
        din53 : IN STD_LOGIC_VECTOR (15 downto 0);
        din54 : IN STD_LOGIC_VECTOR (15 downto 0);
        din55 : IN STD_LOGIC_VECTOR (15 downto 0);
        din56 : IN STD_LOGIC_VECTOR (15 downto 0);
        din57 : IN STD_LOGIC_VECTOR (15 downto 0);
        din58 : IN STD_LOGIC_VECTOR (15 downto 0);
        din59 : IN STD_LOGIC_VECTOR (15 downto 0);
        din60 : IN STD_LOGIC_VECTOR (15 downto 0);
        din61 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_mux_626_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (15 downto 0);
        din46 : IN STD_LOGIC_VECTOR (15 downto 0);
        din47 : IN STD_LOGIC_VECTOR (15 downto 0);
        din48 : IN STD_LOGIC_VECTOR (15 downto 0);
        din49 : IN STD_LOGIC_VECTOR (15 downto 0);
        din50 : IN STD_LOGIC_VECTOR (15 downto 0);
        din51 : IN STD_LOGIC_VECTOR (15 downto 0);
        din52 : IN STD_LOGIC_VECTOR (15 downto 0);
        din53 : IN STD_LOGIC_VECTOR (15 downto 0);
        din54 : IN STD_LOGIC_VECTOR (15 downto 0);
        din55 : IN STD_LOGIC_VECTOR (15 downto 0);
        din56 : IN STD_LOGIC_VECTOR (15 downto 0);
        din57 : IN STD_LOGIC_VECTOR (15 downto 0);
        din58 : IN STD_LOGIC_VECTOR (15 downto 0);
        din59 : IN STD_LOGIC_VECTOR (15 downto 0);
        din60 : IN STD_LOGIC_VECTOR (15 downto 0);
        din61 : IN STD_LOGIC_VECTOR (15 downto 0);
        din62 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_mux_636_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (15 downto 0);
        din46 : IN STD_LOGIC_VECTOR (15 downto 0);
        din47 : IN STD_LOGIC_VECTOR (15 downto 0);
        din48 : IN STD_LOGIC_VECTOR (15 downto 0);
        din49 : IN STD_LOGIC_VECTOR (15 downto 0);
        din50 : IN STD_LOGIC_VECTOR (15 downto 0);
        din51 : IN STD_LOGIC_VECTOR (15 downto 0);
        din52 : IN STD_LOGIC_VECTOR (15 downto 0);
        din53 : IN STD_LOGIC_VECTOR (15 downto 0);
        din54 : IN STD_LOGIC_VECTOR (15 downto 0);
        din55 : IN STD_LOGIC_VECTOR (15 downto 0);
        din56 : IN STD_LOGIC_VECTOR (15 downto 0);
        din57 : IN STD_LOGIC_VECTOR (15 downto 0);
        din58 : IN STD_LOGIC_VECTOR (15 downto 0);
        din59 : IN STD_LOGIC_VECTOR (15 downto 0);
        din60 : IN STD_LOGIC_VECTOR (15 downto 0);
        din61 : IN STD_LOGIC_VECTOR (15 downto 0);
        din62 : IN STD_LOGIC_VECTOR (15 downto 0);
        din63 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_mux_646_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (15 downto 0);
        din46 : IN STD_LOGIC_VECTOR (15 downto 0);
        din47 : IN STD_LOGIC_VECTOR (15 downto 0);
        din48 : IN STD_LOGIC_VECTOR (15 downto 0);
        din49 : IN STD_LOGIC_VECTOR (15 downto 0);
        din50 : IN STD_LOGIC_VECTOR (15 downto 0);
        din51 : IN STD_LOGIC_VECTOR (15 downto 0);
        din52 : IN STD_LOGIC_VECTOR (15 downto 0);
        din53 : IN STD_LOGIC_VECTOR (15 downto 0);
        din54 : IN STD_LOGIC_VECTOR (15 downto 0);
        din55 : IN STD_LOGIC_VECTOR (15 downto 0);
        din56 : IN STD_LOGIC_VECTOR (15 downto 0);
        din57 : IN STD_LOGIC_VECTOR (15 downto 0);
        din58 : IN STD_LOGIC_VECTOR (15 downto 0);
        din59 : IN STD_LOGIC_VECTOR (15 downto 0);
        din60 : IN STD_LOGIC_VECTOR (15 downto 0);
        din61 : IN STD_LOGIC_VECTOR (15 downto 0);
        din62 : IN STD_LOGIC_VECTOR (15 downto 0);
        din63 : IN STD_LOGIC_VECTOR (15 downto 0);
        din64 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component nnlayer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_576_16_1_1_U4 : component nnlayer_mux_576_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 16,
        din46_WIDTH => 16,
        din47_WIDTH => 16,
        din48_WIDTH => 16,
        din49_WIDTH => 16,
        din50_WIDTH => 16,
        din51_WIDTH => 16,
        din52_WIDTH => 16,
        din53_WIDTH => 16,
        din54_WIDTH => 16,
        din55_WIDTH => 16,
        din56_WIDTH => 16,
        din57_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => weights_0_load,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => weights_8_load,
        din9 => ap_const_lv16_0,
        din10 => ap_const_lv16_0,
        din11 => ap_const_lv16_0,
        din12 => ap_const_lv16_0,
        din13 => ap_const_lv16_0,
        din14 => ap_const_lv16_0,
        din15 => ap_const_lv16_0,
        din16 => weights_16_load,
        din17 => ap_const_lv16_0,
        din18 => ap_const_lv16_0,
        din19 => ap_const_lv16_0,
        din20 => ap_const_lv16_0,
        din21 => ap_const_lv16_0,
        din22 => ap_const_lv16_0,
        din23 => ap_const_lv16_0,
        din24 => weights_24_load,
        din25 => ap_const_lv16_0,
        din26 => ap_const_lv16_0,
        din27 => ap_const_lv16_0,
        din28 => ap_const_lv16_0,
        din29 => ap_const_lv16_0,
        din30 => ap_const_lv16_0,
        din31 => ap_const_lv16_0,
        din32 => weights_32_load,
        din33 => ap_const_lv16_0,
        din34 => ap_const_lv16_0,
        din35 => ap_const_lv16_0,
        din36 => ap_const_lv16_0,
        din37 => ap_const_lv16_0,
        din38 => ap_const_lv16_0,
        din39 => ap_const_lv16_0,
        din40 => weights_40_load,
        din41 => ap_const_lv16_0,
        din42 => ap_const_lv16_0,
        din43 => ap_const_lv16_0,
        din44 => ap_const_lv16_0,
        din45 => ap_const_lv16_0,
        din46 => ap_const_lv16_0,
        din47 => ap_const_lv16_0,
        din48 => weights_48_load,
        din49 => ap_const_lv16_0,
        din50 => ap_const_lv16_0,
        din51 => ap_const_lv16_0,
        din52 => ap_const_lv16_0,
        din53 => ap_const_lv16_0,
        din54 => ap_const_lv16_0,
        din55 => ap_const_lv16_0,
        din56 => weights_56_load,
        din57 => tmp_fu_741_p58,
        dout => tmp_fu_741_p59);

    mux_586_16_1_1_U5 : component nnlayer_mux_586_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 16,
        din46_WIDTH => 16,
        din47_WIDTH => 16,
        din48_WIDTH => 16,
        din49_WIDTH => 16,
        din50_WIDTH => 16,
        din51_WIDTH => 16,
        din52_WIDTH => 16,
        din53_WIDTH => 16,
        din54_WIDTH => 16,
        din55_WIDTH => 16,
        din56_WIDTH => 16,
        din57_WIDTH => 16,
        din58_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => weights_1_load,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv16_0,
        din9 => weights_9_load,
        din10 => ap_const_lv16_0,
        din11 => ap_const_lv16_0,
        din12 => ap_const_lv16_0,
        din13 => ap_const_lv16_0,
        din14 => ap_const_lv16_0,
        din15 => ap_const_lv16_0,
        din16 => ap_const_lv16_0,
        din17 => weights_17_load,
        din18 => ap_const_lv16_0,
        din19 => ap_const_lv16_0,
        din20 => ap_const_lv16_0,
        din21 => ap_const_lv16_0,
        din22 => ap_const_lv16_0,
        din23 => ap_const_lv16_0,
        din24 => ap_const_lv16_0,
        din25 => weights_25_load,
        din26 => ap_const_lv16_0,
        din27 => ap_const_lv16_0,
        din28 => ap_const_lv16_0,
        din29 => ap_const_lv16_0,
        din30 => ap_const_lv16_0,
        din31 => ap_const_lv16_0,
        din32 => ap_const_lv16_0,
        din33 => weights_33_load,
        din34 => ap_const_lv16_0,
        din35 => ap_const_lv16_0,
        din36 => ap_const_lv16_0,
        din37 => ap_const_lv16_0,
        din38 => ap_const_lv16_0,
        din39 => ap_const_lv16_0,
        din40 => ap_const_lv16_0,
        din41 => weights_41_load,
        din42 => ap_const_lv16_0,
        din43 => ap_const_lv16_0,
        din44 => ap_const_lv16_0,
        din45 => ap_const_lv16_0,
        din46 => ap_const_lv16_0,
        din47 => ap_const_lv16_0,
        din48 => ap_const_lv16_0,
        din49 => weights_49_load,
        din50 => ap_const_lv16_0,
        din51 => ap_const_lv16_0,
        din52 => ap_const_lv16_0,
        din53 => ap_const_lv16_0,
        din54 => ap_const_lv16_0,
        din55 => ap_const_lv16_0,
        din56 => ap_const_lv16_0,
        din57 => weights_57_load,
        din58 => tmp_s_fu_875_p59,
        dout => tmp_s_fu_875_p60);

    mux_596_16_1_1_U6 : component nnlayer_mux_596_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 16,
        din46_WIDTH => 16,
        din47_WIDTH => 16,
        din48_WIDTH => 16,
        din49_WIDTH => 16,
        din50_WIDTH => 16,
        din51_WIDTH => 16,
        din52_WIDTH => 16,
        din53_WIDTH => 16,
        din54_WIDTH => 16,
        din55_WIDTH => 16,
        din56_WIDTH => 16,
        din57_WIDTH => 16,
        din58_WIDTH => 16,
        din59_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => ap_const_lv16_0,
        din2 => weights_2_load,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv16_0,
        din9 => ap_const_lv16_0,
        din10 => weights_10_load,
        din11 => ap_const_lv16_0,
        din12 => ap_const_lv16_0,
        din13 => ap_const_lv16_0,
        din14 => ap_const_lv16_0,
        din15 => ap_const_lv16_0,
        din16 => ap_const_lv16_0,
        din17 => ap_const_lv16_0,
        din18 => weights_18_load,
        din19 => ap_const_lv16_0,
        din20 => ap_const_lv16_0,
        din21 => ap_const_lv16_0,
        din22 => ap_const_lv16_0,
        din23 => ap_const_lv16_0,
        din24 => ap_const_lv16_0,
        din25 => ap_const_lv16_0,
        din26 => weights_26_load,
        din27 => ap_const_lv16_0,
        din28 => ap_const_lv16_0,
        din29 => ap_const_lv16_0,
        din30 => ap_const_lv16_0,
        din31 => ap_const_lv16_0,
        din32 => ap_const_lv16_0,
        din33 => ap_const_lv16_0,
        din34 => weights_34_load,
        din35 => ap_const_lv16_0,
        din36 => ap_const_lv16_0,
        din37 => ap_const_lv16_0,
        din38 => ap_const_lv16_0,
        din39 => ap_const_lv16_0,
        din40 => ap_const_lv16_0,
        din41 => ap_const_lv16_0,
        din42 => weights_42_load,
        din43 => ap_const_lv16_0,
        din44 => ap_const_lv16_0,
        din45 => ap_const_lv16_0,
        din46 => ap_const_lv16_0,
        din47 => ap_const_lv16_0,
        din48 => ap_const_lv16_0,
        din49 => ap_const_lv16_0,
        din50 => weights_50_load,
        din51 => ap_const_lv16_0,
        din52 => ap_const_lv16_0,
        din53 => ap_const_lv16_0,
        din54 => ap_const_lv16_0,
        din55 => ap_const_lv16_0,
        din56 => ap_const_lv16_0,
        din57 => ap_const_lv16_0,
        din58 => weights_58_load,
        din59 => tmp_2_fu_1006_p60,
        dout => tmp_2_fu_1006_p61);

    mux_606_16_1_1_U7 : component nnlayer_mux_606_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 16,
        din46_WIDTH => 16,
        din47_WIDTH => 16,
        din48_WIDTH => 16,
        din49_WIDTH => 16,
        din50_WIDTH => 16,
        din51_WIDTH => 16,
        din52_WIDTH => 16,
        din53_WIDTH => 16,
        din54_WIDTH => 16,
        din55_WIDTH => 16,
        din56_WIDTH => 16,
        din57_WIDTH => 16,
        din58_WIDTH => 16,
        din59_WIDTH => 16,
        din60_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => weights_3_load,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv16_0,
        din9 => ap_const_lv16_0,
        din10 => ap_const_lv16_0,
        din11 => weights_11_load,
        din12 => ap_const_lv16_0,
        din13 => ap_const_lv16_0,
        din14 => ap_const_lv16_0,
        din15 => ap_const_lv16_0,
        din16 => ap_const_lv16_0,
        din17 => ap_const_lv16_0,
        din18 => ap_const_lv16_0,
        din19 => weights_19_load,
        din20 => ap_const_lv16_0,
        din21 => ap_const_lv16_0,
        din22 => ap_const_lv16_0,
        din23 => ap_const_lv16_0,
        din24 => ap_const_lv16_0,
        din25 => ap_const_lv16_0,
        din26 => ap_const_lv16_0,
        din27 => weights_27_load,
        din28 => ap_const_lv16_0,
        din29 => ap_const_lv16_0,
        din30 => ap_const_lv16_0,
        din31 => ap_const_lv16_0,
        din32 => ap_const_lv16_0,
        din33 => ap_const_lv16_0,
        din34 => ap_const_lv16_0,
        din35 => weights_35_load,
        din36 => ap_const_lv16_0,
        din37 => ap_const_lv16_0,
        din38 => ap_const_lv16_0,
        din39 => ap_const_lv16_0,
        din40 => ap_const_lv16_0,
        din41 => ap_const_lv16_0,
        din42 => ap_const_lv16_0,
        din43 => weights_43_load,
        din44 => ap_const_lv16_0,
        din45 => ap_const_lv16_0,
        din46 => ap_const_lv16_0,
        din47 => ap_const_lv16_0,
        din48 => ap_const_lv16_0,
        din49 => ap_const_lv16_0,
        din50 => ap_const_lv16_0,
        din51 => weights_51_load,
        din52 => ap_const_lv16_0,
        din53 => ap_const_lv16_0,
        din54 => ap_const_lv16_0,
        din55 => ap_const_lv16_0,
        din56 => ap_const_lv16_0,
        din57 => ap_const_lv16_0,
        din58 => ap_const_lv16_0,
        din59 => weights_59_load,
        din60 => tmp_3_fu_1148_p61,
        dout => tmp_3_fu_1148_p62);

    mux_616_16_1_1_U8 : component nnlayer_mux_616_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 16,
        din46_WIDTH => 16,
        din47_WIDTH => 16,
        din48_WIDTH => 16,
        din49_WIDTH => 16,
        din50_WIDTH => 16,
        din51_WIDTH => 16,
        din52_WIDTH => 16,
        din53_WIDTH => 16,
        din54_WIDTH => 16,
        din55_WIDTH => 16,
        din56_WIDTH => 16,
        din57_WIDTH => 16,
        din58_WIDTH => 16,
        din59_WIDTH => 16,
        din60_WIDTH => 16,
        din61_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => weights_4_load,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv16_0,
        din9 => ap_const_lv16_0,
        din10 => ap_const_lv16_0,
        din11 => ap_const_lv16_0,
        din12 => weights_12_load,
        din13 => ap_const_lv16_0,
        din14 => ap_const_lv16_0,
        din15 => ap_const_lv16_0,
        din16 => ap_const_lv16_0,
        din17 => ap_const_lv16_0,
        din18 => ap_const_lv16_0,
        din19 => ap_const_lv16_0,
        din20 => weights_20_load,
        din21 => ap_const_lv16_0,
        din22 => ap_const_lv16_0,
        din23 => ap_const_lv16_0,
        din24 => ap_const_lv16_0,
        din25 => ap_const_lv16_0,
        din26 => ap_const_lv16_0,
        din27 => ap_const_lv16_0,
        din28 => weights_28_load,
        din29 => ap_const_lv16_0,
        din30 => ap_const_lv16_0,
        din31 => ap_const_lv16_0,
        din32 => ap_const_lv16_0,
        din33 => ap_const_lv16_0,
        din34 => ap_const_lv16_0,
        din35 => ap_const_lv16_0,
        din36 => weights_36_load,
        din37 => ap_const_lv16_0,
        din38 => ap_const_lv16_0,
        din39 => ap_const_lv16_0,
        din40 => ap_const_lv16_0,
        din41 => ap_const_lv16_0,
        din42 => ap_const_lv16_0,
        din43 => ap_const_lv16_0,
        din44 => weights_44_load,
        din45 => ap_const_lv16_0,
        din46 => ap_const_lv16_0,
        din47 => ap_const_lv16_0,
        din48 => ap_const_lv16_0,
        din49 => ap_const_lv16_0,
        din50 => ap_const_lv16_0,
        din51 => ap_const_lv16_0,
        din52 => weights_52_load,
        din53 => ap_const_lv16_0,
        din54 => ap_const_lv16_0,
        din55 => ap_const_lv16_0,
        din56 => ap_const_lv16_0,
        din57 => ap_const_lv16_0,
        din58 => ap_const_lv16_0,
        din59 => ap_const_lv16_0,
        din60 => weights_60_load,
        din61 => tmp_4_fu_1292_p62,
        dout => tmp_4_fu_1292_p63);

    mux_626_16_1_1_U9 : component nnlayer_mux_626_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 16,
        din46_WIDTH => 16,
        din47_WIDTH => 16,
        din48_WIDTH => 16,
        din49_WIDTH => 16,
        din50_WIDTH => 16,
        din51_WIDTH => 16,
        din52_WIDTH => 16,
        din53_WIDTH => 16,
        din54_WIDTH => 16,
        din55_WIDTH => 16,
        din56_WIDTH => 16,
        din57_WIDTH => 16,
        din58_WIDTH => 16,
        din59_WIDTH => 16,
        din60_WIDTH => 16,
        din61_WIDTH => 16,
        din62_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => weights_5_load,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv16_0,
        din9 => ap_const_lv16_0,
        din10 => ap_const_lv16_0,
        din11 => ap_const_lv16_0,
        din12 => ap_const_lv16_0,
        din13 => weights_13_load,
        din14 => ap_const_lv16_0,
        din15 => ap_const_lv16_0,
        din16 => ap_const_lv16_0,
        din17 => ap_const_lv16_0,
        din18 => ap_const_lv16_0,
        din19 => ap_const_lv16_0,
        din20 => ap_const_lv16_0,
        din21 => weights_21_load,
        din22 => ap_const_lv16_0,
        din23 => ap_const_lv16_0,
        din24 => ap_const_lv16_0,
        din25 => ap_const_lv16_0,
        din26 => ap_const_lv16_0,
        din27 => ap_const_lv16_0,
        din28 => ap_const_lv16_0,
        din29 => weights_29_load,
        din30 => ap_const_lv16_0,
        din31 => ap_const_lv16_0,
        din32 => ap_const_lv16_0,
        din33 => ap_const_lv16_0,
        din34 => ap_const_lv16_0,
        din35 => ap_const_lv16_0,
        din36 => ap_const_lv16_0,
        din37 => weights_37_load,
        din38 => ap_const_lv16_0,
        din39 => ap_const_lv16_0,
        din40 => ap_const_lv16_0,
        din41 => ap_const_lv16_0,
        din42 => ap_const_lv16_0,
        din43 => ap_const_lv16_0,
        din44 => ap_const_lv16_0,
        din45 => weights_45_load,
        din46 => ap_const_lv16_0,
        din47 => ap_const_lv16_0,
        din48 => ap_const_lv16_0,
        din49 => ap_const_lv16_0,
        din50 => ap_const_lv16_0,
        din51 => ap_const_lv16_0,
        din52 => ap_const_lv16_0,
        din53 => weights_53_load,
        din54 => ap_const_lv16_0,
        din55 => ap_const_lv16_0,
        din56 => ap_const_lv16_0,
        din57 => ap_const_lv16_0,
        din58 => ap_const_lv16_0,
        din59 => ap_const_lv16_0,
        din60 => ap_const_lv16_0,
        din61 => weights_61_load,
        din62 => tmp_5_fu_1438_p63,
        dout => tmp_5_fu_1438_p64);

    mux_636_16_1_1_U10 : component nnlayer_mux_636_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 16,
        din46_WIDTH => 16,
        din47_WIDTH => 16,
        din48_WIDTH => 16,
        din49_WIDTH => 16,
        din50_WIDTH => 16,
        din51_WIDTH => 16,
        din52_WIDTH => 16,
        din53_WIDTH => 16,
        din54_WIDTH => 16,
        din55_WIDTH => 16,
        din56_WIDTH => 16,
        din57_WIDTH => 16,
        din58_WIDTH => 16,
        din59_WIDTH => 16,
        din60_WIDTH => 16,
        din61_WIDTH => 16,
        din62_WIDTH => 16,
        din63_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => weights_6_load,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv16_0,
        din9 => ap_const_lv16_0,
        din10 => ap_const_lv16_0,
        din11 => ap_const_lv16_0,
        din12 => ap_const_lv16_0,
        din13 => ap_const_lv16_0,
        din14 => weights_14_load,
        din15 => ap_const_lv16_0,
        din16 => ap_const_lv16_0,
        din17 => ap_const_lv16_0,
        din18 => ap_const_lv16_0,
        din19 => ap_const_lv16_0,
        din20 => ap_const_lv16_0,
        din21 => ap_const_lv16_0,
        din22 => weights_22_load,
        din23 => ap_const_lv16_0,
        din24 => ap_const_lv16_0,
        din25 => ap_const_lv16_0,
        din26 => ap_const_lv16_0,
        din27 => ap_const_lv16_0,
        din28 => ap_const_lv16_0,
        din29 => ap_const_lv16_0,
        din30 => weights_30_load,
        din31 => ap_const_lv16_0,
        din32 => ap_const_lv16_0,
        din33 => ap_const_lv16_0,
        din34 => ap_const_lv16_0,
        din35 => ap_const_lv16_0,
        din36 => ap_const_lv16_0,
        din37 => ap_const_lv16_0,
        din38 => weights_38_load,
        din39 => ap_const_lv16_0,
        din40 => ap_const_lv16_0,
        din41 => ap_const_lv16_0,
        din42 => ap_const_lv16_0,
        din43 => ap_const_lv16_0,
        din44 => ap_const_lv16_0,
        din45 => ap_const_lv16_0,
        din46 => weights_46_load,
        din47 => ap_const_lv16_0,
        din48 => ap_const_lv16_0,
        din49 => ap_const_lv16_0,
        din50 => ap_const_lv16_0,
        din51 => ap_const_lv16_0,
        din52 => ap_const_lv16_0,
        din53 => ap_const_lv16_0,
        din54 => weights_54_load,
        din55 => ap_const_lv16_0,
        din56 => ap_const_lv16_0,
        din57 => ap_const_lv16_0,
        din58 => ap_const_lv16_0,
        din59 => ap_const_lv16_0,
        din60 => ap_const_lv16_0,
        din61 => ap_const_lv16_0,
        din62 => weights_62_load,
        din63 => tmp_6_fu_1586_p64,
        dout => tmp_6_fu_1586_p65);

    mux_646_16_1_1_U11 : component nnlayer_mux_646_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 16,
        din46_WIDTH => 16,
        din47_WIDTH => 16,
        din48_WIDTH => 16,
        din49_WIDTH => 16,
        din50_WIDTH => 16,
        din51_WIDTH => 16,
        din52_WIDTH => 16,
        din53_WIDTH => 16,
        din54_WIDTH => 16,
        din55_WIDTH => 16,
        din56_WIDTH => 16,
        din57_WIDTH => 16,
        din58_WIDTH => 16,
        din59_WIDTH => 16,
        din60_WIDTH => 16,
        din61_WIDTH => 16,
        din62_WIDTH => 16,
        din63_WIDTH => 16,
        din64_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => weights_7_load,
        din8 => ap_const_lv16_0,
        din9 => ap_const_lv16_0,
        din10 => ap_const_lv16_0,
        din11 => ap_const_lv16_0,
        din12 => ap_const_lv16_0,
        din13 => ap_const_lv16_0,
        din14 => ap_const_lv16_0,
        din15 => weights_15_load,
        din16 => ap_const_lv16_0,
        din17 => ap_const_lv16_0,
        din18 => ap_const_lv16_0,
        din19 => ap_const_lv16_0,
        din20 => ap_const_lv16_0,
        din21 => ap_const_lv16_0,
        din22 => ap_const_lv16_0,
        din23 => weights_23_load,
        din24 => ap_const_lv16_0,
        din25 => ap_const_lv16_0,
        din26 => ap_const_lv16_0,
        din27 => ap_const_lv16_0,
        din28 => ap_const_lv16_0,
        din29 => ap_const_lv16_0,
        din30 => ap_const_lv16_0,
        din31 => weights_31_load,
        din32 => ap_const_lv16_0,
        din33 => ap_const_lv16_0,
        din34 => ap_const_lv16_0,
        din35 => ap_const_lv16_0,
        din36 => ap_const_lv16_0,
        din37 => ap_const_lv16_0,
        din38 => ap_const_lv16_0,
        din39 => weights_39_load,
        din40 => ap_const_lv16_0,
        din41 => ap_const_lv16_0,
        din42 => ap_const_lv16_0,
        din43 => ap_const_lv16_0,
        din44 => ap_const_lv16_0,
        din45 => ap_const_lv16_0,
        din46 => ap_const_lv16_0,
        din47 => weights_47_load,
        din48 => ap_const_lv16_0,
        din49 => ap_const_lv16_0,
        din50 => ap_const_lv16_0,
        din51 => ap_const_lv16_0,
        din52 => ap_const_lv16_0,
        din53 => ap_const_lv16_0,
        din54 => ap_const_lv16_0,
        din55 => weights_55_load,
        din56 => ap_const_lv16_0,
        din57 => ap_const_lv16_0,
        din58 => ap_const_lv16_0,
        din59 => ap_const_lv16_0,
        din60 => ap_const_lv16_0,
        din61 => ap_const_lv16_0,
        din62 => ap_const_lv16_0,
        din63 => weights_63_load,
        din64 => tmp_7_fu_1719_p65,
        dout => tmp_7_fu_1719_p66);

    mac_muladd_16s_16s_24ns_24_4_1_U12 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sext_ln1245,
        din1 => tmp_fu_741_p59,
        din2 => grp_fu_1909_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1909_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U13 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1918_p0,
        din1 => tmp_s_fu_875_p60,
        din2 => grp_fu_1918_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1918_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U14 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1926_p0,
        din1 => tmp_2_fu_1006_p61,
        din2 => grp_fu_1926_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1926_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U15 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1934_p0,
        din1 => tmp_3_fu_1148_p62,
        din2 => grp_fu_1934_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1934_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U16 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1942_p0,
        din1 => tmp_4_fu_1292_p63,
        din2 => grp_fu_1942_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1942_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U17 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1950_p0,
        din1 => tmp_5_fu_1438_p64,
        din2 => grp_fu_1950_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1950_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U18 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1958_p0,
        din1 => tmp_6_fu_1586_p65,
        din2 => grp_fu_1958_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1958_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U19 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1966_p0,
        din1 => tmp_7_reg_2382,
        din2 => grp_fu_1966_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1966_p3);

    flow_control_loop_pipe_sequential_init_U : component nnlayer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    outNeurons_fu_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln99_fu_712_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    outNeurons_fu_220 <= add_ln99_fu_718_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    outNeurons_fu_220 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    mul_i_reg_2305_pp0_iter1_reg(5 downto 3) <= mul_i_reg_2305(5 downto 3);
                output_V_addr_reg_2316_pp0_iter1_reg <= output_V_addr_reg_2316;
                sext_ln1245_1_cast_reg_2291 <= sext_ln1245_1_cast_fu_696_p1;
                sext_ln1245_2_cast_reg_2286 <= sext_ln1245_2_cast_fu_692_p1;
                sext_ln1245_3_cast_reg_2281 <= sext_ln1245_3_cast_fu_688_p1;
                sext_ln1245_4_cast_reg_2276 <= sext_ln1245_4_cast_fu_684_p1;
                sext_ln1245_5_cast_reg_2271 <= sext_ln1245_5_cast_fu_680_p1;
                sext_ln1245_6_cast_reg_2266 <= sext_ln1245_6_cast_fu_676_p1;
                sext_ln1245_7_cast_reg_2261 <= sext_ln1245_7_cast_fu_672_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                    mul_i_reg_2305_pp0_iter2_reg(5 downto 3) <= mul_i_reg_2305_pp0_iter1_reg(5 downto 3);
                    mul_i_reg_2305_pp0_iter3_reg(5 downto 3) <= mul_i_reg_2305_pp0_iter2_reg(5 downto 3);
                    mul_i_reg_2305_pp0_iter4_reg(5 downto 3) <= mul_i_reg_2305_pp0_iter3_reg(5 downto 3);
                    mul_i_reg_2305_pp0_iter5_reg(5 downto 3) <= mul_i_reg_2305_pp0_iter4_reg(5 downto 3);
                output_V_addr_reg_2316_pp0_iter2_reg <= output_V_addr_reg_2316_pp0_iter1_reg;
                output_V_addr_reg_2316_pp0_iter3_reg <= output_V_addr_reg_2316_pp0_iter2_reg;
                output_V_addr_reg_2316_pp0_iter4_reg <= output_V_addr_reg_2316_pp0_iter3_reg;
                output_V_addr_reg_2316_pp0_iter5_reg <= output_V_addr_reg_2316_pp0_iter4_reg;
                output_V_addr_reg_2316_pp0_iter6_reg <= output_V_addr_reg_2316_pp0_iter5_reg;
                output_V_addr_reg_2316_pp0_iter7_reg <= output_V_addr_reg_2316_pp0_iter6_reg;
                output_V_addr_reg_2316_pp0_iter8_reg <= output_V_addr_reg_2316_pp0_iter7_reg;
                output_V_addr_reg_2316_pp0_iter9_reg <= output_V_addr_reg_2316_pp0_iter8_reg;
                tmp_7_reg_2382 <= tmp_7_fu_1719_p66;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_712_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    mul_i_reg_2305(5 downto 3) <= mul_i_fu_733_p3(5 downto 3);
                output_V_addr_reg_2316 <= outNeurons_cast2_fu_724_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    mul_i_reg_2305(2 downto 0) <= "000";
    mul_i_reg_2305_pp0_iter1_reg(2 downto 0) <= "000";
    mul_i_reg_2305_pp0_iter2_reg(2 downto 0) <= "000";
    mul_i_reg_2305_pp0_iter3_reg(2 downto 0) <= "000";
    mul_i_reg_2305_pp0_iter4_reg(2 downto 0) <= "000";
    mul_i_reg_2305_pp0_iter5_reg(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln99_fu_718_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_outNeurons_1) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln99_fu_712_p2)
    begin
        if (((icmp_ln99_fu_712_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_outNeurons_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, outNeurons_fu_220, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_outNeurons_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_outNeurons_1 <= outNeurons_fu_220;
        end if; 
    end process;

    empty_294_fu_729_p1 <= ap_sig_allocacmp_outNeurons_1(3 - 1 downto 0);
    grp_fu_1909_p2 <= (output_V_q1 & ap_const_lv8_0);
    grp_fu_1918_p0 <= sext_ln1245_1_cast_reg_2291(16 - 1 downto 0);
    grp_fu_1918_p2 <= (tmp_8_fu_1126_p4 & ap_const_lv8_0);
    grp_fu_1926_p0 <= sext_ln1245_2_cast_reg_2286(16 - 1 downto 0);
    grp_fu_1926_p2 <= (tmp_9_fu_1270_p4 & ap_const_lv8_0);
    grp_fu_1934_p0 <= sext_ln1245_3_cast_reg_2281(16 - 1 downto 0);
    grp_fu_1934_p2 <= (tmp_1_fu_1416_p4 & ap_const_lv8_0);
    grp_fu_1942_p0 <= sext_ln1245_4_cast_reg_2276(16 - 1 downto 0);
    grp_fu_1942_p2 <= (tmp_10_fu_1564_p4 & ap_const_lv8_0);
    grp_fu_1950_p0 <= sext_ln1245_5_cast_reg_2271(16 - 1 downto 0);
    grp_fu_1950_p2 <= (tmp_11_fu_1845_p4 & ap_const_lv8_0);
    grp_fu_1958_p0 <= sext_ln1245_6_cast_reg_2266(16 - 1 downto 0);
    grp_fu_1958_p2 <= (tmp_12_fu_1865_p4 & ap_const_lv8_0);
    grp_fu_1966_p0 <= sext_ln1245_7_cast_reg_2261(16 - 1 downto 0);
    grp_fu_1966_p2 <= (tmp_13_fu_1882_p4 & ap_const_lv8_0);
    icmp_ln99_fu_712_p2 <= "1" when (ap_sig_allocacmp_outNeurons_1 = ap_const_lv4_8) else "0";
    mul_i_fu_733_p3 <= (empty_294_fu_729_p1 & ap_const_lv3_0);
    outNeurons_cast2_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_outNeurons_1),64));
    output_V_address0 <= output_V_addr_reg_2316_pp0_iter9_reg;
    output_V_address1 <= output_V_addr_reg_2316;

    output_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_V_ce1 <= ap_const_logic_1;
        else 
            output_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= trunc_ln717_7_fu_1899_p1(23 downto 8);

    output_V_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1245_1_cast_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_1),24));

        sext_ln1245_2_cast_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_2),24));

        sext_ln1245_3_cast_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_3),24));

        sext_ln1245_4_cast_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_4),24));

        sext_ln1245_5_cast_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_5),24));

        sext_ln1245_6_cast_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_6),24));

        sext_ln1245_7_cast_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_7),24));

    tmp_10_fu_1564_p1 <= grp_fu_1934_p3;
    tmp_10_fu_1564_p4 <= tmp_10_fu_1564_p1(23 downto 8);
    tmp_11_fu_1845_p1 <= grp_fu_1942_p3;
    tmp_11_fu_1845_p4 <= tmp_11_fu_1845_p1(23 downto 8);
    tmp_12_fu_1865_p1 <= grp_fu_1950_p3;
    tmp_12_fu_1865_p4 <= tmp_12_fu_1865_p1(23 downto 8);
    tmp_13_fu_1882_p1 <= grp_fu_1958_p3;
    tmp_13_fu_1882_p4 <= tmp_13_fu_1882_p1(23 downto 8);
    tmp_1_fu_1416_p1 <= grp_fu_1926_p3;
    tmp_1_fu_1416_p4 <= tmp_1_fu_1416_p1(23 downto 8);
    tmp_2_fu_1006_p60 <= (mul_i_reg_2305_pp0_iter1_reg or ap_const_lv6_2);
    tmp_3_fu_1148_p61 <= (mul_i_reg_2305_pp0_iter2_reg or ap_const_lv6_3);
    tmp_4_fu_1292_p62 <= (mul_i_reg_2305_pp0_iter3_reg or ap_const_lv6_4);
    tmp_5_fu_1438_p63 <= (mul_i_reg_2305_pp0_iter4_reg or ap_const_lv6_5);
    tmp_6_fu_1586_p64 <= (mul_i_reg_2305_pp0_iter5_reg or ap_const_lv6_6);
    tmp_7_fu_1719_p65 <= (mul_i_reg_2305_pp0_iter5_reg or ap_const_lv6_7);
    tmp_8_fu_1126_p1 <= grp_fu_1909_p3;
    tmp_8_fu_1126_p4 <= tmp_8_fu_1126_p1(23 downto 8);
    tmp_9_fu_1270_p1 <= grp_fu_1918_p3;
    tmp_9_fu_1270_p4 <= tmp_9_fu_1270_p1(23 downto 8);
    tmp_fu_741_p58 <= (empty_294_fu_729_p1 & ap_const_lv3_0);
    tmp_s_fu_875_p59 <= (mul_i_reg_2305 or ap_const_lv6_1);
    trunc_ln717_7_fu_1899_p1 <= grp_fu_1966_p3;
end behav;
