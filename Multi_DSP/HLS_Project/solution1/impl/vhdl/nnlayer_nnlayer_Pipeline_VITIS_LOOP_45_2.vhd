-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nnlayer_nnlayer_Pipeline_VITIS_LOOP_45_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rhs : IN STD_LOGIC_VECTOR (31 downto 0);
    rhs_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    rhs_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    rhs_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    rhs_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    rhs_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    rhs_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    rhs_1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of nnlayer_nnlayer_Pipeline_VITIS_LOOP_45_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal output_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_V_ce0 : STD_LOGIC;
    signal output_V_we0 : STD_LOGIC;
    signal output_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_V_ce1 : STD_LOGIC;
    signal output_V_we1 : STD_LOGIC;
    signal output_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_load_reg_592 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal output_V_addr_reg_602 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_V_addr_1_reg_607 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1318_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1318_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln_reg_616 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1318_1_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1318_1_reg_621 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln717_1_reg_625 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_addr_2_reg_630 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_V_addr_3_reg_635 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1318_6_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1318_6_reg_640 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln717_6_reg_644 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_6_reg_649 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1318_2_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1318_2_reg_654 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln717_2_reg_658 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1318_3_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1318_3_reg_663 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln717_3_reg_667 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_addr_4_reg_672 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_V_addr_5_reg_677 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1318_4_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1318_4_reg_682 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln717_4_reg_686 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1318_5_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1318_5_reg_691 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln717_5_reg_695 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_addr_6_reg_700 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_V_addr_7_reg_705 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_7_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_7_reg_710 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln1318_7_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln48_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_66 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal or_ln49_fu_206_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal lhs_1_fu_217_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_fu_225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_3_fu_250_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_1_fu_258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_1_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln50_fu_283_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln51_fu_293_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal lhs_V_5_fu_303_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_6_fu_311_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_6_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_5_fu_336_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_2_fu_344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_2_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_7_fu_369_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_3_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_3_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln52_fu_402_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln53_fu_412_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal lhs_V_1_fu_422_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_4_fu_430_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_4_fu_434_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_3_fu_455_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_5_fu_463_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_5_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln54_fu_488_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln55_fu_498_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal lhs_V_7_fu_508_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_7_fu_515_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component nnlayer_nnlayer_Pipeline_VITIS_LOOP_45_2_output_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    output_V_U : component nnlayer_nnlayer_Pipeline_VITIS_LOOP_45_2_output_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_V_address0,
        ce0 => output_V_ce0,
        we0 => output_V_we0,
        d0 => output_V_d0,
        q0 => output_V_q0,
        address1 => output_V_address1,
        ce1 => output_V_ce1,
        we1 => output_V_we1,
        d1 => output_V_d1,
        q1 => output_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    empty_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                empty_fu_66(3) <= '0';
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                empty_fu_66(3) <= '1';
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln1318_1_reg_621 <= icmp_ln1318_1_fu_267_p2;
                icmp_ln1318_reg_612 <= icmp_ln1318_fu_234_p2;
                    output_V_addr_2_reg_630(3) <= zext_ln50_fu_288_p1(8 - 1 downto 0)(3);
                    output_V_addr_3_reg_635(3) <= zext_ln51_fu_298_p1(8 - 1 downto 0)(3);
                trunc_ln717_1_reg_625 <= ret_V_1_fu_262_p2(23 downto 8);
                trunc_ln_reg_616 <= ret_V_fu_229_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln1318_2_reg_654 <= icmp_ln1318_2_fu_353_p2;
                icmp_ln1318_3_reg_663 <= icmp_ln1318_3_fu_386_p2;
                    output_V_addr_4_reg_672(3) <= zext_ln52_fu_407_p1(8 - 1 downto 0)(3);
                    output_V_addr_5_reg_677(3) <= zext_ln53_fu_417_p1(8 - 1 downto 0)(3);
                trunc_ln717_2_reg_658 <= ret_V_2_fu_348_p2(23 downto 8);
                trunc_ln717_3_reg_667 <= ret_V_3_fu_381_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln1318_4_reg_682 <= icmp_ln1318_4_fu_439_p2;
                icmp_ln1318_5_reg_691 <= icmp_ln1318_5_fu_472_p2;
                    output_V_addr_6_reg_700(3) <= zext_ln54_fu_493_p1(8 - 1 downto 0)(3);
                    output_V_addr_7_reg_705(3) <= zext_ln55_fu_503_p1(8 - 1 downto 0)(3);
                trunc_ln717_4_reg_686 <= ret_V_4_fu_434_p2(23 downto 8);
                trunc_ln717_5_reg_695 <= ret_V_5_fu_467_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln1318_6_reg_640 <= icmp_ln1318_6_fu_320_p2;
                lhs_V_6_reg_649 <= output_V_q0;
                trunc_ln717_6_reg_644 <= ret_V_6_fu_315_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    output_V_addr_1_reg_607(3) <= zext_ln49_fu_212_p1(8 - 1 downto 0)(3);
                    output_V_addr_reg_602(3) <= zext_ln48_fu_201_p1(8 - 1 downto 0)(3);
                    p_load_reg_592(3) <= empty_fu_66(3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                ret_V_7_reg_710 <= ret_V_7_fu_519_p2;
            end if;
        end if;
    end process;
    p_load_reg_592(2 downto 0) <= "000";
    output_V_addr_reg_602(2 downto 0) <= "000";
    output_V_addr_reg_602(7 downto 4) <= "0000";
    output_V_addr_1_reg_607(2 downto 0) <= "001";
    output_V_addr_1_reg_607(7 downto 4) <= "0000";
    output_V_addr_2_reg_630(2 downto 0) <= "010";
    output_V_addr_2_reg_630(7 downto 4) <= "0000";
    output_V_addr_3_reg_635(2 downto 0) <= "011";
    output_V_addr_3_reg_635(7 downto 4) <= "0000";
    output_V_addr_4_reg_672(2 downto 0) <= "100";
    output_V_addr_4_reg_672(7 downto 4) <= "0000";
    output_V_addr_5_reg_677(2 downto 0) <= "101";
    output_V_addr_5_reg_677(7 downto 4) <= "0000";
    output_V_addr_6_reg_700(2 downto 0) <= "110";
    output_V_addr_6_reg_700(7 downto 4) <= "0000";
    output_V_addr_7_reg_705(2 downto 0) <= "111";
    output_V_addr_7_reg_705(7 downto 4) <= "0000";
    empty_fu_66(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_const_logic_0;
    icmp_ln1318_1_fu_267_p2 <= "1" when (ret_V_1_fu_262_p2 = ap_const_lv32_0) else "0";
    icmp_ln1318_2_fu_353_p2 <= "1" when (ret_V_2_fu_348_p2 = ap_const_lv32_0) else "0";
    icmp_ln1318_3_fu_386_p2 <= "1" when (ret_V_3_fu_381_p2 = ap_const_lv32_0) else "0";
    icmp_ln1318_4_fu_439_p2 <= "1" when (ret_V_4_fu_434_p2 = ap_const_lv32_0) else "0";
    icmp_ln1318_5_fu_472_p2 <= "1" when (ret_V_5_fu_467_p2 = ap_const_lv32_0) else "0";
    icmp_ln1318_6_fu_320_p2 <= "1" when (ret_V_6_fu_315_p2 = ap_const_lv32_0) else "0";
    icmp_ln1318_7_fu_524_p2 <= "1" when (ret_V_7_fu_519_p2 = ap_const_lv32_0) else "0";
    icmp_ln1318_fu_234_p2 <= "1" when (ret_V_fu_229_p2 = ap_const_lv32_0) else "0";
    lhs_1_fu_217_p3 <= (output_V_q1 & ap_const_lv8_0);
    lhs_3_fu_250_p3 <= (output_V_q0 & ap_const_lv8_0);
    lhs_5_fu_336_p3 <= (output_V_q1 & ap_const_lv8_0);
    lhs_7_fu_369_p3 <= (output_V_q0 & ap_const_lv8_0);
    lhs_V_1_fu_422_p3 <= (output_V_q1 & ap_const_lv8_0);
    lhs_V_3_fu_455_p3 <= (output_V_q0 & ap_const_lv8_0);
    lhs_V_5_fu_303_p3 <= (output_V_q1 & ap_const_lv8_0);
    lhs_V_7_fu_508_p3 <= (lhs_V_6_reg_649 & ap_const_lv8_0);
    or_ln49_fu_206_p2 <= (empty_fu_66 or ap_const_lv4_1);
    or_ln50_fu_283_p2 <= (p_load_reg_592 or ap_const_lv4_2);
    or_ln51_fu_293_p2 <= (p_load_reg_592 or ap_const_lv4_3);
    or_ln52_fu_402_p2 <= (p_load_reg_592 or ap_const_lv4_4);
    or_ln53_fu_412_p2 <= (p_load_reg_592 or ap_const_lv4_5);
    or_ln54_fu_488_p2 <= (p_load_reg_592 or ap_const_lv4_6);
    or_ln55_fu_498_p2 <= (p_load_reg_592 or ap_const_lv4_7);

    output_V_address0_assign_proc : process(ap_CS_fsm_state2, output_V_addr_1_reg_607, ap_CS_fsm_state3, output_V_addr_3_reg_635, ap_CS_fsm_state4, ap_CS_fsm_state5, output_V_addr_5_reg_677, ap_CS_fsm_state6, output_V_addr_7_reg_705, ap_CS_fsm_state9, zext_ln49_fu_212_p1, zext_ln51_fu_298_p1, zext_ln53_fu_417_p1, zext_ln55_fu_503_p1, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_V_address0 <= output_V_addr_7_reg_705;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_V_address0 <= output_V_addr_5_reg_677;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_V_address0 <= output_V_addr_3_reg_635;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_address0 <= zext_ln55_fu_503_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_address0 <= zext_ln53_fu_417_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_V_address0 <= output_V_addr_1_reg_607;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_address0 <= zext_ln51_fu_298_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_V_address0 <= zext_ln49_fu_212_p1(8 - 1 downto 0);
        else 
            output_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    output_V_address1_assign_proc : process(ap_CS_fsm_state2, output_V_addr_reg_602, ap_CS_fsm_state3, output_V_addr_2_reg_630, ap_CS_fsm_state4, ap_CS_fsm_state5, output_V_addr_4_reg_672, ap_CS_fsm_state6, output_V_addr_6_reg_700, ap_CS_fsm_state9, zext_ln48_fu_201_p1, zext_ln50_fu_288_p1, zext_ln52_fu_407_p1, zext_ln54_fu_493_p1, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_V_address1 <= output_V_addr_6_reg_700;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_V_address1 <= output_V_addr_4_reg_672;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_V_address1 <= output_V_addr_2_reg_630;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_address1 <= zext_ln54_fu_493_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_address1 <= zext_ln52_fu_407_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_V_address1 <= output_V_addr_reg_602;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_address1 <= zext_ln50_fu_288_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_V_address1 <= zext_ln48_fu_201_p1(8 - 1 downto 0);
        else 
            output_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    output_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_V_ce1 <= ap_const_logic_1;
        else 
            output_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_d0_assign_proc : process(trunc_ln717_1_reg_625, ap_CS_fsm_state4, trunc_ln717_3_reg_667, trunc_ln717_5_reg_695, ret_V_7_reg_710, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_d0 <= ret_V_7_reg_710(23 downto 8);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_V_d0 <= trunc_ln717_5_reg_695;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_V_d0 <= trunc_ln717_3_reg_667;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_V_d0 <= trunc_ln717_1_reg_625;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_V_d0 <= ap_const_lv16_0;
        else 
            output_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_d1_assign_proc : process(trunc_ln_reg_616, ap_CS_fsm_state4, trunc_ln717_6_reg_644, trunc_ln717_2_reg_658, trunc_ln717_4_reg_686, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_d1 <= trunc_ln717_6_reg_644;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_V_d1 <= trunc_ln717_4_reg_686;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_V_d1 <= trunc_ln717_2_reg_658;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_V_d1 <= trunc_ln_reg_616;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_V_d1 <= ap_const_lv16_0;
        else 
            output_V_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_we0_assign_proc : process(icmp_ln1318_1_reg_621, ap_CS_fsm_state4, icmp_ln1318_3_reg_663, icmp_ln1318_5_reg_691, ap_CS_fsm_state9, icmp_ln1318_7_fu_524_p2, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1318_5_reg_691 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1318_3_reg_663 = ap_const_lv1_1)) or ((icmp_ln1318_1_reg_621 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln1318_7_fu_524_p2 = ap_const_lv1_1)))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_we1_assign_proc : process(icmp_ln1318_reg_612, icmp_ln1318_6_reg_640, ap_CS_fsm_state4, icmp_ln1318_2_reg_654, icmp_ln1318_4_reg_682, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1318_4_reg_682 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1318_2_reg_654 = ap_const_lv1_1)) or ((icmp_ln1318_reg_612 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln1318_6_reg_640 = ap_const_lv1_1)))) then 
            output_V_we1 <= ap_const_logic_1;
        else 
            output_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_1_fu_262_p2 <= std_logic_vector(signed(sext_ln1245_1_fu_258_p1) + signed(rhs_1));
    ret_V_2_fu_348_p2 <= std_logic_vector(signed(sext_ln1245_2_fu_344_p1) + signed(rhs_2));
    ret_V_3_fu_381_p2 <= std_logic_vector(signed(sext_ln1245_3_fu_377_p1) + signed(rhs_3));
    ret_V_4_fu_434_p2 <= std_logic_vector(signed(sext_ln1245_4_fu_430_p1) + signed(rhs_4));
    ret_V_5_fu_467_p2 <= std_logic_vector(signed(sext_ln1245_5_fu_463_p1) + signed(rhs_5));
    ret_V_6_fu_315_p2 <= std_logic_vector(signed(sext_ln1245_6_fu_311_p1) + signed(rhs_6));
    ret_V_7_fu_519_p2 <= std_logic_vector(signed(sext_ln1245_7_fu_515_p1) + signed(rhs_7));
    ret_V_fu_229_p2 <= std_logic_vector(signed(sext_ln1245_fu_225_p1) + signed(rhs));
        sext_ln1245_1_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_3_fu_250_p3),32));

        sext_ln1245_2_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_5_fu_336_p3),32));

        sext_ln1245_3_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_7_fu_369_p3),32));

        sext_ln1245_4_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_1_fu_422_p3),32));

        sext_ln1245_5_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_3_fu_455_p3),32));

        sext_ln1245_6_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_5_fu_303_p3),32));

        sext_ln1245_7_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_7_fu_508_p3),32));

        sext_ln1245_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_1_fu_217_p3),32));

    zext_ln48_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_66),64));
    zext_ln49_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln49_fu_206_p2),64));
    zext_ln50_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln50_fu_283_p2),64));
    zext_ln51_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln51_fu_293_p2),64));
    zext_ln52_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln52_fu_402_p2),64));
    zext_ln53_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln53_fu_412_p2),64));
    zext_ln54_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_fu_488_p2),64));
    zext_ln55_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln55_fu_498_p2),64));
end behav;
