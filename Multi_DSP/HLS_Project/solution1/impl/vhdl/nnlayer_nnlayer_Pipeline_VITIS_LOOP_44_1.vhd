-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nnlayer_nnlayer_Pipeline_VITIS_LOOP_44_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    numOfOutNeurons : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_0_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_1_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_2_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_3_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_4_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_5_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_6_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_7_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_8_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_9_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_10_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_11_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_12_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_13_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_14_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_15_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_16_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_17_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_18_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_19_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_20_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_21_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_22_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_23_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_24_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_25_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_26_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_27_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_28_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_29_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_30_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_31_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_32_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_33_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_34_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_35_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_36_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_37_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_38_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_39_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_40_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_41_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_42_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_43_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_44_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_45_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_46_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_47_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_48_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_49_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_50_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_51_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_52_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_53_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_54_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_55_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_56_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_57_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_58_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_59_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_60_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_61_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_62_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZL7output_63_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sum_V_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    sum_V_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of nnlayer_nnlayer_Pipeline_VITIS_LOOP_44_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv50_1724288 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000001011100100100001010001000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv49_0 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_200 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln44_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln44_reg_857 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_857_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal t_fu_608_p66 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_reg_861 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_866 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_866_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_866_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1201_fu_772_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal trunc_ln1201_reg_872 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_4_reg_877 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_877_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1201_1_fu_807_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1201_1_reg_883 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_V_fu_178 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_V_1_fu_827_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal i_2_fu_182 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_3_fu_602_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal t_1_fu_755_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1201_fu_766_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1201_fu_766_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal sub_ln1201_fu_786_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_3_fu_791_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1201_fu_801_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1201_1_fu_816_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln712_fu_821_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component nnlayer_mux_6416_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (15 downto 0);
        din46 : IN STD_LOGIC_VECTOR (15 downto 0);
        din47 : IN STD_LOGIC_VECTOR (15 downto 0);
        din48 : IN STD_LOGIC_VECTOR (15 downto 0);
        din49 : IN STD_LOGIC_VECTOR (15 downto 0);
        din50 : IN STD_LOGIC_VECTOR (15 downto 0);
        din51 : IN STD_LOGIC_VECTOR (15 downto 0);
        din52 : IN STD_LOGIC_VECTOR (15 downto 0);
        din53 : IN STD_LOGIC_VECTOR (15 downto 0);
        din54 : IN STD_LOGIC_VECTOR (15 downto 0);
        din55 : IN STD_LOGIC_VECTOR (15 downto 0);
        din56 : IN STD_LOGIC_VECTOR (15 downto 0);
        din57 : IN STD_LOGIC_VECTOR (15 downto 0);
        din58 : IN STD_LOGIC_VECTOR (15 downto 0);
        din59 : IN STD_LOGIC_VECTOR (15 downto 0);
        din60 : IN STD_LOGIC_VECTOR (15 downto 0);
        din61 : IN STD_LOGIC_VECTOR (15 downto 0);
        din62 : IN STD_LOGIC_VECTOR (15 downto 0);
        din63 : IN STD_LOGIC_VECTOR (15 downto 0);
        din64 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_mul_24s_26ns_50_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;


    component nnlayer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_6416_16_1_1_U207 : component nnlayer_mux_6416_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 16,
        din46_WIDTH => 16,
        din47_WIDTH => 16,
        din48_WIDTH => 16,
        din49_WIDTH => 16,
        din50_WIDTH => 16,
        din51_WIDTH => 16,
        din52_WIDTH => 16,
        din53_WIDTH => 16,
        din54_WIDTH => 16,
        din55_WIDTH => 16,
        din56_WIDTH => 16,
        din57_WIDTH => 16,
        din58_WIDTH => 16,
        din59_WIDTH => 16,
        din60_WIDTH => 16,
        din61_WIDTH => 16,
        din62_WIDTH => 16,
        din63_WIDTH => 16,
        din64_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => p_ZL7output_0_load_1,
        din1 => p_ZL7output_1_load_1,
        din2 => p_ZL7output_2_load_1,
        din3 => p_ZL7output_3_load_1,
        din4 => p_ZL7output_4_load_1,
        din5 => p_ZL7output_5_load_1,
        din6 => p_ZL7output_6_load_1,
        din7 => p_ZL7output_7_load_1,
        din8 => p_ZL7output_8_load_1,
        din9 => p_ZL7output_9_load_1,
        din10 => p_ZL7output_10_load_1,
        din11 => p_ZL7output_11_load_1,
        din12 => p_ZL7output_12_load_1,
        din13 => p_ZL7output_13_load_1,
        din14 => p_ZL7output_14_load_1,
        din15 => p_ZL7output_15_load_1,
        din16 => p_ZL7output_16_load_1,
        din17 => p_ZL7output_17_load_1,
        din18 => p_ZL7output_18_load_1,
        din19 => p_ZL7output_19_load_1,
        din20 => p_ZL7output_20_load_1,
        din21 => p_ZL7output_21_load_1,
        din22 => p_ZL7output_22_load_1,
        din23 => p_ZL7output_23_load_1,
        din24 => p_ZL7output_24_load_1,
        din25 => p_ZL7output_25_load_1,
        din26 => p_ZL7output_26_load_1,
        din27 => p_ZL7output_27_load_1,
        din28 => p_ZL7output_28_load_1,
        din29 => p_ZL7output_29_load_1,
        din30 => p_ZL7output_30_load_1,
        din31 => p_ZL7output_31_load_1,
        din32 => p_ZL7output_32_load_1,
        din33 => p_ZL7output_33_load_1,
        din34 => p_ZL7output_34_load_1,
        din35 => p_ZL7output_35_load_1,
        din36 => p_ZL7output_36_load_1,
        din37 => p_ZL7output_37_load_1,
        din38 => p_ZL7output_38_load_1,
        din39 => p_ZL7output_39_load_1,
        din40 => p_ZL7output_40_load_1,
        din41 => p_ZL7output_41_load_1,
        din42 => p_ZL7output_42_load_1,
        din43 => p_ZL7output_43_load_1,
        din44 => p_ZL7output_44_load_1,
        din45 => p_ZL7output_45_load_1,
        din46 => p_ZL7output_46_load_1,
        din47 => p_ZL7output_47_load_1,
        din48 => p_ZL7output_48_load_1,
        din49 => p_ZL7output_49_load_1,
        din50 => p_ZL7output_50_load_1,
        din51 => p_ZL7output_51_load_1,
        din52 => p_ZL7output_52_load_1,
        din53 => p_ZL7output_53_load_1,
        din54 => p_ZL7output_54_load_1,
        din55 => p_ZL7output_55_load_1,
        din56 => p_ZL7output_56_load_1,
        din57 => p_ZL7output_57_load_1,
        din58 => p_ZL7output_58_load_1,
        din59 => p_ZL7output_59_load_1,
        din60 => p_ZL7output_60_load_1,
        din61 => p_ZL7output_61_load_1,
        din62 => p_ZL7output_62_load_1,
        din63 => p_ZL7output_63_load_1,
        din64 => ap_sig_allocacmp_i,
        dout => t_fu_608_p66);

    mul_24s_26ns_50_1_1_U208 : component nnlayer_mul_24s_26ns_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 26,
        dout_WIDTH => 50)
    port map (
        din0 => t_1_fu_755_p3,
        din1 => mul_ln1201_fu_766_p1,
        dout => mul_ln1201_fu_766_p2);

    flow_control_loop_pipe_sequential_init_U : component nnlayer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_2_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln44_fu_596_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_2_fu_182 <= i_3_fu_602_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_2_fu_182 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    sum_V_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    sum_V_fu_178 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    sum_V_fu_178 <= sum_V_1_fu_827_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln44_reg_857 <= icmp_ln44_fu_596_p2;
                icmp_ln44_reg_857_pp0_iter1_reg <= icmp_ln44_reg_857;
                tmp_4_reg_877 <= mul_ln1201_fu_766_p2(47 downto 32);
                tmp_reg_866_pp0_iter1_reg <= tmp_reg_866;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_866_pp0_iter1_reg = ap_const_lv1_1))) then
                sub_ln1201_1_reg_883 <= sub_ln1201_1_fu_807_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_596_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                t_reg_861 <= t_fu_608_p66;
                tmp_reg_866 <= t_fu_608_p66(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                tmp_4_reg_877_pp0_iter2_reg <= tmp_4_reg_877;
                tmp_reg_866_pp0_iter2_reg <= tmp_reg_866_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_866 = ap_const_lv1_1))) then
                trunc_ln1201_reg_872 <= trunc_ln1201_fu_772_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln44_fu_596_p2)
    begin
        if (((icmp_ln44_fu_596_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_2_fu_182)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_i <= i_2_fu_182;
        end if; 
    end process;

    i_3_fu_602_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv16_1));
    icmp_ln44_fu_596_p2 <= "1" when (ap_sig_allocacmp_i = numOfOutNeurons) else "0";
    mul_ln1201_fu_766_p1 <= ap_const_lv50_1724288(26 - 1 downto 0);
    select_ln1201_1_fu_816_p3 <= 
        sub_ln1201_1_reg_883 when (tmp_reg_866_pp0_iter2_reg(0) = '1') else 
        tmp_4_reg_877_pp0_iter2_reg;
    select_ln1201_fu_801_p3 <= 
        tmp_3_fu_791_p4 when (tmp_reg_866_pp0_iter1_reg(0) = '1') else 
        tmp_4_reg_877;
    sub_ln1201_1_fu_807_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(select_ln1201_fu_801_p3));
    sub_ln1201_fu_786_p2 <= std_logic_vector(unsigned(ap_const_lv49_0) - unsigned(trunc_ln1201_reg_872));
    sum_V_1_fu_827_p2 <= std_logic_vector(unsigned(xor_ln712_fu_821_p2) + unsigned(sum_V_fu_178));
    sum_V_out <= sum_V_fu_178;

    sum_V_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln44_reg_857_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln44_reg_857_pp0_iter1_reg = ap_const_lv1_1))) then 
            sum_V_out_ap_vld <= ap_const_logic_1;
        else 
            sum_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    t_1_fu_755_p3 <= (t_reg_861 & ap_const_lv8_0);
    tmp_3_fu_791_p4 <= sub_ln1201_fu_786_p2(47 downto 32);
    trunc_ln1201_fu_772_p1 <= mul_ln1201_fu_766_p2(49 - 1 downto 0);
    xor_ln712_fu_821_p2 <= (select_ln1201_1_fu_816_p3 xor ap_const_lv16_200);
end behav;
