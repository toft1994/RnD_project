-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nnlayer_compute_add_Pipeline_execute is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in1_stream_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    in1_stream_empty_n : IN STD_LOGIC;
    in1_stream_read : OUT STD_LOGIC;
    in2_stream_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    in2_stream_empty_n : IN STD_LOGIC;
    in2_stream_read : OUT STD_LOGIC;
    out_stream_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    out_stream_full_n : IN STD_LOGIC;
    out_stream_write : OUT STD_LOGIC;
    vSize_loc_load : IN STD_LOGIC_VECTOR (28 downto 0) );
end;


architecture behav of nnlayer_compute_add_Pipeline_execute is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln92_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in1_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal in2_stream_blk_n : STD_LOGIC;
    signal out_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln189_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_reg_600 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_1_fu_478_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_1_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_2_fu_484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_2_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_3_fu_490_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_3_reg_615 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_4_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_4_reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_5_fu_502_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_5_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_6_fu_508_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_6_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_7_fu_514_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_7_reg_635 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_8_fu_520_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_8_reg_640 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_9_fu_526_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_9_reg_645 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_10_fu_532_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_10_reg_650 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_11_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_11_reg_655 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_12_fu_544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_12_reg_660 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_13_fu_550_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_13_reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_14_fu_556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_14_reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_15_fu_562_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_15_reg_675 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_106 : STD_LOGIC_VECTOR (27 downto 0);
    signal i_1_fu_153_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal i_cast_fu_143_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln144_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln264_fu_318_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln144_1_fu_168_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln264_1_fu_322_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln144_2_fu_178_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln264_2_fu_332_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln144_3_fu_188_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln264_3_fu_342_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln144_4_fu_198_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln264_4_fu_352_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln144_5_fu_208_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln264_5_fu_362_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln144_6_fu_218_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln264_6_fu_372_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln144_7_fu_228_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln264_7_fu_382_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln144_8_fu_238_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln264_8_fu_392_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln144_9_fu_248_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln264_9_fu_402_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln144_s_fu_258_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln264_s_fu_412_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln144_10_fu_268_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln264_10_fu_422_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln144_11_fu_278_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln264_11_fu_432_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln144_12_fu_288_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln264_12_fu_442_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln144_13_fu_298_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln264_13_fu_452_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln144_14_fu_308_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln264_14_fu_462_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component nnlayer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component nnlayer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln92_fu_147_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_106 <= i_1_fu_153_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_106 <= ap_const_lv28_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln189_10_reg_650 <= add_ln189_10_fu_532_p2;
                add_ln189_11_reg_655 <= add_ln189_11_fu_538_p2;
                add_ln189_12_reg_660 <= add_ln189_12_fu_544_p2;
                add_ln189_13_reg_665 <= add_ln189_13_fu_550_p2;
                add_ln189_14_reg_670 <= add_ln189_14_fu_556_p2;
                add_ln189_15_reg_675 <= add_ln189_15_fu_562_p2;
                add_ln189_1_reg_605 <= add_ln189_1_fu_478_p2;
                add_ln189_2_reg_610 <= add_ln189_2_fu_484_p2;
                add_ln189_3_reg_615 <= add_ln189_3_fu_490_p2;
                add_ln189_4_reg_620 <= add_ln189_4_fu_496_p2;
                add_ln189_5_reg_625 <= add_ln189_5_fu_502_p2;
                add_ln189_6_reg_630 <= add_ln189_6_fu_508_p2;
                add_ln189_7_reg_635 <= add_ln189_7_fu_514_p2;
                add_ln189_8_reg_640 <= add_ln189_8_fu_520_p2;
                add_ln189_9_reg_645 <= add_ln189_9_fu_526_p2;
                add_ln189_reg_600 <= add_ln189_fu_472_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln189_10_fu_532_p2 <= std_logic_vector(unsigned(trunc_ln144_s_fu_258_p4) + unsigned(trunc_ln264_s_fu_412_p4));
    add_ln189_11_fu_538_p2 <= std_logic_vector(unsigned(trunc_ln144_10_fu_268_p4) + unsigned(trunc_ln264_10_fu_422_p4));
    add_ln189_12_fu_544_p2 <= std_logic_vector(unsigned(trunc_ln144_11_fu_278_p4) + unsigned(trunc_ln264_11_fu_432_p4));
    add_ln189_13_fu_550_p2 <= std_logic_vector(unsigned(trunc_ln144_12_fu_288_p4) + unsigned(trunc_ln264_12_fu_442_p4));
    add_ln189_14_fu_556_p2 <= std_logic_vector(unsigned(trunc_ln144_13_fu_298_p4) + unsigned(trunc_ln264_13_fu_452_p4));
    add_ln189_15_fu_562_p2 <= std_logic_vector(unsigned(trunc_ln144_14_fu_308_p4) + unsigned(trunc_ln264_14_fu_462_p4));
    add_ln189_1_fu_478_p2 <= std_logic_vector(unsigned(trunc_ln144_1_fu_168_p4) + unsigned(trunc_ln264_1_fu_322_p4));
    add_ln189_2_fu_484_p2 <= std_logic_vector(unsigned(trunc_ln144_2_fu_178_p4) + unsigned(trunc_ln264_2_fu_332_p4));
    add_ln189_3_fu_490_p2 <= std_logic_vector(unsigned(trunc_ln144_3_fu_188_p4) + unsigned(trunc_ln264_3_fu_342_p4));
    add_ln189_4_fu_496_p2 <= std_logic_vector(unsigned(trunc_ln144_4_fu_198_p4) + unsigned(trunc_ln264_4_fu_352_p4));
    add_ln189_5_fu_502_p2 <= std_logic_vector(unsigned(trunc_ln144_5_fu_208_p4) + unsigned(trunc_ln264_5_fu_362_p4));
    add_ln189_6_fu_508_p2 <= std_logic_vector(unsigned(trunc_ln144_6_fu_218_p4) + unsigned(trunc_ln264_6_fu_372_p4));
    add_ln189_7_fu_514_p2 <= std_logic_vector(unsigned(trunc_ln144_7_fu_228_p4) + unsigned(trunc_ln264_7_fu_382_p4));
    add_ln189_8_fu_520_p2 <= std_logic_vector(unsigned(trunc_ln144_8_fu_238_p4) + unsigned(trunc_ln264_8_fu_392_p4));
    add_ln189_9_fu_526_p2 <= std_logic_vector(unsigned(trunc_ln144_9_fu_248_p4) + unsigned(trunc_ln264_9_fu_402_p4));
    add_ln189_fu_472_p2 <= std_logic_vector(unsigned(trunc_ln144_fu_164_p1) + unsigned(trunc_ln264_fu_318_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, in1_stream_empty_n, in2_stream_empty_n, out_stream_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((out_stream_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((in2_stream_empty_n = ap_const_logic_0) or (in1_stream_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, in1_stream_empty_n, in2_stream_empty_n, out_stream_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((out_stream_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((in2_stream_empty_n = ap_const_logic_0) or (in1_stream_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, in1_stream_empty_n, in2_stream_empty_n, out_stream_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((out_stream_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((in2_stream_empty_n = ap_const_logic_0) or (in1_stream_empty_n = ap_const_logic_0))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(in1_stream_empty_n, in2_stream_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((in2_stream_empty_n = ap_const_logic_0) or (in1_stream_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(out_stream_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (out_stream_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln92_fu_147_p2)
    begin
        if (((icmp_ln92_fu_147_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_106, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv28_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_106;
        end if; 
    end process;

    i_1_fu_153_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv28_1));
    i_cast_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_load),29));
    icmp_ln92_fu_147_p2 <= "1" when (signed(i_cast_fu_143_p1) < signed(vSize_loc_load)) else "0";

    in1_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in1_stream_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in1_stream_blk_n <= in1_stream_empty_n;
        else 
            in1_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in1_stream_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in1_stream_read <= ap_const_logic_1;
        else 
            in1_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    in2_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in2_stream_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in2_stream_blk_n <= in2_stream_empty_n;
        else 
            in2_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in2_stream_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in2_stream_read <= ap_const_logic_1;
        else 
            in2_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    out_stream_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, out_stream_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_stream_blk_n <= out_stream_full_n;
        else 
            out_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_din <= (((((((((((((((add_ln189_15_reg_675 & add_ln189_14_reg_670) & add_ln189_13_reg_665) & add_ln189_12_reg_660) & add_ln189_11_reg_655) & add_ln189_10_reg_650) & add_ln189_9_reg_645) & add_ln189_8_reg_640) & add_ln189_7_reg_635) & add_ln189_6_reg_630) & add_ln189_5_reg_625) & add_ln189_4_reg_620) & add_ln189_3_reg_615) & add_ln189_2_reg_610) & add_ln189_1_reg_605) & add_ln189_reg_600);

    out_stream_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_stream_write <= ap_const_logic_1;
        else 
            out_stream_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln144_10_fu_268_p4 <= in2_stream_dout(383 downto 352);
    trunc_ln144_11_fu_278_p4 <= in2_stream_dout(415 downto 384);
    trunc_ln144_12_fu_288_p4 <= in2_stream_dout(447 downto 416);
    trunc_ln144_13_fu_298_p4 <= in2_stream_dout(479 downto 448);
    trunc_ln144_14_fu_308_p4 <= in2_stream_dout(511 downto 480);
    trunc_ln144_1_fu_168_p4 <= in2_stream_dout(63 downto 32);
    trunc_ln144_2_fu_178_p4 <= in2_stream_dout(95 downto 64);
    trunc_ln144_3_fu_188_p4 <= in2_stream_dout(127 downto 96);
    trunc_ln144_4_fu_198_p4 <= in2_stream_dout(159 downto 128);
    trunc_ln144_5_fu_208_p4 <= in2_stream_dout(191 downto 160);
    trunc_ln144_6_fu_218_p4 <= in2_stream_dout(223 downto 192);
    trunc_ln144_7_fu_228_p4 <= in2_stream_dout(255 downto 224);
    trunc_ln144_8_fu_238_p4 <= in2_stream_dout(287 downto 256);
    trunc_ln144_9_fu_248_p4 <= in2_stream_dout(319 downto 288);
    trunc_ln144_fu_164_p1 <= in2_stream_dout(32 - 1 downto 0);
    trunc_ln144_s_fu_258_p4 <= in2_stream_dout(351 downto 320);
    trunc_ln264_10_fu_422_p4 <= in1_stream_dout(383 downto 352);
    trunc_ln264_11_fu_432_p4 <= in1_stream_dout(415 downto 384);
    trunc_ln264_12_fu_442_p4 <= in1_stream_dout(447 downto 416);
    trunc_ln264_13_fu_452_p4 <= in1_stream_dout(479 downto 448);
    trunc_ln264_14_fu_462_p4 <= in1_stream_dout(511 downto 480);
    trunc_ln264_1_fu_322_p4 <= in1_stream_dout(63 downto 32);
    trunc_ln264_2_fu_332_p4 <= in1_stream_dout(95 downto 64);
    trunc_ln264_3_fu_342_p4 <= in1_stream_dout(127 downto 96);
    trunc_ln264_4_fu_352_p4 <= in1_stream_dout(159 downto 128);
    trunc_ln264_5_fu_362_p4 <= in1_stream_dout(191 downto 160);
    trunc_ln264_6_fu_372_p4 <= in1_stream_dout(223 downto 192);
    trunc_ln264_7_fu_382_p4 <= in1_stream_dout(255 downto 224);
    trunc_ln264_8_fu_392_p4 <= in1_stream_dout(287 downto 256);
    trunc_ln264_9_fu_402_p4 <= in1_stream_dout(319 downto 288);
    trunc_ln264_fu_318_p1 <= in1_stream_dout(32 - 1 downto 0);
    trunc_ln264_s_fu_412_p4 <= in1_stream_dout(351 downto 320);
end behav;
