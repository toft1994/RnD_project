// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nnlayer_nnlayer_Pipeline_VITIS_LOOP_33_1_VITIS_LOOP_35_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weights_address0,
        weights_ce0,
        weights_q0,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        numOfInNeurons,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] weights_address0;
output   weights_ce0;
input  [15:0] weights_q0;
output  [7:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
input  [15:0] numOfInNeurons;
output  [7:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
input  [15:0] output_r_q0;

reg ap_idle;
reg[15:0] weights_address0;
reg weights_ce0;
reg[7:0] input_r_address0;
reg input_r_ce0;
reg[7:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln33_fu_200_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [8:0] inc13127142_load_reg_389;
wire    ap_block_pp0_stage1_11001;
wire   [15:0] add_ln40_fu_195_p2;
reg   [15:0] add_ln40_reg_405;
reg   [0:0] icmp_ln33_reg_410;
reg   [0:0] icmp_ln33_reg_410_pp0_iter1_reg;
reg   [0:0] icmp_ln33_reg_410_pp0_iter2_reg;
wire   [0:0] icmp_ln35_fu_215_p2;
reg   [0:0] icmp_ln35_reg_414;
reg   [0:0] icmp_ln35_reg_414_pp0_iter1_reg;
reg   [0:0] icmp_ln35_reg_414_pp0_iter2_reg;
reg   [7:0] output_r_addr_reg_420;
reg   [7:0] output_r_addr_reg_420_pp0_iter1_reg;
reg   [7:0] output_r_addr_reg_420_pp0_iter2_reg;
reg   [15:0] lhs_reg_455;
wire  signed [23:0] grp_fu_343_p2;
reg  signed [23:0] mul_ln35_reg_460;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_condition_exit_pp0_iter2_stage1;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] idxprom_fu_185_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] idxprom5_fu_190_p1;
wire   [63:0] zext_ln38_fu_237_p1;
wire   [63:0] idxprom_mid1_fu_285_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] idxprom5_mid1_fu_290_p1;
reg   [8:0] inc126135_fu_70;
wire   [8:0] add_ln35_fu_242_p2;
wire    ap_loop_init;
reg   [8:0] inc13127142_fu_74;
wire   [8:0] select_ln33_3_fu_295_p3;
reg   [15:0] conv12148_fu_78;
wire   [15:0] select_ln33_2_fu_229_p3;
reg   [16:0] indvar_flatten_fu_82;
wire   [16:0] add_ln33_fu_206_p2;
wire   [15:0] zext_ln33_fu_175_p1;
wire   [15:0] add_fu_179_p2;
wire   [8:0] select_ln33_fu_221_p3;
wire   [8:0] add_ln33_1_fu_271_p2;
wire   [15:0] zext_ln33_1_fu_276_p1;
wire   [15:0] add_mid1_fu_280_p2;
wire  signed [23:0] grp_fu_349_p2;
wire   [23:0] lhs_1_fu_319_p3;
wire   [23:0] select_ln33_1_fu_314_p3;
wire   [23:0] ret_V_fu_326_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to3;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

nnlayer_mul_mul_16s_16s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
mul_mul_16s_16s_24_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_r_q0),
    .din1(weights_q0),
    .ce(1'b1),
    .dout(grp_fu_343_p2)
);

nnlayer_mul_mul_16s_16s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
mul_mul_16s_16s_24_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_r_q0),
    .din1(weights_q0),
    .ce(1'b1),
    .dout(grp_fu_349_p2)
);

nnlayer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter2_stage1) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        conv12148_fu_78 <= 16'd0;
    end else if (((icmp_ln33_fu_200_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv12148_fu_78 <= select_ln33_2_fu_229_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        inc126135_fu_70 <= 9'd0;
    end else if (((icmp_ln33_fu_200_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        inc126135_fu_70 <= add_ln35_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            inc13127142_fu_74 <= 9'd0;
        end else if (((icmp_ln33_reg_410 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            inc13127142_fu_74 <= select_ln33_3_fu_295_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_82 <= 17'd0;
    end else if (((icmp_ln33_fu_200_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten_fu_82 <= add_ln33_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln40_reg_405 <= add_ln40_fu_195_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln33_reg_410 <= icmp_ln33_fu_200_p2;
        icmp_ln33_reg_410_pp0_iter1_reg <= icmp_ln33_reg_410;
        icmp_ln33_reg_410_pp0_iter2_reg <= icmp_ln33_reg_410_pp0_iter1_reg;
        icmp_ln35_reg_414_pp0_iter1_reg <= icmp_ln35_reg_414;
        icmp_ln35_reg_414_pp0_iter2_reg <= icmp_ln35_reg_414_pp0_iter1_reg;
        inc13127142_load_reg_389 <= inc13127142_fu_74;
        output_r_addr_reg_420_pp0_iter1_reg <= output_r_addr_reg_420;
        output_r_addr_reg_420_pp0_iter2_reg <= output_r_addr_reg_420_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_200_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln35_reg_414 <= icmp_ln35_fu_215_p2;
        output_r_addr_reg_420 <= zext_ln38_fu_237_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_reg_410_pp0_iter1_reg == 1'd0))) begin
        lhs_reg_455 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln35_reg_414_pp0_iter1_reg == 1'd0))) begin
        mul_ln35_reg_460 <= grp_fu_343_p2;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_200_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln33_reg_410_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = idxprom5_mid1_fu_290_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_r_address0 = idxprom5_fu_190_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_address0 = output_r_addr_reg_420_pp0_iter2_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_r_address0 = output_r_addr_reg_420;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_reg_410_pp0_iter2_reg == 1'd0))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_address0 = idxprom_mid1_fu_285_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        weights_address0 = idxprom_fu_185_p1;
    end else begin
        weights_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        weights_ce0 = 1'b1;
    end else begin
        weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_fu_179_p2 = (zext_ln33_fu_175_p1 + conv12148_fu_78);

assign add_ln33_1_fu_271_p2 = (inc13127142_load_reg_389 + 9'd1);

assign add_ln33_fu_206_p2 = (indvar_flatten_fu_82 + 17'd1);

assign add_ln35_fu_242_p2 = (select_ln33_fu_221_p3 + 9'd1);

assign add_ln40_fu_195_p2 = (conv12148_fu_78 + numOfInNeurons);

assign add_mid1_fu_280_p2 = (zext_ln33_1_fu_276_p1 + add_ln40_reg_405);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign icmp_ln33_fu_200_p2 = ((indvar_flatten_fu_82 == 17'd65536) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_215_p2 = ((inc126135_fu_70 == 9'd256) ? 1'b1 : 1'b0);

assign idxprom5_fu_190_p1 = inc13127142_fu_74;

assign idxprom5_mid1_fu_290_p1 = add_ln33_1_fu_271_p2;

assign idxprom_fu_185_p1 = add_fu_179_p2;

assign idxprom_mid1_fu_285_p1 = add_mid1_fu_280_p2;

assign lhs_1_fu_319_p3 = {{lhs_reg_455}, {8'd0}};

assign output_r_d0 = {{ret_V_fu_326_p2[23:8]}};

assign ret_V_fu_326_p2 = (lhs_1_fu_319_p3 + select_ln33_1_fu_314_p3);

assign select_ln33_1_fu_314_p3 = ((icmp_ln35_reg_414_pp0_iter2_reg[0:0] == 1'b1) ? grp_fu_349_p2 : mul_ln35_reg_460);

assign select_ln33_2_fu_229_p3 = ((icmp_ln35_fu_215_p2[0:0] == 1'b1) ? add_ln40_fu_195_p2 : conv12148_fu_78);

assign select_ln33_3_fu_295_p3 = ((icmp_ln35_reg_414[0:0] == 1'b1) ? add_ln33_1_fu_271_p2 : inc13127142_load_reg_389);

assign select_ln33_fu_221_p3 = ((icmp_ln35_fu_215_p2[0:0] == 1'b1) ? 9'd0 : inc126135_fu_70);

assign zext_ln33_1_fu_276_p1 = add_ln33_1_fu_271_p2;

assign zext_ln33_fu_175_p1 = inc13127142_fu_74;

assign zext_ln38_fu_237_p1 = select_ln33_fu_221_p3;

endmodule //nnlayer_nnlayer_Pipeline_VITIS_LOOP_33_1_VITIS_LOOP_35_2
