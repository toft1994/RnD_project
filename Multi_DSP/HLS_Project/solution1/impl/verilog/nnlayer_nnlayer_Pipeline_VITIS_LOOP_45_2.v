// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nnlayer_nnlayer_Pipeline_VITIS_LOOP_45_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        rhs,
        rhs_7,
        rhs_6,
        rhs_5,
        rhs_4,
        rhs_3,
        rhs_2,
        rhs_1
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] rhs;
input  [31:0] rhs_7;
input  [31:0] rhs_6;
input  [31:0] rhs_5;
input  [31:0] rhs_4;
input  [31:0] rhs_3;
input  [31:0] rhs_2;
input  [31:0] rhs_1;

reg ap_done;
reg ap_idle;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] output_V_address0;
reg    output_V_ce0;
reg    output_V_we0;
reg   [15:0] output_V_d0;
wire   [15:0] output_V_q0;
reg   [7:0] output_V_address1;
reg    output_V_ce1;
reg    output_V_we1;
reg   [15:0] output_V_d1;
wire   [15:0] output_V_q1;
reg   [3:0] p_load_reg_592;
wire    ap_CS_fsm_state2;
reg   [7:0] output_V_addr_reg_602;
reg   [7:0] output_V_addr_1_reg_607;
wire   [0:0] icmp_ln1318_fu_234_p2;
reg   [0:0] icmp_ln1318_reg_612;
wire    ap_CS_fsm_state3;
reg   [15:0] trunc_ln_reg_616;
wire   [0:0] icmp_ln1318_1_fu_267_p2;
reg   [0:0] icmp_ln1318_1_reg_621;
reg   [15:0] trunc_ln717_1_reg_625;
reg   [7:0] output_V_addr_2_reg_630;
reg   [7:0] output_V_addr_3_reg_635;
wire   [0:0] icmp_ln1318_6_fu_320_p2;
reg   [0:0] icmp_ln1318_6_reg_640;
wire    ap_CS_fsm_state4;
reg   [15:0] trunc_ln717_6_reg_644;
reg   [15:0] lhs_V_6_reg_649;
wire   [0:0] icmp_ln1318_2_fu_353_p2;
reg   [0:0] icmp_ln1318_2_reg_654;
wire    ap_CS_fsm_state5;
reg   [15:0] trunc_ln717_2_reg_658;
wire   [0:0] icmp_ln1318_3_fu_386_p2;
reg   [0:0] icmp_ln1318_3_reg_663;
reg   [15:0] trunc_ln717_3_reg_667;
reg   [7:0] output_V_addr_4_reg_672;
reg   [7:0] output_V_addr_5_reg_677;
wire   [0:0] icmp_ln1318_4_fu_439_p2;
reg   [0:0] icmp_ln1318_4_reg_682;
wire    ap_CS_fsm_state6;
reg   [15:0] trunc_ln717_4_reg_686;
wire   [0:0] icmp_ln1318_5_fu_472_p2;
reg   [0:0] icmp_ln1318_5_reg_691;
reg   [15:0] trunc_ln717_5_reg_695;
reg   [7:0] output_V_addr_6_reg_700;
reg   [7:0] output_V_addr_7_reg_705;
wire   [31:0] ret_V_7_fu_519_p2;
reg   [31:0] ret_V_7_reg_710;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln1318_7_fu_524_p2;
wire   [63:0] zext_ln48_fu_201_p1;
wire   [63:0] zext_ln49_fu_212_p1;
wire   [63:0] zext_ln50_fu_288_p1;
wire   [63:0] zext_ln51_fu_298_p1;
wire   [63:0] zext_ln52_fu_407_p1;
wire   [63:0] zext_ln53_fu_417_p1;
wire   [63:0] zext_ln54_fu_493_p1;
wire   [63:0] zext_ln55_fu_503_p1;
reg   [3:0] empty_fu_66;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire   [3:0] or_ln49_fu_206_p2;
wire   [23:0] lhs_1_fu_217_p3;
wire  signed [31:0] sext_ln1245_fu_225_p1;
wire   [31:0] ret_V_fu_229_p2;
wire   [23:0] lhs_3_fu_250_p3;
wire  signed [31:0] sext_ln1245_1_fu_258_p1;
wire   [31:0] ret_V_1_fu_262_p2;
wire   [3:0] or_ln50_fu_283_p2;
wire   [3:0] or_ln51_fu_293_p2;
wire   [23:0] lhs_V_5_fu_303_p3;
wire  signed [31:0] sext_ln1245_6_fu_311_p1;
wire   [31:0] ret_V_6_fu_315_p2;
wire   [23:0] lhs_5_fu_336_p3;
wire  signed [31:0] sext_ln1245_2_fu_344_p1;
wire   [31:0] ret_V_2_fu_348_p2;
wire   [23:0] lhs_7_fu_369_p3;
wire  signed [31:0] sext_ln1245_3_fu_377_p1;
wire   [31:0] ret_V_3_fu_381_p2;
wire   [3:0] or_ln52_fu_402_p2;
wire   [3:0] or_ln53_fu_412_p2;
wire   [23:0] lhs_V_1_fu_422_p3;
wire  signed [31:0] sext_ln1245_4_fu_430_p1;
wire   [31:0] ret_V_4_fu_434_p2;
wire   [23:0] lhs_V_3_fu_455_p3;
wire  signed [31:0] sext_ln1245_5_fu_463_p1;
wire   [31:0] ret_V_5_fu_467_p2;
wire   [3:0] or_ln54_fu_488_p2;
wire   [3:0] or_ln55_fu_498_p2;
wire   [23:0] lhs_V_7_fu_508_p3;
wire  signed [31:0] sext_ln1245_7_fu_515_p1;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

nnlayer_nnlayer_Pipeline_VITIS_LOOP_45_2_output_V_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
output_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_V_address0),
    .ce0(output_V_ce0),
    .we0(output_V_we0),
    .d0(output_V_d0),
    .q0(output_V_q0),
    .address1(output_V_address1),
    .ce1(output_V_ce1),
    .we1(output_V_we1),
    .d1(output_V_d1),
    .q1(output_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                empty_fu_66[3] <= 1'b0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
                empty_fu_66[3] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln1318_1_reg_621 <= icmp_ln1318_1_fu_267_p2;
        icmp_ln1318_reg_612 <= icmp_ln1318_fu_234_p2;
        output_V_addr_2_reg_630[3] <= zext_ln50_fu_288_p1[3];
        output_V_addr_3_reg_635[3] <= zext_ln51_fu_298_p1[3];
        trunc_ln717_1_reg_625 <= {{ret_V_1_fu_262_p2[23:8]}};
        trunc_ln_reg_616 <= {{ret_V_fu_229_p2[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln1318_2_reg_654 <= icmp_ln1318_2_fu_353_p2;
        icmp_ln1318_3_reg_663 <= icmp_ln1318_3_fu_386_p2;
        output_V_addr_4_reg_672[3] <= zext_ln52_fu_407_p1[3];
        output_V_addr_5_reg_677[3] <= zext_ln53_fu_417_p1[3];
        trunc_ln717_2_reg_658 <= {{ret_V_2_fu_348_p2[23:8]}};
        trunc_ln717_3_reg_667 <= {{ret_V_3_fu_381_p2[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln1318_4_reg_682 <= icmp_ln1318_4_fu_439_p2;
        icmp_ln1318_5_reg_691 <= icmp_ln1318_5_fu_472_p2;
        output_V_addr_6_reg_700[3] <= zext_ln54_fu_493_p1[3];
        output_V_addr_7_reg_705[3] <= zext_ln55_fu_503_p1[3];
        trunc_ln717_4_reg_686 <= {{ret_V_4_fu_434_p2[23:8]}};
        trunc_ln717_5_reg_695 <= {{ret_V_5_fu_467_p2[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln1318_6_reg_640 <= icmp_ln1318_6_fu_320_p2;
        lhs_V_6_reg_649 <= output_V_q0;
        trunc_ln717_6_reg_644 <= {{ret_V_6_fu_315_p2[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        output_V_addr_1_reg_607[3] <= zext_ln49_fu_212_p1[3];
        output_V_addr_reg_602[3] <= zext_ln48_fu_201_p1[3];
        p_load_reg_592[3] <= empty_fu_66[3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ret_V_7_reg_710 <= ret_V_7_fu_519_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        output_V_address0 = output_V_addr_7_reg_705;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8))) begin
        output_V_address0 = output_V_addr_5_reg_677;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        output_V_address0 = output_V_addr_3_reg_635;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_address0 = zext_ln55_fu_503_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_address0 = zext_ln53_fu_417_p1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4))) begin
        output_V_address0 = output_V_addr_1_reg_607;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_V_address0 = zext_ln51_fu_298_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_V_address0 = zext_ln49_fu_212_p1;
    end else begin
        output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        output_V_address1 = output_V_addr_6_reg_700;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8))) begin
        output_V_address1 = output_V_addr_4_reg_672;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        output_V_address1 = output_V_addr_2_reg_630;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_address1 = zext_ln54_fu_493_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_address1 = zext_ln52_fu_407_p1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4))) begin
        output_V_address1 = output_V_addr_reg_602;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_V_address1 = zext_ln50_fu_288_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_V_address1 = zext_ln48_fu_201_p1;
    end else begin
        output_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        output_V_ce1 = 1'b1;
    end else begin
        output_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_d0 = {{ret_V_7_reg_710[23:8]}};
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output_V_d0 = trunc_ln717_5_reg_695;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_V_d0 = trunc_ln717_3_reg_667;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_V_d0 = trunc_ln717_1_reg_625;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        output_V_d0 = 16'd0;
    end else begin
        output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_d1 = trunc_ln717_6_reg_644;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output_V_d1 = trunc_ln717_4_reg_686;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_V_d1 = trunc_ln717_2_reg_658;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_V_d1 = trunc_ln_reg_616;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        output_V_d1 = 16'd0;
    end else begin
        output_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln1318_5_reg_691 == 1'd1)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln1318_3_reg_663 == 1'd1)) | ((icmp_ln1318_1_reg_621 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state9) & (icmp_ln1318_7_fu_524_p2 == 1'd1)))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln1318_4_reg_682 == 1'd1)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln1318_2_reg_654 == 1'd1)) | ((icmp_ln1318_reg_612 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state9) & (icmp_ln1318_6_reg_640 == 1'd1)))) begin
        output_V_we1 = 1'b1;
    end else begin
        output_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_ready = 1'b0;

assign icmp_ln1318_1_fu_267_p2 = ((ret_V_1_fu_262_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1318_2_fu_353_p2 = ((ret_V_2_fu_348_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1318_3_fu_386_p2 = ((ret_V_3_fu_381_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1318_4_fu_439_p2 = ((ret_V_4_fu_434_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1318_5_fu_472_p2 = ((ret_V_5_fu_467_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1318_6_fu_320_p2 = ((ret_V_6_fu_315_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1318_7_fu_524_p2 = ((ret_V_7_fu_519_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1318_fu_234_p2 = ((ret_V_fu_229_p2 == 32'd0) ? 1'b1 : 1'b0);

assign lhs_1_fu_217_p3 = {{output_V_q1}, {8'd0}};

assign lhs_3_fu_250_p3 = {{output_V_q0}, {8'd0}};

assign lhs_5_fu_336_p3 = {{output_V_q1}, {8'd0}};

assign lhs_7_fu_369_p3 = {{output_V_q0}, {8'd0}};

assign lhs_V_1_fu_422_p3 = {{output_V_q1}, {8'd0}};

assign lhs_V_3_fu_455_p3 = {{output_V_q0}, {8'd0}};

assign lhs_V_5_fu_303_p3 = {{output_V_q1}, {8'd0}};

assign lhs_V_7_fu_508_p3 = {{lhs_V_6_reg_649}, {8'd0}};

assign or_ln49_fu_206_p2 = (empty_fu_66 | 4'd1);

assign or_ln50_fu_283_p2 = (p_load_reg_592 | 4'd2);

assign or_ln51_fu_293_p2 = (p_load_reg_592 | 4'd3);

assign or_ln52_fu_402_p2 = (p_load_reg_592 | 4'd4);

assign or_ln53_fu_412_p2 = (p_load_reg_592 | 4'd5);

assign or_ln54_fu_488_p2 = (p_load_reg_592 | 4'd6);

assign or_ln55_fu_498_p2 = (p_load_reg_592 | 4'd7);

assign ret_V_1_fu_262_p2 = ($signed(sext_ln1245_1_fu_258_p1) + $signed(rhs_1));

assign ret_V_2_fu_348_p2 = ($signed(sext_ln1245_2_fu_344_p1) + $signed(rhs_2));

assign ret_V_3_fu_381_p2 = ($signed(sext_ln1245_3_fu_377_p1) + $signed(rhs_3));

assign ret_V_4_fu_434_p2 = ($signed(sext_ln1245_4_fu_430_p1) + $signed(rhs_4));

assign ret_V_5_fu_467_p2 = ($signed(sext_ln1245_5_fu_463_p1) + $signed(rhs_5));

assign ret_V_6_fu_315_p2 = ($signed(sext_ln1245_6_fu_311_p1) + $signed(rhs_6));

assign ret_V_7_fu_519_p2 = ($signed(sext_ln1245_7_fu_515_p1) + $signed(rhs_7));

assign ret_V_fu_229_p2 = ($signed(sext_ln1245_fu_225_p1) + $signed(rhs));

assign sext_ln1245_1_fu_258_p1 = $signed(lhs_3_fu_250_p3);

assign sext_ln1245_2_fu_344_p1 = $signed(lhs_5_fu_336_p3);

assign sext_ln1245_3_fu_377_p1 = $signed(lhs_7_fu_369_p3);

assign sext_ln1245_4_fu_430_p1 = $signed(lhs_V_1_fu_422_p3);

assign sext_ln1245_5_fu_463_p1 = $signed(lhs_V_3_fu_455_p3);

assign sext_ln1245_6_fu_311_p1 = $signed(lhs_V_5_fu_303_p3);

assign sext_ln1245_7_fu_515_p1 = $signed(lhs_V_7_fu_508_p3);

assign sext_ln1245_fu_225_p1 = $signed(lhs_1_fu_217_p3);

assign zext_ln48_fu_201_p1 = empty_fu_66;

assign zext_ln49_fu_212_p1 = or_ln49_fu_206_p2;

assign zext_ln50_fu_288_p1 = or_ln50_fu_283_p2;

assign zext_ln51_fu_298_p1 = or_ln51_fu_293_p2;

assign zext_ln52_fu_407_p1 = or_ln52_fu_402_p2;

assign zext_ln53_fu_417_p1 = or_ln53_fu_412_p2;

assign zext_ln54_fu_493_p1 = or_ln54_fu_488_p2;

assign zext_ln55_fu_503_p1 = or_ln55_fu_498_p2;

always @ (posedge ap_clk) begin
    p_load_reg_592[2:0] <= 3'b000;
    output_V_addr_reg_602[2:0] <= 3'b000;
    output_V_addr_reg_602[7:4] <= 4'b0000;
    output_V_addr_1_reg_607[2:0] <= 3'b001;
    output_V_addr_1_reg_607[7:4] <= 4'b0000;
    output_V_addr_2_reg_630[2:0] <= 3'b010;
    output_V_addr_2_reg_630[7:4] <= 4'b0000;
    output_V_addr_3_reg_635[2:0] <= 3'b011;
    output_V_addr_3_reg_635[7:4] <= 4'b0000;
    output_V_addr_4_reg_672[2:0] <= 3'b100;
    output_V_addr_4_reg_672[7:4] <= 4'b0000;
    output_V_addr_5_reg_677[2:0] <= 3'b101;
    output_V_addr_5_reg_677[7:4] <= 4'b0000;
    output_V_addr_6_reg_700[2:0] <= 3'b110;
    output_V_addr_6_reg_700[7:4] <= 4'b0000;
    output_V_addr_7_reg_705[2:0] <= 3'b111;
    output_V_addr_7_reg_705[7:4] <= 4'b0000;
    empty_fu_66[2:0] <= 3'b000;
end

endmodule //nnlayer_nnlayer_Pipeline_VITIS_LOOP_45_2
