// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nnlayer_nnlayer_Pipeline_VITIS_LOOP_99_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weights_0_load,
        weights_1_load,
        weights_2_load,
        weights_3_load,
        weights_4_load,
        weights_5_load,
        weights_6_load,
        weights_7_load,
        weights_8_load,
        weights_9_load,
        weights_10_load,
        weights_11_load,
        weights_12_load,
        weights_13_load,
        weights_14_load,
        weights_15_load,
        sext_ln1245,
        weights_0_load_1,
        weights_1_load_1,
        weights_2_load_1,
        weights_3_load_1,
        weights_4_load_1,
        weights_5_load_1,
        weights_6_load_1,
        weights_7_load_1,
        weights_8_load_1,
        weights_9_load_1,
        weights_10_load_1,
        weights_11_load_1,
        weights_12_load_1,
        weights_13_load_1,
        weights_14_load_1,
        weights_15_load_1,
        sext_ln1245_1,
        weights_0_load_2,
        weights_1_load_2,
        weights_2_load_2,
        weights_3_load_2,
        weights_4_load_2,
        weights_5_load_2,
        weights_6_load_2,
        weights_7_load_2,
        weights_8_load_2,
        weights_9_load_2,
        weights_10_load_2,
        weights_11_load_2,
        weights_12_load_2,
        weights_13_load_2,
        weights_14_load_2,
        weights_15_load_2,
        sext_ln1245_2,
        weights_0_load_3,
        weights_1_load_3,
        weights_2_load_3,
        weights_3_load_3,
        weights_4_load_3,
        weights_5_load_3,
        weights_6_load_3,
        weights_7_load_3,
        weights_8_load_3,
        weights_9_load_3,
        weights_10_load_3,
        weights_11_load_3,
        weights_12_load_3,
        weights_13_load_3,
        weights_14_load_3,
        weights_15_load_3,
        sext_ln1245_3,
        weights_0_load_4,
        weights_1_load_4,
        weights_2_load_4,
        weights_3_load_4,
        weights_4_load_4,
        weights_5_load_4,
        weights_6_load_4,
        weights_7_load_4,
        weights_8_load_4,
        weights_9_load_4,
        weights_10_load_4,
        weights_11_load_4,
        weights_12_load_4,
        weights_13_load_4,
        weights_14_load_4,
        weights_15_load_4,
        sext_ln1245_4,
        weights_0_load_5,
        weights_1_load_5,
        weights_2_load_5,
        weights_3_load_5,
        weights_4_load_5,
        weights_5_load_5,
        weights_6_load_5,
        weights_7_load_5,
        weights_8_load_5,
        weights_9_load_5,
        weights_10_load_5,
        weights_11_load_5,
        weights_12_load_5,
        weights_13_load_5,
        weights_14_load_5,
        weights_15_load_5,
        sext_ln1245_5,
        weights_0_load_6,
        weights_1_load_6,
        weights_2_load_6,
        weights_3_load_6,
        weights_4_load_6,
        weights_5_load_6,
        weights_6_load_6,
        weights_7_load_6,
        weights_8_load_6,
        weights_9_load_6,
        weights_10_load_6,
        weights_11_load_6,
        weights_12_load_6,
        weights_13_load_6,
        weights_14_load_6,
        weights_15_load_6,
        sext_ln1245_6,
        weights_0_load_7,
        weights_1_load_7,
        weights_2_load_7,
        weights_3_load_7,
        weights_4_load_7,
        weights_5_load_7,
        weights_6_load_7,
        weights_7_load_7,
        weights_8_load_7,
        weights_9_load_7,
        weights_10_load_7,
        weights_11_load_7,
        weights_12_load_7,
        weights_13_load_7,
        weights_14_load_7,
        weights_15_load_7,
        sext_ln1245_7,
        weights_0_load_8,
        weights_1_load_8,
        weights_2_load_8,
        weights_3_load_8,
        weights_4_load_8,
        weights_5_load_8,
        weights_6_load_8,
        weights_7_load_8,
        weights_8_load_8,
        weights_9_load_8,
        weights_10_load_8,
        weights_11_load_8,
        weights_12_load_8,
        weights_13_load_8,
        weights_14_load_8,
        weights_15_load_8,
        sext_ln1245_8,
        weights_0_load_9,
        weights_1_load_9,
        weights_2_load_9,
        weights_3_load_9,
        weights_4_load_9,
        weights_5_load_9,
        weights_6_load_9,
        weights_7_load_9,
        weights_8_load_9,
        weights_9_load_9,
        weights_10_load_9,
        weights_11_load_9,
        weights_12_load_9,
        weights_13_load_9,
        weights_14_load_9,
        weights_15_load_9,
        sext_ln1245_9,
        weights_0_load_10,
        weights_1_load_10,
        weights_2_load_10,
        weights_3_load_10,
        weights_4_load_10,
        weights_5_load_10,
        weights_6_load_10,
        weights_7_load_10,
        weights_8_load_10,
        weights_9_load_10,
        weights_10_load_10,
        weights_11_load_10,
        weights_12_load_10,
        weights_13_load_10,
        weights_14_load_10,
        weights_15_load_10,
        sext_ln1245_10,
        weights_0_load_11,
        weights_1_load_11,
        weights_2_load_11,
        weights_3_load_11,
        weights_4_load_11,
        weights_5_load_11,
        weights_6_load_11,
        weights_7_load_11,
        weights_8_load_11,
        weights_9_load_11,
        weights_10_load_11,
        weights_11_load_11,
        weights_12_load_11,
        weights_13_load_11,
        weights_14_load_11,
        weights_15_load_11,
        sext_ln1245_11,
        weights_0_load_12,
        weights_1_load_12,
        weights_2_load_12,
        weights_3_load_12,
        weights_4_load_12,
        weights_5_load_12,
        weights_6_load_12,
        weights_7_load_12,
        weights_8_load_12,
        weights_9_load_12,
        weights_10_load_12,
        weights_11_load_12,
        weights_12_load_12,
        weights_13_load_12,
        weights_14_load_12,
        weights_15_load_12,
        sext_ln1245_12,
        weights_0_load_13,
        weights_1_load_13,
        weights_2_load_13,
        weights_3_load_13,
        weights_4_load_13,
        weights_5_load_13,
        weights_6_load_13,
        weights_7_load_13,
        weights_8_load_13,
        weights_9_load_13,
        weights_10_load_13,
        weights_11_load_13,
        weights_12_load_13,
        weights_13_load_13,
        weights_14_load_13,
        weights_15_load_13,
        sext_ln1245_13,
        weights_0_load_14,
        weights_1_load_14,
        weights_2_load_14,
        weights_3_load_14,
        weights_4_load_14,
        weights_5_load_14,
        weights_6_load_14,
        weights_7_load_14,
        weights_8_load_14,
        weights_9_load_14,
        weights_10_load_14,
        weights_11_load_14,
        weights_12_load_14,
        weights_13_load_14,
        weights_14_load_14,
        weights_15_load_14,
        sext_ln1245_14,
        weights_0_load_15,
        weights_1_load_15,
        weights_2_load_15,
        weights_3_load_15,
        weights_4_load_15,
        weights_5_load_15,
        weights_6_load_15,
        weights_7_load_15,
        weights_8_load_15,
        weights_9_load_15,
        weights_10_load_15,
        weights_11_load_15,
        weights_12_load_15,
        weights_13_load_15,
        weights_14_load_15,
        weights_15_load_15,
        sext_ln1245_15,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        output_V_address1,
        output_V_ce1,
        output_V_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] weights_0_load;
input  [15:0] weights_1_load;
input  [15:0] weights_2_load;
input  [15:0] weights_3_load;
input  [15:0] weights_4_load;
input  [15:0] weights_5_load;
input  [15:0] weights_6_load;
input  [15:0] weights_7_load;
input  [15:0] weights_8_load;
input  [15:0] weights_9_load;
input  [15:0] weights_10_load;
input  [15:0] weights_11_load;
input  [15:0] weights_12_load;
input  [15:0] weights_13_load;
input  [15:0] weights_14_load;
input  [15:0] weights_15_load;
input  [15:0] sext_ln1245;
input  [15:0] weights_0_load_1;
input  [15:0] weights_1_load_1;
input  [15:0] weights_2_load_1;
input  [15:0] weights_3_load_1;
input  [15:0] weights_4_load_1;
input  [15:0] weights_5_load_1;
input  [15:0] weights_6_load_1;
input  [15:0] weights_7_load_1;
input  [15:0] weights_8_load_1;
input  [15:0] weights_9_load_1;
input  [15:0] weights_10_load_1;
input  [15:0] weights_11_load_1;
input  [15:0] weights_12_load_1;
input  [15:0] weights_13_load_1;
input  [15:0] weights_14_load_1;
input  [15:0] weights_15_load_1;
input  [15:0] sext_ln1245_1;
input  [15:0] weights_0_load_2;
input  [15:0] weights_1_load_2;
input  [15:0] weights_2_load_2;
input  [15:0] weights_3_load_2;
input  [15:0] weights_4_load_2;
input  [15:0] weights_5_load_2;
input  [15:0] weights_6_load_2;
input  [15:0] weights_7_load_2;
input  [15:0] weights_8_load_2;
input  [15:0] weights_9_load_2;
input  [15:0] weights_10_load_2;
input  [15:0] weights_11_load_2;
input  [15:0] weights_12_load_2;
input  [15:0] weights_13_load_2;
input  [15:0] weights_14_load_2;
input  [15:0] weights_15_load_2;
input  [15:0] sext_ln1245_2;
input  [15:0] weights_0_load_3;
input  [15:0] weights_1_load_3;
input  [15:0] weights_2_load_3;
input  [15:0] weights_3_load_3;
input  [15:0] weights_4_load_3;
input  [15:0] weights_5_load_3;
input  [15:0] weights_6_load_3;
input  [15:0] weights_7_load_3;
input  [15:0] weights_8_load_3;
input  [15:0] weights_9_load_3;
input  [15:0] weights_10_load_3;
input  [15:0] weights_11_load_3;
input  [15:0] weights_12_load_3;
input  [15:0] weights_13_load_3;
input  [15:0] weights_14_load_3;
input  [15:0] weights_15_load_3;
input  [15:0] sext_ln1245_3;
input  [15:0] weights_0_load_4;
input  [15:0] weights_1_load_4;
input  [15:0] weights_2_load_4;
input  [15:0] weights_3_load_4;
input  [15:0] weights_4_load_4;
input  [15:0] weights_5_load_4;
input  [15:0] weights_6_load_4;
input  [15:0] weights_7_load_4;
input  [15:0] weights_8_load_4;
input  [15:0] weights_9_load_4;
input  [15:0] weights_10_load_4;
input  [15:0] weights_11_load_4;
input  [15:0] weights_12_load_4;
input  [15:0] weights_13_load_4;
input  [15:0] weights_14_load_4;
input  [15:0] weights_15_load_4;
input  [15:0] sext_ln1245_4;
input  [15:0] weights_0_load_5;
input  [15:0] weights_1_load_5;
input  [15:0] weights_2_load_5;
input  [15:0] weights_3_load_5;
input  [15:0] weights_4_load_5;
input  [15:0] weights_5_load_5;
input  [15:0] weights_6_load_5;
input  [15:0] weights_7_load_5;
input  [15:0] weights_8_load_5;
input  [15:0] weights_9_load_5;
input  [15:0] weights_10_load_5;
input  [15:0] weights_11_load_5;
input  [15:0] weights_12_load_5;
input  [15:0] weights_13_load_5;
input  [15:0] weights_14_load_5;
input  [15:0] weights_15_load_5;
input  [15:0] sext_ln1245_5;
input  [15:0] weights_0_load_6;
input  [15:0] weights_1_load_6;
input  [15:0] weights_2_load_6;
input  [15:0] weights_3_load_6;
input  [15:0] weights_4_load_6;
input  [15:0] weights_5_load_6;
input  [15:0] weights_6_load_6;
input  [15:0] weights_7_load_6;
input  [15:0] weights_8_load_6;
input  [15:0] weights_9_load_6;
input  [15:0] weights_10_load_6;
input  [15:0] weights_11_load_6;
input  [15:0] weights_12_load_6;
input  [15:0] weights_13_load_6;
input  [15:0] weights_14_load_6;
input  [15:0] weights_15_load_6;
input  [15:0] sext_ln1245_6;
input  [15:0] weights_0_load_7;
input  [15:0] weights_1_load_7;
input  [15:0] weights_2_load_7;
input  [15:0] weights_3_load_7;
input  [15:0] weights_4_load_7;
input  [15:0] weights_5_load_7;
input  [15:0] weights_6_load_7;
input  [15:0] weights_7_load_7;
input  [15:0] weights_8_load_7;
input  [15:0] weights_9_load_7;
input  [15:0] weights_10_load_7;
input  [15:0] weights_11_load_7;
input  [15:0] weights_12_load_7;
input  [15:0] weights_13_load_7;
input  [15:0] weights_14_load_7;
input  [15:0] weights_15_load_7;
input  [15:0] sext_ln1245_7;
input  [15:0] weights_0_load_8;
input  [15:0] weights_1_load_8;
input  [15:0] weights_2_load_8;
input  [15:0] weights_3_load_8;
input  [15:0] weights_4_load_8;
input  [15:0] weights_5_load_8;
input  [15:0] weights_6_load_8;
input  [15:0] weights_7_load_8;
input  [15:0] weights_8_load_8;
input  [15:0] weights_9_load_8;
input  [15:0] weights_10_load_8;
input  [15:0] weights_11_load_8;
input  [15:0] weights_12_load_8;
input  [15:0] weights_13_load_8;
input  [15:0] weights_14_load_8;
input  [15:0] weights_15_load_8;
input  [15:0] sext_ln1245_8;
input  [15:0] weights_0_load_9;
input  [15:0] weights_1_load_9;
input  [15:0] weights_2_load_9;
input  [15:0] weights_3_load_9;
input  [15:0] weights_4_load_9;
input  [15:0] weights_5_load_9;
input  [15:0] weights_6_load_9;
input  [15:0] weights_7_load_9;
input  [15:0] weights_8_load_9;
input  [15:0] weights_9_load_9;
input  [15:0] weights_10_load_9;
input  [15:0] weights_11_load_9;
input  [15:0] weights_12_load_9;
input  [15:0] weights_13_load_9;
input  [15:0] weights_14_load_9;
input  [15:0] weights_15_load_9;
input  [15:0] sext_ln1245_9;
input  [15:0] weights_0_load_10;
input  [15:0] weights_1_load_10;
input  [15:0] weights_2_load_10;
input  [15:0] weights_3_load_10;
input  [15:0] weights_4_load_10;
input  [15:0] weights_5_load_10;
input  [15:0] weights_6_load_10;
input  [15:0] weights_7_load_10;
input  [15:0] weights_8_load_10;
input  [15:0] weights_9_load_10;
input  [15:0] weights_10_load_10;
input  [15:0] weights_11_load_10;
input  [15:0] weights_12_load_10;
input  [15:0] weights_13_load_10;
input  [15:0] weights_14_load_10;
input  [15:0] weights_15_load_10;
input  [15:0] sext_ln1245_10;
input  [15:0] weights_0_load_11;
input  [15:0] weights_1_load_11;
input  [15:0] weights_2_load_11;
input  [15:0] weights_3_load_11;
input  [15:0] weights_4_load_11;
input  [15:0] weights_5_load_11;
input  [15:0] weights_6_load_11;
input  [15:0] weights_7_load_11;
input  [15:0] weights_8_load_11;
input  [15:0] weights_9_load_11;
input  [15:0] weights_10_load_11;
input  [15:0] weights_11_load_11;
input  [15:0] weights_12_load_11;
input  [15:0] weights_13_load_11;
input  [15:0] weights_14_load_11;
input  [15:0] weights_15_load_11;
input  [15:0] sext_ln1245_11;
input  [15:0] weights_0_load_12;
input  [15:0] weights_1_load_12;
input  [15:0] weights_2_load_12;
input  [15:0] weights_3_load_12;
input  [15:0] weights_4_load_12;
input  [15:0] weights_5_load_12;
input  [15:0] weights_6_load_12;
input  [15:0] weights_7_load_12;
input  [15:0] weights_8_load_12;
input  [15:0] weights_9_load_12;
input  [15:0] weights_10_load_12;
input  [15:0] weights_11_load_12;
input  [15:0] weights_12_load_12;
input  [15:0] weights_13_load_12;
input  [15:0] weights_14_load_12;
input  [15:0] weights_15_load_12;
input  [15:0] sext_ln1245_12;
input  [15:0] weights_0_load_13;
input  [15:0] weights_1_load_13;
input  [15:0] weights_2_load_13;
input  [15:0] weights_3_load_13;
input  [15:0] weights_4_load_13;
input  [15:0] weights_5_load_13;
input  [15:0] weights_6_load_13;
input  [15:0] weights_7_load_13;
input  [15:0] weights_8_load_13;
input  [15:0] weights_9_load_13;
input  [15:0] weights_10_load_13;
input  [15:0] weights_11_load_13;
input  [15:0] weights_12_load_13;
input  [15:0] weights_13_load_13;
input  [15:0] weights_14_load_13;
input  [15:0] weights_15_load_13;
input  [15:0] sext_ln1245_13;
input  [15:0] weights_0_load_14;
input  [15:0] weights_1_load_14;
input  [15:0] weights_2_load_14;
input  [15:0] weights_3_load_14;
input  [15:0] weights_4_load_14;
input  [15:0] weights_5_load_14;
input  [15:0] weights_6_load_14;
input  [15:0] weights_7_load_14;
input  [15:0] weights_8_load_14;
input  [15:0] weights_9_load_14;
input  [15:0] weights_10_load_14;
input  [15:0] weights_11_load_14;
input  [15:0] weights_12_load_14;
input  [15:0] weights_13_load_14;
input  [15:0] weights_14_load_14;
input  [15:0] weights_15_load_14;
input  [15:0] sext_ln1245_14;
input  [15:0] weights_0_load_15;
input  [15:0] weights_1_load_15;
input  [15:0] weights_2_load_15;
input  [15:0] weights_3_load_15;
input  [15:0] weights_4_load_15;
input  [15:0] weights_5_load_15;
input  [15:0] weights_6_load_15;
input  [15:0] weights_7_load_15;
input  [15:0] weights_8_load_15;
input  [15:0] weights_9_load_15;
input  [15:0] weights_10_load_15;
input  [15:0] weights_11_load_15;
input  [15:0] weights_12_load_15;
input  [15:0] weights_13_load_15;
input  [15:0] weights_14_load_15;
input  [15:0] weights_15_load_15;
input  [15:0] sext_ln1245_15;
output  [3:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [15:0] output_V_d0;
output  [3:0] output_V_address1;
output   output_V_ce1;
input  [15:0] output_V_q1;

reg ap_idle;
reg output_V_ce0;
reg output_V_we0;
reg output_V_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln99_fu_2310_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [23:0] sext_ln1245_15_cast_fu_2238_p1;
reg  signed [23:0] sext_ln1245_15_cast_reg_4361;
wire  signed [23:0] sext_ln1245_14_cast_fu_2242_p1;
reg  signed [23:0] sext_ln1245_14_cast_reg_4366;
wire  signed [23:0] sext_ln1245_13_cast_fu_2246_p1;
reg  signed [23:0] sext_ln1245_13_cast_reg_4371;
wire  signed [23:0] sext_ln1245_12_cast_fu_2250_p1;
reg  signed [23:0] sext_ln1245_12_cast_reg_4376;
wire  signed [23:0] sext_ln1245_11_cast_fu_2254_p1;
reg  signed [23:0] sext_ln1245_11_cast_reg_4381;
wire  signed [23:0] sext_ln1245_10_cast_fu_2258_p1;
reg  signed [23:0] sext_ln1245_10_cast_reg_4386;
wire  signed [23:0] sext_ln1245_9_cast_fu_2262_p1;
reg  signed [23:0] sext_ln1245_9_cast_reg_4391;
wire  signed [23:0] sext_ln1245_8_cast_fu_2266_p1;
reg  signed [23:0] sext_ln1245_8_cast_reg_4396;
wire  signed [23:0] sext_ln1245_7_cast_fu_2270_p1;
reg  signed [23:0] sext_ln1245_7_cast_reg_4401;
wire  signed [23:0] sext_ln1245_6_cast_fu_2274_p1;
reg  signed [23:0] sext_ln1245_6_cast_reg_4406;
wire  signed [23:0] sext_ln1245_5_cast_fu_2278_p1;
reg  signed [23:0] sext_ln1245_5_cast_reg_4411;
wire  signed [23:0] sext_ln1245_4_cast_fu_2282_p1;
reg  signed [23:0] sext_ln1245_4_cast_reg_4416;
wire  signed [23:0] sext_ln1245_3_cast_fu_2286_p1;
reg  signed [23:0] sext_ln1245_3_cast_reg_4421;
wire  signed [23:0] sext_ln1245_2_cast_fu_2290_p1;
reg  signed [23:0] sext_ln1245_2_cast_reg_4426;
wire  signed [23:0] sext_ln1245_1_cast_fu_2294_p1;
reg  signed [23:0] sext_ln1245_1_cast_reg_4431;
wire   [3:0] empty_62_fu_2327_p1;
reg   [3:0] empty_62_reg_4445;
reg   [3:0] empty_62_reg_4445_pp0_iter1_reg;
reg   [3:0] empty_62_reg_4445_pp0_iter2_reg;
reg   [3:0] empty_62_reg_4445_pp0_iter3_reg;
reg   [3:0] empty_62_reg_4445_pp0_iter4_reg;
reg   [3:0] empty_62_reg_4445_pp0_iter5_reg;
reg   [3:0] empty_62_reg_4445_pp0_iter6_reg;
reg   [3:0] empty_62_reg_4445_pp0_iter7_reg;
reg   [3:0] empty_62_reg_4445_pp0_iter8_reg;
reg   [3:0] empty_62_reg_4445_pp0_iter9_reg;
reg   [3:0] empty_62_reg_4445_pp0_iter10_reg;
reg   [3:0] empty_62_reg_4445_pp0_iter11_reg;
reg   [3:0] empty_62_reg_4445_pp0_iter12_reg;
reg   [3:0] empty_62_reg_4445_pp0_iter13_reg;
reg   [3:0] output_V_addr_reg_4464;
reg   [3:0] output_V_addr_reg_4464_pp0_iter1_reg;
reg   [3:0] output_V_addr_reg_4464_pp0_iter2_reg;
reg   [3:0] output_V_addr_reg_4464_pp0_iter3_reg;
reg   [3:0] output_V_addr_reg_4464_pp0_iter4_reg;
reg   [3:0] output_V_addr_reg_4464_pp0_iter5_reg;
reg   [3:0] output_V_addr_reg_4464_pp0_iter6_reg;
reg   [3:0] output_V_addr_reg_4464_pp0_iter7_reg;
reg   [3:0] output_V_addr_reg_4464_pp0_iter8_reg;
reg   [3:0] output_V_addr_reg_4464_pp0_iter9_reg;
reg   [3:0] output_V_addr_reg_4464_pp0_iter10_reg;
reg   [3:0] output_V_addr_reg_4464_pp0_iter11_reg;
reg   [3:0] output_V_addr_reg_4464_pp0_iter12_reg;
reg   [3:0] output_V_addr_reg_4464_pp0_iter13_reg;
reg   [3:0] output_V_addr_reg_4464_pp0_iter14_reg;
reg   [3:0] output_V_addr_reg_4464_pp0_iter15_reg;
reg   [3:0] output_V_addr_reg_4464_pp0_iter16_reg;
reg   [3:0] output_V_addr_reg_4464_pp0_iter17_reg;
wire   [15:0] tmp_14_fu_2940_p18;
reg  signed [15:0] tmp_14_reg_4610;
wire   [63:0] outNeurons_cast2_fu_2322_p1;
wire    ap_block_pp0_stage0;
reg   [4:0] outNeurons_fu_586;
wire   [4:0] add_ln99_fu_2316_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_outNeurons_1;
wire   [3:0] tmp_fu_2331_p17;
wire  signed [15:0] tmp_fu_2331_p18;
wire  signed [15:0] tmp_s_fu_2378_p18;
wire  signed [15:0] tmp_2_fu_2411_p18;
wire  signed [23:0] tmp_15_fu_2436_p1;
wire   [23:0] grp_fu_3025_p3;
wire   [15:0] tmp_15_fu_2436_p4;
wire  signed [15:0] tmp_3_fu_2453_p18;
wire  signed [23:0] tmp_16_fu_2478_p1;
wire   [23:0] grp_fu_3034_p3;
wire   [15:0] tmp_16_fu_2478_p4;
wire  signed [15:0] tmp_4_fu_2495_p18;
wire  signed [23:0] tmp_17_fu_2520_p1;
wire   [23:0] grp_fu_3042_p3;
wire   [15:0] tmp_17_fu_2520_p4;
wire  signed [15:0] tmp_5_fu_2537_p18;
wire  signed [23:0] tmp_18_fu_2562_p1;
wire   [23:0] grp_fu_3050_p3;
wire   [15:0] tmp_18_fu_2562_p4;
wire  signed [15:0] tmp_6_fu_2579_p18;
wire  signed [23:0] tmp_19_fu_2604_p1;
wire   [23:0] grp_fu_3058_p3;
wire   [15:0] tmp_19_fu_2604_p4;
wire  signed [15:0] tmp_7_fu_2621_p18;
wire  signed [23:0] tmp_20_fu_2646_p1;
wire   [23:0] grp_fu_3066_p3;
wire   [15:0] tmp_20_fu_2646_p4;
wire  signed [15:0] tmp_8_fu_2663_p18;
wire  signed [23:0] tmp_21_fu_2688_p1;
wire   [23:0] grp_fu_3074_p3;
wire   [15:0] tmp_21_fu_2688_p4;
wire  signed [15:0] tmp_9_fu_2705_p18;
wire  signed [23:0] tmp_22_fu_2730_p1;
wire   [23:0] grp_fu_3082_p3;
wire   [15:0] tmp_22_fu_2730_p4;
wire  signed [15:0] tmp_1_fu_2747_p18;
wire  signed [23:0] tmp_23_fu_2772_p1;
wire   [23:0] grp_fu_3090_p3;
wire   [15:0] tmp_23_fu_2772_p4;
wire  signed [15:0] tmp_10_fu_2789_p18;
wire  signed [23:0] tmp_24_fu_2814_p1;
wire   [23:0] grp_fu_3098_p3;
wire   [15:0] tmp_24_fu_2814_p4;
wire  signed [15:0] tmp_11_fu_2831_p18;
wire  signed [23:0] tmp_25_fu_2856_p1;
wire   [23:0] grp_fu_3106_p3;
wire   [15:0] tmp_25_fu_2856_p4;
wire  signed [15:0] tmp_12_fu_2873_p18;
wire  signed [23:0] tmp_26_fu_2898_p1;
wire   [23:0] grp_fu_3114_p3;
wire   [15:0] tmp_26_fu_2898_p4;
wire  signed [15:0] tmp_13_fu_2915_p18;
wire  signed [23:0] tmp_27_fu_2961_p1;
wire   [23:0] grp_fu_3122_p3;
wire   [15:0] tmp_27_fu_2961_p4;
wire  signed [23:0] tmp_28_fu_2981_p1;
wire   [23:0] grp_fu_3130_p3;
wire   [15:0] tmp_28_fu_2981_p4;
wire  signed [23:0] tmp_29_fu_2998_p1;
wire   [23:0] grp_fu_3138_p3;
wire   [15:0] tmp_29_fu_2998_p4;
wire  signed [23:0] trunc_ln717_s_fu_3015_p1;
wire   [23:0] grp_fu_3146_p3;
wire   [23:0] grp_fu_3025_p2;
wire  signed [15:0] grp_fu_3034_p0;
wire   [23:0] grp_fu_3034_p2;
wire  signed [15:0] grp_fu_3042_p0;
wire   [23:0] grp_fu_3042_p2;
wire  signed [15:0] grp_fu_3050_p0;
wire   [23:0] grp_fu_3050_p2;
wire  signed [15:0] grp_fu_3058_p0;
wire   [23:0] grp_fu_3058_p2;
wire  signed [15:0] grp_fu_3066_p0;
wire   [23:0] grp_fu_3066_p2;
wire  signed [15:0] grp_fu_3074_p0;
wire   [23:0] grp_fu_3074_p2;
wire  signed [15:0] grp_fu_3082_p0;
wire   [23:0] grp_fu_3082_p2;
wire  signed [15:0] grp_fu_3090_p0;
wire   [23:0] grp_fu_3090_p2;
wire  signed [15:0] grp_fu_3098_p0;
wire   [23:0] grp_fu_3098_p2;
wire  signed [15:0] grp_fu_3106_p0;
wire   [23:0] grp_fu_3106_p2;
wire  signed [15:0] grp_fu_3114_p0;
wire   [23:0] grp_fu_3114_p2;
wire  signed [15:0] grp_fu_3122_p0;
wire   [23:0] grp_fu_3122_p2;
wire  signed [15:0] grp_fu_3130_p0;
wire   [23:0] grp_fu_3130_p2;
wire  signed [15:0] grp_fu_3138_p0;
wire   [23:0] grp_fu_3138_p2;
wire  signed [15:0] grp_fu_3146_p0;
wire   [23:0] grp_fu_3146_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_done_reg = 1'b0;
end

nnlayer_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_164_16_1_1_U4(
    .din0(weights_0_load),
    .din1(weights_1_load),
    .din2(weights_2_load),
    .din3(weights_3_load),
    .din4(weights_4_load),
    .din5(weights_5_load),
    .din6(weights_6_load),
    .din7(weights_7_load),
    .din8(weights_8_load),
    .din9(weights_9_load),
    .din10(weights_10_load),
    .din11(weights_11_load),
    .din12(weights_12_load),
    .din13(weights_13_load),
    .din14(weights_14_load),
    .din15(weights_15_load),
    .din16(tmp_fu_2331_p17),
    .dout(tmp_fu_2331_p18)
);

nnlayer_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_164_16_1_1_U5(
    .din0(weights_0_load_1),
    .din1(weights_1_load_1),
    .din2(weights_2_load_1),
    .din3(weights_3_load_1),
    .din4(weights_4_load_1),
    .din5(weights_5_load_1),
    .din6(weights_6_load_1),
    .din7(weights_7_load_1),
    .din8(weights_8_load_1),
    .din9(weights_9_load_1),
    .din10(weights_10_load_1),
    .din11(weights_11_load_1),
    .din12(weights_12_load_1),
    .din13(weights_13_load_1),
    .din14(weights_14_load_1),
    .din15(weights_15_load_1),
    .din16(empty_62_reg_4445),
    .dout(tmp_s_fu_2378_p18)
);

nnlayer_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_164_16_1_1_U6(
    .din0(weights_0_load_2),
    .din1(weights_1_load_2),
    .din2(weights_2_load_2),
    .din3(weights_3_load_2),
    .din4(weights_4_load_2),
    .din5(weights_5_load_2),
    .din6(weights_6_load_2),
    .din7(weights_7_load_2),
    .din8(weights_8_load_2),
    .din9(weights_9_load_2),
    .din10(weights_10_load_2),
    .din11(weights_11_load_2),
    .din12(weights_12_load_2),
    .din13(weights_13_load_2),
    .din14(weights_14_load_2),
    .din15(weights_15_load_2),
    .din16(empty_62_reg_4445_pp0_iter1_reg),
    .dout(tmp_2_fu_2411_p18)
);

nnlayer_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_164_16_1_1_U7(
    .din0(weights_0_load_3),
    .din1(weights_1_load_3),
    .din2(weights_2_load_3),
    .din3(weights_3_load_3),
    .din4(weights_4_load_3),
    .din5(weights_5_load_3),
    .din6(weights_6_load_3),
    .din7(weights_7_load_3),
    .din8(weights_8_load_3),
    .din9(weights_9_load_3),
    .din10(weights_10_load_3),
    .din11(weights_11_load_3),
    .din12(weights_12_load_3),
    .din13(weights_13_load_3),
    .din14(weights_14_load_3),
    .din15(weights_15_load_3),
    .din16(empty_62_reg_4445_pp0_iter2_reg),
    .dout(tmp_3_fu_2453_p18)
);

nnlayer_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_164_16_1_1_U8(
    .din0(weights_0_load_4),
    .din1(weights_1_load_4),
    .din2(weights_2_load_4),
    .din3(weights_3_load_4),
    .din4(weights_4_load_4),
    .din5(weights_5_load_4),
    .din6(weights_6_load_4),
    .din7(weights_7_load_4),
    .din8(weights_8_load_4),
    .din9(weights_9_load_4),
    .din10(weights_10_load_4),
    .din11(weights_11_load_4),
    .din12(weights_12_load_4),
    .din13(weights_13_load_4),
    .din14(weights_14_load_4),
    .din15(weights_15_load_4),
    .din16(empty_62_reg_4445_pp0_iter3_reg),
    .dout(tmp_4_fu_2495_p18)
);

nnlayer_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_164_16_1_1_U9(
    .din0(weights_0_load_5),
    .din1(weights_1_load_5),
    .din2(weights_2_load_5),
    .din3(weights_3_load_5),
    .din4(weights_4_load_5),
    .din5(weights_5_load_5),
    .din6(weights_6_load_5),
    .din7(weights_7_load_5),
    .din8(weights_8_load_5),
    .din9(weights_9_load_5),
    .din10(weights_10_load_5),
    .din11(weights_11_load_5),
    .din12(weights_12_load_5),
    .din13(weights_13_load_5),
    .din14(weights_14_load_5),
    .din15(weights_15_load_5),
    .din16(empty_62_reg_4445_pp0_iter4_reg),
    .dout(tmp_5_fu_2537_p18)
);

nnlayer_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_164_16_1_1_U10(
    .din0(weights_0_load_6),
    .din1(weights_1_load_6),
    .din2(weights_2_load_6),
    .din3(weights_3_load_6),
    .din4(weights_4_load_6),
    .din5(weights_5_load_6),
    .din6(weights_6_load_6),
    .din7(weights_7_load_6),
    .din8(weights_8_load_6),
    .din9(weights_9_load_6),
    .din10(weights_10_load_6),
    .din11(weights_11_load_6),
    .din12(weights_12_load_6),
    .din13(weights_13_load_6),
    .din14(weights_14_load_6),
    .din15(weights_15_load_6),
    .din16(empty_62_reg_4445_pp0_iter5_reg),
    .dout(tmp_6_fu_2579_p18)
);

nnlayer_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_164_16_1_1_U11(
    .din0(weights_0_load_7),
    .din1(weights_1_load_7),
    .din2(weights_2_load_7),
    .din3(weights_3_load_7),
    .din4(weights_4_load_7),
    .din5(weights_5_load_7),
    .din6(weights_6_load_7),
    .din7(weights_7_load_7),
    .din8(weights_8_load_7),
    .din9(weights_9_load_7),
    .din10(weights_10_load_7),
    .din11(weights_11_load_7),
    .din12(weights_12_load_7),
    .din13(weights_13_load_7),
    .din14(weights_14_load_7),
    .din15(weights_15_load_7),
    .din16(empty_62_reg_4445_pp0_iter6_reg),
    .dout(tmp_7_fu_2621_p18)
);

nnlayer_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_164_16_1_1_U12(
    .din0(weights_0_load_8),
    .din1(weights_1_load_8),
    .din2(weights_2_load_8),
    .din3(weights_3_load_8),
    .din4(weights_4_load_8),
    .din5(weights_5_load_8),
    .din6(weights_6_load_8),
    .din7(weights_7_load_8),
    .din8(weights_8_load_8),
    .din9(weights_9_load_8),
    .din10(weights_10_load_8),
    .din11(weights_11_load_8),
    .din12(weights_12_load_8),
    .din13(weights_13_load_8),
    .din14(weights_14_load_8),
    .din15(weights_15_load_8),
    .din16(empty_62_reg_4445_pp0_iter7_reg),
    .dout(tmp_8_fu_2663_p18)
);

nnlayer_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_164_16_1_1_U13(
    .din0(weights_0_load_9),
    .din1(weights_1_load_9),
    .din2(weights_2_load_9),
    .din3(weights_3_load_9),
    .din4(weights_4_load_9),
    .din5(weights_5_load_9),
    .din6(weights_6_load_9),
    .din7(weights_7_load_9),
    .din8(weights_8_load_9),
    .din9(weights_9_load_9),
    .din10(weights_10_load_9),
    .din11(weights_11_load_9),
    .din12(weights_12_load_9),
    .din13(weights_13_load_9),
    .din14(weights_14_load_9),
    .din15(weights_15_load_9),
    .din16(empty_62_reg_4445_pp0_iter8_reg),
    .dout(tmp_9_fu_2705_p18)
);

nnlayer_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_164_16_1_1_U14(
    .din0(weights_0_load_10),
    .din1(weights_1_load_10),
    .din2(weights_2_load_10),
    .din3(weights_3_load_10),
    .din4(weights_4_load_10),
    .din5(weights_5_load_10),
    .din6(weights_6_load_10),
    .din7(weights_7_load_10),
    .din8(weights_8_load_10),
    .din9(weights_9_load_10),
    .din10(weights_10_load_10),
    .din11(weights_11_load_10),
    .din12(weights_12_load_10),
    .din13(weights_13_load_10),
    .din14(weights_14_load_10),
    .din15(weights_15_load_10),
    .din16(empty_62_reg_4445_pp0_iter9_reg),
    .dout(tmp_1_fu_2747_p18)
);

nnlayer_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_164_16_1_1_U15(
    .din0(weights_0_load_11),
    .din1(weights_1_load_11),
    .din2(weights_2_load_11),
    .din3(weights_3_load_11),
    .din4(weights_4_load_11),
    .din5(weights_5_load_11),
    .din6(weights_6_load_11),
    .din7(weights_7_load_11),
    .din8(weights_8_load_11),
    .din9(weights_9_load_11),
    .din10(weights_10_load_11),
    .din11(weights_11_load_11),
    .din12(weights_12_load_11),
    .din13(weights_13_load_11),
    .din14(weights_14_load_11),
    .din15(weights_15_load_11),
    .din16(empty_62_reg_4445_pp0_iter10_reg),
    .dout(tmp_10_fu_2789_p18)
);

nnlayer_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_164_16_1_1_U16(
    .din0(weights_0_load_12),
    .din1(weights_1_load_12),
    .din2(weights_2_load_12),
    .din3(weights_3_load_12),
    .din4(weights_4_load_12),
    .din5(weights_5_load_12),
    .din6(weights_6_load_12),
    .din7(weights_7_load_12),
    .din8(weights_8_load_12),
    .din9(weights_9_load_12),
    .din10(weights_10_load_12),
    .din11(weights_11_load_12),
    .din12(weights_12_load_12),
    .din13(weights_13_load_12),
    .din14(weights_14_load_12),
    .din15(weights_15_load_12),
    .din16(empty_62_reg_4445_pp0_iter11_reg),
    .dout(tmp_11_fu_2831_p18)
);

nnlayer_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_164_16_1_1_U17(
    .din0(weights_0_load_13),
    .din1(weights_1_load_13),
    .din2(weights_2_load_13),
    .din3(weights_3_load_13),
    .din4(weights_4_load_13),
    .din5(weights_5_load_13),
    .din6(weights_6_load_13),
    .din7(weights_7_load_13),
    .din8(weights_8_load_13),
    .din9(weights_9_load_13),
    .din10(weights_10_load_13),
    .din11(weights_11_load_13),
    .din12(weights_12_load_13),
    .din13(weights_13_load_13),
    .din14(weights_14_load_13),
    .din15(weights_15_load_13),
    .din16(empty_62_reg_4445_pp0_iter12_reg),
    .dout(tmp_12_fu_2873_p18)
);

nnlayer_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_164_16_1_1_U18(
    .din0(weights_0_load_14),
    .din1(weights_1_load_14),
    .din2(weights_2_load_14),
    .din3(weights_3_load_14),
    .din4(weights_4_load_14),
    .din5(weights_5_load_14),
    .din6(weights_6_load_14),
    .din7(weights_7_load_14),
    .din8(weights_8_load_14),
    .din9(weights_9_load_14),
    .din10(weights_10_load_14),
    .din11(weights_11_load_14),
    .din12(weights_12_load_14),
    .din13(weights_13_load_14),
    .din14(weights_14_load_14),
    .din15(weights_15_load_14),
    .din16(empty_62_reg_4445_pp0_iter13_reg),
    .dout(tmp_13_fu_2915_p18)
);

nnlayer_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_164_16_1_1_U19(
    .din0(weights_0_load_15),
    .din1(weights_1_load_15),
    .din2(weights_2_load_15),
    .din3(weights_3_load_15),
    .din4(weights_4_load_15),
    .din5(weights_5_load_15),
    .din6(weights_6_load_15),
    .din7(weights_7_load_15),
    .din8(weights_8_load_15),
    .din9(weights_9_load_15),
    .din10(weights_10_load_15),
    .din11(weights_11_load_15),
    .din12(weights_12_load_15),
    .din13(weights_13_load_15),
    .din14(weights_14_load_15),
    .din15(weights_15_load_15),
    .din16(empty_62_reg_4445_pp0_iter13_reg),
    .dout(tmp_14_fu_2940_p18)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sext_ln1245),
    .din1(tmp_fu_2331_p18),
    .din2(grp_fu_3025_p2),
    .ce(1'b1),
    .dout(grp_fu_3025_p3)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3034_p0),
    .din1(tmp_s_fu_2378_p18),
    .din2(grp_fu_3034_p2),
    .ce(1'b1),
    .dout(grp_fu_3034_p3)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3042_p0),
    .din1(tmp_2_fu_2411_p18),
    .din2(grp_fu_3042_p2),
    .ce(1'b1),
    .dout(grp_fu_3042_p3)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3050_p0),
    .din1(tmp_3_fu_2453_p18),
    .din2(grp_fu_3050_p2),
    .ce(1'b1),
    .dout(grp_fu_3050_p3)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3058_p0),
    .din1(tmp_4_fu_2495_p18),
    .din2(grp_fu_3058_p2),
    .ce(1'b1),
    .dout(grp_fu_3058_p3)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3066_p0),
    .din1(tmp_5_fu_2537_p18),
    .din2(grp_fu_3066_p2),
    .ce(1'b1),
    .dout(grp_fu_3066_p3)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3074_p0),
    .din1(tmp_6_fu_2579_p18),
    .din2(grp_fu_3074_p2),
    .ce(1'b1),
    .dout(grp_fu_3074_p3)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3082_p0),
    .din1(tmp_7_fu_2621_p18),
    .din2(grp_fu_3082_p2),
    .ce(1'b1),
    .dout(grp_fu_3082_p3)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3090_p0),
    .din1(tmp_8_fu_2663_p18),
    .din2(grp_fu_3090_p2),
    .ce(1'b1),
    .dout(grp_fu_3090_p3)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3098_p0),
    .din1(tmp_9_fu_2705_p18),
    .din2(grp_fu_3098_p2),
    .ce(1'b1),
    .dout(grp_fu_3098_p3)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3106_p0),
    .din1(tmp_1_fu_2747_p18),
    .din2(grp_fu_3106_p2),
    .ce(1'b1),
    .dout(grp_fu_3106_p3)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3114_p0),
    .din1(tmp_10_fu_2789_p18),
    .din2(grp_fu_3114_p2),
    .ce(1'b1),
    .dout(grp_fu_3114_p3)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3122_p0),
    .din1(tmp_11_fu_2831_p18),
    .din2(grp_fu_3122_p2),
    .ce(1'b1),
    .dout(grp_fu_3122_p3)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3130_p0),
    .din1(tmp_12_fu_2873_p18),
    .din2(grp_fu_3130_p2),
    .ce(1'b1),
    .dout(grp_fu_3130_p3)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3138_p0),
    .din1(tmp_13_fu_2915_p18),
    .din2(grp_fu_3138_p2),
    .ce(1'b1),
    .dout(grp_fu_3138_p3)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_3146_p0),
    .din1(tmp_14_reg_4610),
    .din2(grp_fu_3146_p2),
    .ce(1'b1),
    .dout(grp_fu_3146_p3)
);

nnlayer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln99_fu_2310_p2 == 1'd0))) begin
            outNeurons_fu_586 <= add_ln99_fu_2316_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            outNeurons_fu_586 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        empty_62_reg_4445_pp0_iter10_reg <= empty_62_reg_4445_pp0_iter9_reg;
        empty_62_reg_4445_pp0_iter11_reg <= empty_62_reg_4445_pp0_iter10_reg;
        empty_62_reg_4445_pp0_iter12_reg <= empty_62_reg_4445_pp0_iter11_reg;
        empty_62_reg_4445_pp0_iter13_reg <= empty_62_reg_4445_pp0_iter12_reg;
        empty_62_reg_4445_pp0_iter2_reg <= empty_62_reg_4445_pp0_iter1_reg;
        empty_62_reg_4445_pp0_iter3_reg <= empty_62_reg_4445_pp0_iter2_reg;
        empty_62_reg_4445_pp0_iter4_reg <= empty_62_reg_4445_pp0_iter3_reg;
        empty_62_reg_4445_pp0_iter5_reg <= empty_62_reg_4445_pp0_iter4_reg;
        empty_62_reg_4445_pp0_iter6_reg <= empty_62_reg_4445_pp0_iter5_reg;
        empty_62_reg_4445_pp0_iter7_reg <= empty_62_reg_4445_pp0_iter6_reg;
        empty_62_reg_4445_pp0_iter8_reg <= empty_62_reg_4445_pp0_iter7_reg;
        empty_62_reg_4445_pp0_iter9_reg <= empty_62_reg_4445_pp0_iter8_reg;
        output_V_addr_reg_4464_pp0_iter10_reg <= output_V_addr_reg_4464_pp0_iter9_reg;
        output_V_addr_reg_4464_pp0_iter11_reg <= output_V_addr_reg_4464_pp0_iter10_reg;
        output_V_addr_reg_4464_pp0_iter12_reg <= output_V_addr_reg_4464_pp0_iter11_reg;
        output_V_addr_reg_4464_pp0_iter13_reg <= output_V_addr_reg_4464_pp0_iter12_reg;
        output_V_addr_reg_4464_pp0_iter14_reg <= output_V_addr_reg_4464_pp0_iter13_reg;
        output_V_addr_reg_4464_pp0_iter15_reg <= output_V_addr_reg_4464_pp0_iter14_reg;
        output_V_addr_reg_4464_pp0_iter16_reg <= output_V_addr_reg_4464_pp0_iter15_reg;
        output_V_addr_reg_4464_pp0_iter17_reg <= output_V_addr_reg_4464_pp0_iter16_reg;
        output_V_addr_reg_4464_pp0_iter2_reg <= output_V_addr_reg_4464_pp0_iter1_reg;
        output_V_addr_reg_4464_pp0_iter3_reg <= output_V_addr_reg_4464_pp0_iter2_reg;
        output_V_addr_reg_4464_pp0_iter4_reg <= output_V_addr_reg_4464_pp0_iter3_reg;
        output_V_addr_reg_4464_pp0_iter5_reg <= output_V_addr_reg_4464_pp0_iter4_reg;
        output_V_addr_reg_4464_pp0_iter6_reg <= output_V_addr_reg_4464_pp0_iter5_reg;
        output_V_addr_reg_4464_pp0_iter7_reg <= output_V_addr_reg_4464_pp0_iter6_reg;
        output_V_addr_reg_4464_pp0_iter8_reg <= output_V_addr_reg_4464_pp0_iter7_reg;
        output_V_addr_reg_4464_pp0_iter9_reg <= output_V_addr_reg_4464_pp0_iter8_reg;
        tmp_14_reg_4610 <= tmp_14_fu_2940_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_62_reg_4445_pp0_iter1_reg <= empty_62_reg_4445;
        output_V_addr_reg_4464_pp0_iter1_reg <= output_V_addr_reg_4464;
        sext_ln1245_10_cast_reg_4386 <= sext_ln1245_10_cast_fu_2258_p1;
        sext_ln1245_11_cast_reg_4381 <= sext_ln1245_11_cast_fu_2254_p1;
        sext_ln1245_12_cast_reg_4376 <= sext_ln1245_12_cast_fu_2250_p1;
        sext_ln1245_13_cast_reg_4371 <= sext_ln1245_13_cast_fu_2246_p1;
        sext_ln1245_14_cast_reg_4366 <= sext_ln1245_14_cast_fu_2242_p1;
        sext_ln1245_15_cast_reg_4361 <= sext_ln1245_15_cast_fu_2238_p1;
        sext_ln1245_1_cast_reg_4431 <= sext_ln1245_1_cast_fu_2294_p1;
        sext_ln1245_2_cast_reg_4426 <= sext_ln1245_2_cast_fu_2290_p1;
        sext_ln1245_3_cast_reg_4421 <= sext_ln1245_3_cast_fu_2286_p1;
        sext_ln1245_4_cast_reg_4416 <= sext_ln1245_4_cast_fu_2282_p1;
        sext_ln1245_5_cast_reg_4411 <= sext_ln1245_5_cast_fu_2278_p1;
        sext_ln1245_6_cast_reg_4406 <= sext_ln1245_6_cast_fu_2274_p1;
        sext_ln1245_7_cast_reg_4401 <= sext_ln1245_7_cast_fu_2270_p1;
        sext_ln1245_8_cast_reg_4396 <= sext_ln1245_8_cast_fu_2266_p1;
        sext_ln1245_9_cast_reg_4391 <= sext_ln1245_9_cast_fu_2262_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln99_fu_2310_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_62_reg_4445 <= empty_62_fu_2327_p1;
        output_V_addr_reg_4464 <= outNeurons_cast2_fu_2322_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln99_fu_2310_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_outNeurons_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_outNeurons_1 = outNeurons_fu_586;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_V_ce1 = 1'b1;
    end else begin
        output_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln99_fu_2316_p2 = (ap_sig_allocacmp_outNeurons_1 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_62_fu_2327_p1 = ap_sig_allocacmp_outNeurons_1[3:0];

assign grp_fu_3025_p2 = {{output_V_q1}, {8'd0}};

assign grp_fu_3034_p0 = sext_ln1245_1_cast_reg_4431;

assign grp_fu_3034_p2 = {{tmp_15_fu_2436_p4}, {8'd0}};

assign grp_fu_3042_p0 = sext_ln1245_2_cast_reg_4426;

assign grp_fu_3042_p2 = {{tmp_16_fu_2478_p4}, {8'd0}};

assign grp_fu_3050_p0 = sext_ln1245_3_cast_reg_4421;

assign grp_fu_3050_p2 = {{tmp_17_fu_2520_p4}, {8'd0}};

assign grp_fu_3058_p0 = sext_ln1245_4_cast_reg_4416;

assign grp_fu_3058_p2 = {{tmp_18_fu_2562_p4}, {8'd0}};

assign grp_fu_3066_p0 = sext_ln1245_5_cast_reg_4411;

assign grp_fu_3066_p2 = {{tmp_19_fu_2604_p4}, {8'd0}};

assign grp_fu_3074_p0 = sext_ln1245_6_cast_reg_4406;

assign grp_fu_3074_p2 = {{tmp_20_fu_2646_p4}, {8'd0}};

assign grp_fu_3082_p0 = sext_ln1245_7_cast_reg_4401;

assign grp_fu_3082_p2 = {{tmp_21_fu_2688_p4}, {8'd0}};

assign grp_fu_3090_p0 = sext_ln1245_8_cast_reg_4396;

assign grp_fu_3090_p2 = {{tmp_22_fu_2730_p4}, {8'd0}};

assign grp_fu_3098_p0 = sext_ln1245_9_cast_reg_4391;

assign grp_fu_3098_p2 = {{tmp_23_fu_2772_p4}, {8'd0}};

assign grp_fu_3106_p0 = sext_ln1245_10_cast_reg_4386;

assign grp_fu_3106_p2 = {{tmp_24_fu_2814_p4}, {8'd0}};

assign grp_fu_3114_p0 = sext_ln1245_11_cast_reg_4381;

assign grp_fu_3114_p2 = {{tmp_25_fu_2856_p4}, {8'd0}};

assign grp_fu_3122_p0 = sext_ln1245_12_cast_reg_4376;

assign grp_fu_3122_p2 = {{tmp_26_fu_2898_p4}, {8'd0}};

assign grp_fu_3130_p0 = sext_ln1245_13_cast_reg_4371;

assign grp_fu_3130_p2 = {{tmp_27_fu_2961_p4}, {8'd0}};

assign grp_fu_3138_p0 = sext_ln1245_14_cast_reg_4366;

assign grp_fu_3138_p2 = {{tmp_28_fu_2981_p4}, {8'd0}};

assign grp_fu_3146_p0 = sext_ln1245_15_cast_reg_4361;

assign grp_fu_3146_p2 = {{tmp_29_fu_2998_p4}, {8'd0}};

assign icmp_ln99_fu_2310_p2 = ((ap_sig_allocacmp_outNeurons_1 == 5'd16) ? 1'b1 : 1'b0);

assign outNeurons_cast2_fu_2322_p1 = ap_sig_allocacmp_outNeurons_1;

assign output_V_address0 = output_V_addr_reg_4464_pp0_iter17_reg;

assign output_V_address1 = output_V_addr_reg_4464;

assign output_V_d0 = {{trunc_ln717_s_fu_3015_p1[23:8]}};

assign sext_ln1245_10_cast_fu_2258_p1 = $signed(sext_ln1245_10);

assign sext_ln1245_11_cast_fu_2254_p1 = $signed(sext_ln1245_11);

assign sext_ln1245_12_cast_fu_2250_p1 = $signed(sext_ln1245_12);

assign sext_ln1245_13_cast_fu_2246_p1 = $signed(sext_ln1245_13);

assign sext_ln1245_14_cast_fu_2242_p1 = $signed(sext_ln1245_14);

assign sext_ln1245_15_cast_fu_2238_p1 = $signed(sext_ln1245_15);

assign sext_ln1245_1_cast_fu_2294_p1 = $signed(sext_ln1245_1);

assign sext_ln1245_2_cast_fu_2290_p1 = $signed(sext_ln1245_2);

assign sext_ln1245_3_cast_fu_2286_p1 = $signed(sext_ln1245_3);

assign sext_ln1245_4_cast_fu_2282_p1 = $signed(sext_ln1245_4);

assign sext_ln1245_5_cast_fu_2278_p1 = $signed(sext_ln1245_5);

assign sext_ln1245_6_cast_fu_2274_p1 = $signed(sext_ln1245_6);

assign sext_ln1245_7_cast_fu_2270_p1 = $signed(sext_ln1245_7);

assign sext_ln1245_8_cast_fu_2266_p1 = $signed(sext_ln1245_8);

assign sext_ln1245_9_cast_fu_2262_p1 = $signed(sext_ln1245_9);

assign tmp_15_fu_2436_p1 = grp_fu_3025_p3;

assign tmp_15_fu_2436_p4 = {{tmp_15_fu_2436_p1[23:8]}};

assign tmp_16_fu_2478_p1 = grp_fu_3034_p3;

assign tmp_16_fu_2478_p4 = {{tmp_16_fu_2478_p1[23:8]}};

assign tmp_17_fu_2520_p1 = grp_fu_3042_p3;

assign tmp_17_fu_2520_p4 = {{tmp_17_fu_2520_p1[23:8]}};

assign tmp_18_fu_2562_p1 = grp_fu_3050_p3;

assign tmp_18_fu_2562_p4 = {{tmp_18_fu_2562_p1[23:8]}};

assign tmp_19_fu_2604_p1 = grp_fu_3058_p3;

assign tmp_19_fu_2604_p4 = {{tmp_19_fu_2604_p1[23:8]}};

assign tmp_20_fu_2646_p1 = grp_fu_3066_p3;

assign tmp_20_fu_2646_p4 = {{tmp_20_fu_2646_p1[23:8]}};

assign tmp_21_fu_2688_p1 = grp_fu_3074_p3;

assign tmp_21_fu_2688_p4 = {{tmp_21_fu_2688_p1[23:8]}};

assign tmp_22_fu_2730_p1 = grp_fu_3082_p3;

assign tmp_22_fu_2730_p4 = {{tmp_22_fu_2730_p1[23:8]}};

assign tmp_23_fu_2772_p1 = grp_fu_3090_p3;

assign tmp_23_fu_2772_p4 = {{tmp_23_fu_2772_p1[23:8]}};

assign tmp_24_fu_2814_p1 = grp_fu_3098_p3;

assign tmp_24_fu_2814_p4 = {{tmp_24_fu_2814_p1[23:8]}};

assign tmp_25_fu_2856_p1 = grp_fu_3106_p3;

assign tmp_25_fu_2856_p4 = {{tmp_25_fu_2856_p1[23:8]}};

assign tmp_26_fu_2898_p1 = grp_fu_3114_p3;

assign tmp_26_fu_2898_p4 = {{tmp_26_fu_2898_p1[23:8]}};

assign tmp_27_fu_2961_p1 = grp_fu_3122_p3;

assign tmp_27_fu_2961_p4 = {{tmp_27_fu_2961_p1[23:8]}};

assign tmp_28_fu_2981_p1 = grp_fu_3130_p3;

assign tmp_28_fu_2981_p4 = {{tmp_28_fu_2981_p1[23:8]}};

assign tmp_29_fu_2998_p1 = grp_fu_3138_p3;

assign tmp_29_fu_2998_p4 = {{tmp_29_fu_2998_p1[23:8]}};

assign tmp_fu_2331_p17 = ap_sig_allocacmp_outNeurons_1[3:0];

assign trunc_ln717_s_fu_3015_p1 = grp_fu_3146_p3;

endmodule //nnlayer_nnlayer_Pipeline_VITIS_LOOP_99_1
