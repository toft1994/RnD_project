// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nnlayer_multiDSP_nnlayer_multiDSP_Pipeline_VITIS_LOOP_96_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul_i,
        weights_0_address0,
        weights_0_ce0,
        weights_0_q0,
        weights_1_address0,
        weights_1_ce0,
        weights_1_q0,
        weights_2_address0,
        weights_2_ce0,
        weights_2_q0,
        weights_3_address0,
        weights_3_ce0,
        weights_3_q0,
        weights_4_address0,
        weights_4_ce0,
        weights_4_q0,
        weights_5_address0,
        weights_5_ce0,
        weights_5_q0,
        weights_6_address0,
        weights_6_ce0,
        weights_6_q0,
        weights_7_address0,
        weights_7_ce0,
        weights_7_q0,
        weights_8_address0,
        weights_8_ce0,
        weights_8_q0,
        weights_9_address0,
        weights_9_ce0,
        weights_9_q0,
        weights_10_address0,
        weights_10_ce0,
        weights_10_q0,
        weights_11_address0,
        weights_11_ce0,
        weights_11_q0,
        weights_12_address0,
        weights_12_ce0,
        weights_12_q0,
        weights_13_address0,
        weights_13_ce0,
        weights_13_q0,
        weights_14_address0,
        weights_14_ce0,
        weights_14_q0,
        weights_15_address0,
        weights_15_ce0,
        weights_15_q0,
        weights_16_address0,
        weights_16_ce0,
        weights_16_q0,
        weights_17_address0,
        weights_17_ce0,
        weights_17_q0,
        weights_18_address0,
        weights_18_ce0,
        weights_18_q0,
        weights_19_address0,
        weights_19_ce0,
        weights_19_q0,
        weights_20_address0,
        weights_20_ce0,
        weights_20_q0,
        weights_21_address0,
        weights_21_ce0,
        weights_21_q0,
        weights_22_address0,
        weights_22_ce0,
        weights_22_q0,
        weights_23_address0,
        weights_23_ce0,
        weights_23_q0,
        weights_24_address0,
        weights_24_ce0,
        weights_24_q0,
        weights_25_address0,
        weights_25_ce0,
        weights_25_q0,
        weights_26_address0,
        weights_26_ce0,
        weights_26_q0,
        weights_27_address0,
        weights_27_ce0,
        weights_27_q0,
        weights_28_address0,
        weights_28_ce0,
        weights_28_q0,
        weights_29_address0,
        weights_29_ce0,
        weights_29_q0,
        weights_30_address0,
        weights_30_ce0,
        weights_30_q0,
        weights_31_address0,
        weights_31_ce0,
        weights_31_q0,
        weights_32_address0,
        weights_32_ce0,
        weights_32_q0,
        weights_33_address0,
        weights_33_ce0,
        weights_33_q0,
        weights_34_address0,
        weights_34_ce0,
        weights_34_q0,
        weights_35_address0,
        weights_35_ce0,
        weights_35_q0,
        weights_36_address0,
        weights_36_ce0,
        weights_36_q0,
        weights_37_address0,
        weights_37_ce0,
        weights_37_q0,
        weights_38_address0,
        weights_38_ce0,
        weights_38_q0,
        weights_39_address0,
        weights_39_ce0,
        weights_39_q0,
        weights_40_address0,
        weights_40_ce0,
        weights_40_q0,
        weights_41_address0,
        weights_41_ce0,
        weights_41_q0,
        weights_42_address0,
        weights_42_ce0,
        weights_42_q0,
        weights_43_address0,
        weights_43_ce0,
        weights_43_q0,
        weights_44_address0,
        weights_44_ce0,
        weights_44_q0,
        weights_45_address0,
        weights_45_ce0,
        weights_45_q0,
        weights_46_address0,
        weights_46_ce0,
        weights_46_q0,
        weights_47_address0,
        weights_47_ce0,
        weights_47_q0,
        weights_48_address0,
        weights_48_ce0,
        weights_48_q0,
        weights_49_address0,
        weights_49_ce0,
        weights_49_q0,
        weights_50_address0,
        weights_50_ce0,
        weights_50_q0,
        weights_51_address0,
        weights_51_ce0,
        weights_51_q0,
        weights_52_address0,
        weights_52_ce0,
        weights_52_q0,
        weights_53_address0,
        weights_53_ce0,
        weights_53_q0,
        weights_54_address0,
        weights_54_ce0,
        weights_54_q0,
        weights_55_address0,
        weights_55_ce0,
        weights_55_q0,
        weights_56_address0,
        weights_56_ce0,
        weights_56_q0,
        weights_57_address0,
        weights_57_ce0,
        weights_57_q0,
        weights_58_address0,
        weights_58_ce0,
        weights_58_q0,
        weights_59_address0,
        weights_59_ce0,
        weights_59_q0,
        weights_60_address0,
        weights_60_ce0,
        weights_60_q0,
        weights_61_address0,
        weights_61_ce0,
        weights_61_q0,
        weights_62_address0,
        weights_62_ce0,
        weights_62_q0,
        weights_63_address0,
        weights_63_ce0,
        weights_63_q0,
        weights_64_address0,
        weights_64_ce0,
        weights_64_q0,
        weights_65_address0,
        weights_65_ce0,
        weights_65_q0,
        weights_66_address0,
        weights_66_ce0,
        weights_66_q0,
        weights_67_address0,
        weights_67_ce0,
        weights_67_q0,
        weights_68_address0,
        weights_68_ce0,
        weights_68_q0,
        weights_69_address0,
        weights_69_ce0,
        weights_69_q0,
        weights_70_address0,
        weights_70_ce0,
        weights_70_q0,
        weights_71_address0,
        weights_71_ce0,
        weights_71_q0,
        weights_72_address0,
        weights_72_ce0,
        weights_72_q0,
        weights_73_address0,
        weights_73_ce0,
        weights_73_q0,
        weights_74_address0,
        weights_74_ce0,
        weights_74_q0,
        weights_75_address0,
        weights_75_ce0,
        weights_75_q0,
        weights_76_address0,
        weights_76_ce0,
        weights_76_q0,
        weights_77_address0,
        weights_77_ce0,
        weights_77_q0,
        weights_78_address0,
        weights_78_ce0,
        weights_78_q0,
        weights_79_address0,
        weights_79_ce0,
        weights_79_q0,
        weights_80_address0,
        weights_80_ce0,
        weights_80_q0,
        weights_81_address0,
        weights_81_ce0,
        weights_81_q0,
        weights_82_address0,
        weights_82_ce0,
        weights_82_q0,
        weights_83_address0,
        weights_83_ce0,
        weights_83_q0,
        weights_84_address0,
        weights_84_ce0,
        weights_84_q0,
        weights_85_address0,
        weights_85_ce0,
        weights_85_q0,
        weights_86_address0,
        weights_86_ce0,
        weights_86_q0,
        weights_87_address0,
        weights_87_ce0,
        weights_87_q0,
        weights_88_address0,
        weights_88_ce0,
        weights_88_q0,
        weights_89_address0,
        weights_89_ce0,
        weights_89_q0,
        weights_90_address0,
        weights_90_ce0,
        weights_90_q0,
        weights_91_address0,
        weights_91_ce0,
        weights_91_q0,
        weights_92_address0,
        weights_92_ce0,
        weights_92_q0,
        weights_93_address0,
        weights_93_ce0,
        weights_93_q0,
        weights_94_address0,
        weights_94_ce0,
        weights_94_q0,
        weights_95_address0,
        weights_95_ce0,
        weights_95_q0,
        weights_96_address0,
        weights_96_ce0,
        weights_96_q0,
        weights_97_address0,
        weights_97_ce0,
        weights_97_q0,
        weights_98_address0,
        weights_98_ce0,
        weights_98_q0,
        weights_99_address0,
        weights_99_ce0,
        weights_99_q0,
        weights_100_address0,
        weights_100_ce0,
        weights_100_q0,
        weights_101_address0,
        weights_101_ce0,
        weights_101_q0,
        weights_102_address0,
        weights_102_ce0,
        weights_102_q0,
        weights_103_address0,
        weights_103_ce0,
        weights_103_q0,
        weights_104_address0,
        weights_104_ce0,
        weights_104_q0,
        weights_105_address0,
        weights_105_ce0,
        weights_105_q0,
        weights_106_address0,
        weights_106_ce0,
        weights_106_q0,
        weights_107_address0,
        weights_107_ce0,
        weights_107_q0,
        weights_108_address0,
        weights_108_ce0,
        weights_108_q0,
        weights_109_address0,
        weights_109_ce0,
        weights_109_q0,
        weights_110_address0,
        weights_110_ce0,
        weights_110_q0,
        weights_111_address0,
        weights_111_ce0,
        weights_111_q0,
        weights_112_address0,
        weights_112_ce0,
        weights_112_q0,
        weights_113_address0,
        weights_113_ce0,
        weights_113_q0,
        weights_114_address0,
        weights_114_ce0,
        weights_114_q0,
        weights_115_address0,
        weights_115_ce0,
        weights_115_q0,
        weights_116_address0,
        weights_116_ce0,
        weights_116_q0,
        weights_117_address0,
        weights_117_ce0,
        weights_117_q0,
        weights_118_address0,
        weights_118_ce0,
        weights_118_q0,
        weights_119_address0,
        weights_119_ce0,
        weights_119_q0,
        weights_120_address0,
        weights_120_ce0,
        weights_120_q0,
        weights_121_address0,
        weights_121_ce0,
        weights_121_q0,
        weights_122_address0,
        weights_122_ce0,
        weights_122_q0,
        weights_123_address0,
        weights_123_ce0,
        weights_123_q0,
        weights_124_address0,
        weights_124_ce0,
        weights_124_q0,
        weights_125_address0,
        weights_125_ce0,
        weights_125_q0,
        weights_126_address0,
        weights_126_ce0,
        weights_126_q0,
        weights_127_address0,
        weights_127_ce0,
        weights_127_q0,
        input_0_load,
        input_1_load,
        input_2_load,
        input_3_load,
        input_4_load,
        input_5_load,
        input_6_load,
        input_7_load,
        input_8_load,
        input_9_load,
        input_10_load,
        input_11_load,
        input_12_load,
        input_13_load,
        input_14_load,
        input_15_load,
        input_16_load,
        input_17_load,
        input_18_load,
        input_19_load,
        input_20_load,
        input_21_load,
        input_22_load,
        input_23_load,
        input_24_load,
        input_25_load,
        input_26_load,
        input_27_load,
        input_28_load,
        input_29_load,
        input_30_load,
        input_31_load,
        input_32_load,
        input_33_load,
        input_34_load,
        input_35_load,
        input_36_load,
        input_37_load,
        input_38_load,
        input_39_load,
        input_40_load,
        input_41_load,
        input_42_load,
        input_43_load,
        input_44_load,
        input_45_load,
        input_46_load,
        input_47_load,
        input_48_load,
        input_49_load,
        input_50_load,
        input_51_load,
        input_52_load,
        input_53_load,
        input_54_load,
        input_55_load,
        input_56_load,
        input_57_load,
        input_58_load,
        input_59_load,
        input_60_load,
        input_61_load,
        input_62_load,
        input_63_load,
        input_64_load,
        input_65_load,
        input_66_load,
        input_67_load,
        input_68_load,
        input_69_load,
        input_70_load,
        input_71_load,
        input_72_load,
        input_73_load,
        input_74_load,
        input_75_load,
        input_76_load,
        input_77_load,
        input_78_load,
        input_79_load,
        input_80_load,
        input_81_load,
        input_82_load,
        input_83_load,
        input_84_load,
        input_85_load,
        input_86_load,
        input_87_load,
        input_88_load,
        input_89_load,
        input_90_load,
        input_91_load,
        input_92_load,
        input_93_load,
        input_94_load,
        input_95_load,
        input_96_load,
        input_97_load,
        input_98_load,
        input_99_load,
        input_100_load,
        input_101_load,
        input_102_load,
        input_103_load,
        input_104_load,
        input_105_load,
        input_106_load,
        input_107_load,
        input_108_load,
        input_109_load,
        input_110_load,
        input_111_load,
        input_112_load,
        input_113_load,
        input_114_load,
        input_115_load,
        input_116_load,
        input_117_load,
        input_118_load,
        input_119_load,
        input_120_load,
        input_121_load,
        input_122_load,
        input_123_load,
        input_124_load,
        input_125_load,
        input_126_load,
        input_127_load,
        sumArr_V_address0,
        sumArr_V_ce0,
        sumArr_V_we0,
        sumArr_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [13:0] mul_i;
output  [6:0] weights_0_address0;
output   weights_0_ce0;
input  [15:0] weights_0_q0;
output  [6:0] weights_1_address0;
output   weights_1_ce0;
input  [15:0] weights_1_q0;
output  [6:0] weights_2_address0;
output   weights_2_ce0;
input  [15:0] weights_2_q0;
output  [6:0] weights_3_address0;
output   weights_3_ce0;
input  [15:0] weights_3_q0;
output  [6:0] weights_4_address0;
output   weights_4_ce0;
input  [15:0] weights_4_q0;
output  [6:0] weights_5_address0;
output   weights_5_ce0;
input  [15:0] weights_5_q0;
output  [6:0] weights_6_address0;
output   weights_6_ce0;
input  [15:0] weights_6_q0;
output  [6:0] weights_7_address0;
output   weights_7_ce0;
input  [15:0] weights_7_q0;
output  [6:0] weights_8_address0;
output   weights_8_ce0;
input  [15:0] weights_8_q0;
output  [6:0] weights_9_address0;
output   weights_9_ce0;
input  [15:0] weights_9_q0;
output  [6:0] weights_10_address0;
output   weights_10_ce0;
input  [15:0] weights_10_q0;
output  [6:0] weights_11_address0;
output   weights_11_ce0;
input  [15:0] weights_11_q0;
output  [6:0] weights_12_address0;
output   weights_12_ce0;
input  [15:0] weights_12_q0;
output  [6:0] weights_13_address0;
output   weights_13_ce0;
input  [15:0] weights_13_q0;
output  [6:0] weights_14_address0;
output   weights_14_ce0;
input  [15:0] weights_14_q0;
output  [6:0] weights_15_address0;
output   weights_15_ce0;
input  [15:0] weights_15_q0;
output  [6:0] weights_16_address0;
output   weights_16_ce0;
input  [15:0] weights_16_q0;
output  [6:0] weights_17_address0;
output   weights_17_ce0;
input  [15:0] weights_17_q0;
output  [6:0] weights_18_address0;
output   weights_18_ce0;
input  [15:0] weights_18_q0;
output  [6:0] weights_19_address0;
output   weights_19_ce0;
input  [15:0] weights_19_q0;
output  [6:0] weights_20_address0;
output   weights_20_ce0;
input  [15:0] weights_20_q0;
output  [6:0] weights_21_address0;
output   weights_21_ce0;
input  [15:0] weights_21_q0;
output  [6:0] weights_22_address0;
output   weights_22_ce0;
input  [15:0] weights_22_q0;
output  [6:0] weights_23_address0;
output   weights_23_ce0;
input  [15:0] weights_23_q0;
output  [6:0] weights_24_address0;
output   weights_24_ce0;
input  [15:0] weights_24_q0;
output  [6:0] weights_25_address0;
output   weights_25_ce0;
input  [15:0] weights_25_q0;
output  [6:0] weights_26_address0;
output   weights_26_ce0;
input  [15:0] weights_26_q0;
output  [6:0] weights_27_address0;
output   weights_27_ce0;
input  [15:0] weights_27_q0;
output  [6:0] weights_28_address0;
output   weights_28_ce0;
input  [15:0] weights_28_q0;
output  [6:0] weights_29_address0;
output   weights_29_ce0;
input  [15:0] weights_29_q0;
output  [6:0] weights_30_address0;
output   weights_30_ce0;
input  [15:0] weights_30_q0;
output  [6:0] weights_31_address0;
output   weights_31_ce0;
input  [15:0] weights_31_q0;
output  [6:0] weights_32_address0;
output   weights_32_ce0;
input  [15:0] weights_32_q0;
output  [6:0] weights_33_address0;
output   weights_33_ce0;
input  [15:0] weights_33_q0;
output  [6:0] weights_34_address0;
output   weights_34_ce0;
input  [15:0] weights_34_q0;
output  [6:0] weights_35_address0;
output   weights_35_ce0;
input  [15:0] weights_35_q0;
output  [6:0] weights_36_address0;
output   weights_36_ce0;
input  [15:0] weights_36_q0;
output  [6:0] weights_37_address0;
output   weights_37_ce0;
input  [15:0] weights_37_q0;
output  [6:0] weights_38_address0;
output   weights_38_ce0;
input  [15:0] weights_38_q0;
output  [6:0] weights_39_address0;
output   weights_39_ce0;
input  [15:0] weights_39_q0;
output  [6:0] weights_40_address0;
output   weights_40_ce0;
input  [15:0] weights_40_q0;
output  [6:0] weights_41_address0;
output   weights_41_ce0;
input  [15:0] weights_41_q0;
output  [6:0] weights_42_address0;
output   weights_42_ce0;
input  [15:0] weights_42_q0;
output  [6:0] weights_43_address0;
output   weights_43_ce0;
input  [15:0] weights_43_q0;
output  [6:0] weights_44_address0;
output   weights_44_ce0;
input  [15:0] weights_44_q0;
output  [6:0] weights_45_address0;
output   weights_45_ce0;
input  [15:0] weights_45_q0;
output  [6:0] weights_46_address0;
output   weights_46_ce0;
input  [15:0] weights_46_q0;
output  [6:0] weights_47_address0;
output   weights_47_ce0;
input  [15:0] weights_47_q0;
output  [6:0] weights_48_address0;
output   weights_48_ce0;
input  [15:0] weights_48_q0;
output  [6:0] weights_49_address0;
output   weights_49_ce0;
input  [15:0] weights_49_q0;
output  [6:0] weights_50_address0;
output   weights_50_ce0;
input  [15:0] weights_50_q0;
output  [6:0] weights_51_address0;
output   weights_51_ce0;
input  [15:0] weights_51_q0;
output  [6:0] weights_52_address0;
output   weights_52_ce0;
input  [15:0] weights_52_q0;
output  [6:0] weights_53_address0;
output   weights_53_ce0;
input  [15:0] weights_53_q0;
output  [6:0] weights_54_address0;
output   weights_54_ce0;
input  [15:0] weights_54_q0;
output  [6:0] weights_55_address0;
output   weights_55_ce0;
input  [15:0] weights_55_q0;
output  [6:0] weights_56_address0;
output   weights_56_ce0;
input  [15:0] weights_56_q0;
output  [6:0] weights_57_address0;
output   weights_57_ce0;
input  [15:0] weights_57_q0;
output  [6:0] weights_58_address0;
output   weights_58_ce0;
input  [15:0] weights_58_q0;
output  [6:0] weights_59_address0;
output   weights_59_ce0;
input  [15:0] weights_59_q0;
output  [6:0] weights_60_address0;
output   weights_60_ce0;
input  [15:0] weights_60_q0;
output  [6:0] weights_61_address0;
output   weights_61_ce0;
input  [15:0] weights_61_q0;
output  [6:0] weights_62_address0;
output   weights_62_ce0;
input  [15:0] weights_62_q0;
output  [6:0] weights_63_address0;
output   weights_63_ce0;
input  [15:0] weights_63_q0;
output  [6:0] weights_64_address0;
output   weights_64_ce0;
input  [15:0] weights_64_q0;
output  [6:0] weights_65_address0;
output   weights_65_ce0;
input  [15:0] weights_65_q0;
output  [6:0] weights_66_address0;
output   weights_66_ce0;
input  [15:0] weights_66_q0;
output  [6:0] weights_67_address0;
output   weights_67_ce0;
input  [15:0] weights_67_q0;
output  [6:0] weights_68_address0;
output   weights_68_ce0;
input  [15:0] weights_68_q0;
output  [6:0] weights_69_address0;
output   weights_69_ce0;
input  [15:0] weights_69_q0;
output  [6:0] weights_70_address0;
output   weights_70_ce0;
input  [15:0] weights_70_q0;
output  [6:0] weights_71_address0;
output   weights_71_ce0;
input  [15:0] weights_71_q0;
output  [6:0] weights_72_address0;
output   weights_72_ce0;
input  [15:0] weights_72_q0;
output  [6:0] weights_73_address0;
output   weights_73_ce0;
input  [15:0] weights_73_q0;
output  [6:0] weights_74_address0;
output   weights_74_ce0;
input  [15:0] weights_74_q0;
output  [6:0] weights_75_address0;
output   weights_75_ce0;
input  [15:0] weights_75_q0;
output  [6:0] weights_76_address0;
output   weights_76_ce0;
input  [15:0] weights_76_q0;
output  [6:0] weights_77_address0;
output   weights_77_ce0;
input  [15:0] weights_77_q0;
output  [6:0] weights_78_address0;
output   weights_78_ce0;
input  [15:0] weights_78_q0;
output  [6:0] weights_79_address0;
output   weights_79_ce0;
input  [15:0] weights_79_q0;
output  [6:0] weights_80_address0;
output   weights_80_ce0;
input  [15:0] weights_80_q0;
output  [6:0] weights_81_address0;
output   weights_81_ce0;
input  [15:0] weights_81_q0;
output  [6:0] weights_82_address0;
output   weights_82_ce0;
input  [15:0] weights_82_q0;
output  [6:0] weights_83_address0;
output   weights_83_ce0;
input  [15:0] weights_83_q0;
output  [6:0] weights_84_address0;
output   weights_84_ce0;
input  [15:0] weights_84_q0;
output  [6:0] weights_85_address0;
output   weights_85_ce0;
input  [15:0] weights_85_q0;
output  [6:0] weights_86_address0;
output   weights_86_ce0;
input  [15:0] weights_86_q0;
output  [6:0] weights_87_address0;
output   weights_87_ce0;
input  [15:0] weights_87_q0;
output  [6:0] weights_88_address0;
output   weights_88_ce0;
input  [15:0] weights_88_q0;
output  [6:0] weights_89_address0;
output   weights_89_ce0;
input  [15:0] weights_89_q0;
output  [6:0] weights_90_address0;
output   weights_90_ce0;
input  [15:0] weights_90_q0;
output  [6:0] weights_91_address0;
output   weights_91_ce0;
input  [15:0] weights_91_q0;
output  [6:0] weights_92_address0;
output   weights_92_ce0;
input  [15:0] weights_92_q0;
output  [6:0] weights_93_address0;
output   weights_93_ce0;
input  [15:0] weights_93_q0;
output  [6:0] weights_94_address0;
output   weights_94_ce0;
input  [15:0] weights_94_q0;
output  [6:0] weights_95_address0;
output   weights_95_ce0;
input  [15:0] weights_95_q0;
output  [6:0] weights_96_address0;
output   weights_96_ce0;
input  [15:0] weights_96_q0;
output  [6:0] weights_97_address0;
output   weights_97_ce0;
input  [15:0] weights_97_q0;
output  [6:0] weights_98_address0;
output   weights_98_ce0;
input  [15:0] weights_98_q0;
output  [6:0] weights_99_address0;
output   weights_99_ce0;
input  [15:0] weights_99_q0;
output  [6:0] weights_100_address0;
output   weights_100_ce0;
input  [15:0] weights_100_q0;
output  [6:0] weights_101_address0;
output   weights_101_ce0;
input  [15:0] weights_101_q0;
output  [6:0] weights_102_address0;
output   weights_102_ce0;
input  [15:0] weights_102_q0;
output  [6:0] weights_103_address0;
output   weights_103_ce0;
input  [15:0] weights_103_q0;
output  [6:0] weights_104_address0;
output   weights_104_ce0;
input  [15:0] weights_104_q0;
output  [6:0] weights_105_address0;
output   weights_105_ce0;
input  [15:0] weights_105_q0;
output  [6:0] weights_106_address0;
output   weights_106_ce0;
input  [15:0] weights_106_q0;
output  [6:0] weights_107_address0;
output   weights_107_ce0;
input  [15:0] weights_107_q0;
output  [6:0] weights_108_address0;
output   weights_108_ce0;
input  [15:0] weights_108_q0;
output  [6:0] weights_109_address0;
output   weights_109_ce0;
input  [15:0] weights_109_q0;
output  [6:0] weights_110_address0;
output   weights_110_ce0;
input  [15:0] weights_110_q0;
output  [6:0] weights_111_address0;
output   weights_111_ce0;
input  [15:0] weights_111_q0;
output  [6:0] weights_112_address0;
output   weights_112_ce0;
input  [15:0] weights_112_q0;
output  [6:0] weights_113_address0;
output   weights_113_ce0;
input  [15:0] weights_113_q0;
output  [6:0] weights_114_address0;
output   weights_114_ce0;
input  [15:0] weights_114_q0;
output  [6:0] weights_115_address0;
output   weights_115_ce0;
input  [15:0] weights_115_q0;
output  [6:0] weights_116_address0;
output   weights_116_ce0;
input  [15:0] weights_116_q0;
output  [6:0] weights_117_address0;
output   weights_117_ce0;
input  [15:0] weights_117_q0;
output  [6:0] weights_118_address0;
output   weights_118_ce0;
input  [15:0] weights_118_q0;
output  [6:0] weights_119_address0;
output   weights_119_ce0;
input  [15:0] weights_119_q0;
output  [6:0] weights_120_address0;
output   weights_120_ce0;
input  [15:0] weights_120_q0;
output  [6:0] weights_121_address0;
output   weights_121_ce0;
input  [15:0] weights_121_q0;
output  [6:0] weights_122_address0;
output   weights_122_ce0;
input  [15:0] weights_122_q0;
output  [6:0] weights_123_address0;
output   weights_123_ce0;
input  [15:0] weights_123_q0;
output  [6:0] weights_124_address0;
output   weights_124_ce0;
input  [15:0] weights_124_q0;
output  [6:0] weights_125_address0;
output   weights_125_ce0;
input  [15:0] weights_125_q0;
output  [6:0] weights_126_address0;
output   weights_126_ce0;
input  [15:0] weights_126_q0;
output  [6:0] weights_127_address0;
output   weights_127_ce0;
input  [15:0] weights_127_q0;
input  [15:0] input_0_load;
input  [15:0] input_1_load;
input  [15:0] input_2_load;
input  [15:0] input_3_load;
input  [15:0] input_4_load;
input  [15:0] input_5_load;
input  [15:0] input_6_load;
input  [15:0] input_7_load;
input  [15:0] input_8_load;
input  [15:0] input_9_load;
input  [15:0] input_10_load;
input  [15:0] input_11_load;
input  [15:0] input_12_load;
input  [15:0] input_13_load;
input  [15:0] input_14_load;
input  [15:0] input_15_load;
input  [15:0] input_16_load;
input  [15:0] input_17_load;
input  [15:0] input_18_load;
input  [15:0] input_19_load;
input  [15:0] input_20_load;
input  [15:0] input_21_load;
input  [15:0] input_22_load;
input  [15:0] input_23_load;
input  [15:0] input_24_load;
input  [15:0] input_25_load;
input  [15:0] input_26_load;
input  [15:0] input_27_load;
input  [15:0] input_28_load;
input  [15:0] input_29_load;
input  [15:0] input_30_load;
input  [15:0] input_31_load;
input  [15:0] input_32_load;
input  [15:0] input_33_load;
input  [15:0] input_34_load;
input  [15:0] input_35_load;
input  [15:0] input_36_load;
input  [15:0] input_37_load;
input  [15:0] input_38_load;
input  [15:0] input_39_load;
input  [15:0] input_40_load;
input  [15:0] input_41_load;
input  [15:0] input_42_load;
input  [15:0] input_43_load;
input  [15:0] input_44_load;
input  [15:0] input_45_load;
input  [15:0] input_46_load;
input  [15:0] input_47_load;
input  [15:0] input_48_load;
input  [15:0] input_49_load;
input  [15:0] input_50_load;
input  [15:0] input_51_load;
input  [15:0] input_52_load;
input  [15:0] input_53_load;
input  [15:0] input_54_load;
input  [15:0] input_55_load;
input  [15:0] input_56_load;
input  [15:0] input_57_load;
input  [15:0] input_58_load;
input  [15:0] input_59_load;
input  [15:0] input_60_load;
input  [15:0] input_61_load;
input  [15:0] input_62_load;
input  [15:0] input_63_load;
input  [15:0] input_64_load;
input  [15:0] input_65_load;
input  [15:0] input_66_load;
input  [15:0] input_67_load;
input  [15:0] input_68_load;
input  [15:0] input_69_load;
input  [15:0] input_70_load;
input  [15:0] input_71_load;
input  [15:0] input_72_load;
input  [15:0] input_73_load;
input  [15:0] input_74_load;
input  [15:0] input_75_load;
input  [15:0] input_76_load;
input  [15:0] input_77_load;
input  [15:0] input_78_load;
input  [15:0] input_79_load;
input  [15:0] input_80_load;
input  [15:0] input_81_load;
input  [15:0] input_82_load;
input  [15:0] input_83_load;
input  [15:0] input_84_load;
input  [15:0] input_85_load;
input  [15:0] input_86_load;
input  [15:0] input_87_load;
input  [15:0] input_88_load;
input  [15:0] input_89_load;
input  [15:0] input_90_load;
input  [15:0] input_91_load;
input  [15:0] input_92_load;
input  [15:0] input_93_load;
input  [15:0] input_94_load;
input  [15:0] input_95_load;
input  [15:0] input_96_load;
input  [15:0] input_97_load;
input  [15:0] input_98_load;
input  [15:0] input_99_load;
input  [15:0] input_100_load;
input  [15:0] input_101_load;
input  [15:0] input_102_load;
input  [15:0] input_103_load;
input  [15:0] input_104_load;
input  [15:0] input_105_load;
input  [15:0] input_106_load;
input  [15:0] input_107_load;
input  [15:0] input_108_load;
input  [15:0] input_109_load;
input  [15:0] input_110_load;
input  [15:0] input_111_load;
input  [15:0] input_112_load;
input  [15:0] input_113_load;
input  [15:0] input_114_load;
input  [15:0] input_115_load;
input  [15:0] input_116_load;
input  [15:0] input_117_load;
input  [15:0] input_118_load;
input  [15:0] input_119_load;
input  [15:0] input_120_load;
input  [15:0] input_121_load;
input  [15:0] input_122_load;
input  [15:0] input_123_load;
input  [15:0] input_124_load;
input  [15:0] input_125_load;
input  [15:0] input_126_load;
input  [15:0] input_127_load;
output  [6:0] sumArr_V_address0;
output   sumArr_V_ce0;
output   sumArr_V_we0;
output  [15:0] sumArr_V_d0;

reg ap_idle;
reg weights_0_ce0;
reg weights_1_ce0;
reg weights_2_ce0;
reg weights_3_ce0;
reg weights_4_ce0;
reg weights_5_ce0;
reg weights_6_ce0;
reg weights_7_ce0;
reg weights_8_ce0;
reg weights_9_ce0;
reg weights_10_ce0;
reg weights_11_ce0;
reg weights_12_ce0;
reg weights_13_ce0;
reg weights_14_ce0;
reg weights_15_ce0;
reg weights_16_ce0;
reg weights_17_ce0;
reg weights_18_ce0;
reg weights_19_ce0;
reg weights_20_ce0;
reg weights_21_ce0;
reg weights_22_ce0;
reg weights_23_ce0;
reg weights_24_ce0;
reg weights_25_ce0;
reg weights_26_ce0;
reg weights_27_ce0;
reg weights_28_ce0;
reg weights_29_ce0;
reg weights_30_ce0;
reg weights_31_ce0;
reg weights_32_ce0;
reg weights_33_ce0;
reg weights_34_ce0;
reg weights_35_ce0;
reg weights_36_ce0;
reg weights_37_ce0;
reg weights_38_ce0;
reg weights_39_ce0;
reg weights_40_ce0;
reg weights_41_ce0;
reg weights_42_ce0;
reg weights_43_ce0;
reg weights_44_ce0;
reg weights_45_ce0;
reg weights_46_ce0;
reg weights_47_ce0;
reg weights_48_ce0;
reg weights_49_ce0;
reg weights_50_ce0;
reg weights_51_ce0;
reg weights_52_ce0;
reg weights_53_ce0;
reg weights_54_ce0;
reg weights_55_ce0;
reg weights_56_ce0;
reg weights_57_ce0;
reg weights_58_ce0;
reg weights_59_ce0;
reg weights_60_ce0;
reg weights_61_ce0;
reg weights_62_ce0;
reg weights_63_ce0;
reg weights_64_ce0;
reg weights_65_ce0;
reg weights_66_ce0;
reg weights_67_ce0;
reg weights_68_ce0;
reg weights_69_ce0;
reg weights_70_ce0;
reg weights_71_ce0;
reg weights_72_ce0;
reg weights_73_ce0;
reg weights_74_ce0;
reg weights_75_ce0;
reg weights_76_ce0;
reg weights_77_ce0;
reg weights_78_ce0;
reg weights_79_ce0;
reg weights_80_ce0;
reg weights_81_ce0;
reg weights_82_ce0;
reg weights_83_ce0;
reg weights_84_ce0;
reg weights_85_ce0;
reg weights_86_ce0;
reg weights_87_ce0;
reg weights_88_ce0;
reg weights_89_ce0;
reg weights_90_ce0;
reg weights_91_ce0;
reg weights_92_ce0;
reg weights_93_ce0;
reg weights_94_ce0;
reg weights_95_ce0;
reg weights_96_ce0;
reg weights_97_ce0;
reg weights_98_ce0;
reg weights_99_ce0;
reg weights_100_ce0;
reg weights_101_ce0;
reg weights_102_ce0;
reg weights_103_ce0;
reg weights_104_ce0;
reg weights_105_ce0;
reg weights_106_ce0;
reg weights_107_ce0;
reg weights_108_ce0;
reg weights_109_ce0;
reg weights_110_ce0;
reg weights_111_ce0;
reg weights_112_ce0;
reg weights_113_ce0;
reg weights_114_ce0;
reg weights_115_ce0;
reg weights_116_ce0;
reg weights_117_ce0;
reg weights_118_ce0;
reg weights_119_ce0;
reg weights_120_ce0;
reg weights_121_ce0;
reg weights_122_ce0;
reg weights_123_ce0;
reg weights_124_ce0;
reg weights_125_ce0;
reg weights_126_ce0;
reg weights_127_ce0;
reg sumArr_V_ce0;
reg sumArr_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln96_fu_3039_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [7:0] inNeurons_1_reg_3769;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] inNeurons_1_reg_3769_pp0_iter1_reg;
reg   [7:0] inNeurons_1_reg_3769_pp0_iter2_reg;
reg   [7:0] inNeurons_1_reg_3769_pp0_iter3_reg;
reg   [7:0] inNeurons_1_reg_3769_pp0_iter4_reg;
wire   [15:0] tmp_1_fu_3203_p130;
reg   [15:0] tmp_1_reg_4419;
reg  signed [15:0] tmp_1_reg_4419_pp0_iter1_reg;
wire   [15:0] r_V_fu_3473_p130;
reg  signed [15:0] r_V_reg_4424;
wire   [63:0] zext_ln1169_fu_3071_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln100_fu_3741_p1;
reg   [7:0] inNeurons_fu_576;
wire   [7:0] inNeurons_2_fu_3045_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_inNeurons_1;
wire   [13:0] zext_ln96_fu_3051_p1;
wire   [13:0] add_ln100_fu_3055_p2;
wire   [6:0] lshr_ln_fu_3061_p4;
wire   [6:0] r_V_fu_3473_p129;
wire  signed [23:0] grp_fu_3755_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

nnlayer_multiDSP_mux_1288_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 16 ),
    .din33_WIDTH( 16 ),
    .din34_WIDTH( 16 ),
    .din35_WIDTH( 16 ),
    .din36_WIDTH( 16 ),
    .din37_WIDTH( 16 ),
    .din38_WIDTH( 16 ),
    .din39_WIDTH( 16 ),
    .din40_WIDTH( 16 ),
    .din41_WIDTH( 16 ),
    .din42_WIDTH( 16 ),
    .din43_WIDTH( 16 ),
    .din44_WIDTH( 16 ),
    .din45_WIDTH( 16 ),
    .din46_WIDTH( 16 ),
    .din47_WIDTH( 16 ),
    .din48_WIDTH( 16 ),
    .din49_WIDTH( 16 ),
    .din50_WIDTH( 16 ),
    .din51_WIDTH( 16 ),
    .din52_WIDTH( 16 ),
    .din53_WIDTH( 16 ),
    .din54_WIDTH( 16 ),
    .din55_WIDTH( 16 ),
    .din56_WIDTH( 16 ),
    .din57_WIDTH( 16 ),
    .din58_WIDTH( 16 ),
    .din59_WIDTH( 16 ),
    .din60_WIDTH( 16 ),
    .din61_WIDTH( 16 ),
    .din62_WIDTH( 16 ),
    .din63_WIDTH( 16 ),
    .din64_WIDTH( 16 ),
    .din65_WIDTH( 16 ),
    .din66_WIDTH( 16 ),
    .din67_WIDTH( 16 ),
    .din68_WIDTH( 16 ),
    .din69_WIDTH( 16 ),
    .din70_WIDTH( 16 ),
    .din71_WIDTH( 16 ),
    .din72_WIDTH( 16 ),
    .din73_WIDTH( 16 ),
    .din74_WIDTH( 16 ),
    .din75_WIDTH( 16 ),
    .din76_WIDTH( 16 ),
    .din77_WIDTH( 16 ),
    .din78_WIDTH( 16 ),
    .din79_WIDTH( 16 ),
    .din80_WIDTH( 16 ),
    .din81_WIDTH( 16 ),
    .din82_WIDTH( 16 ),
    .din83_WIDTH( 16 ),
    .din84_WIDTH( 16 ),
    .din85_WIDTH( 16 ),
    .din86_WIDTH( 16 ),
    .din87_WIDTH( 16 ),
    .din88_WIDTH( 16 ),
    .din89_WIDTH( 16 ),
    .din90_WIDTH( 16 ),
    .din91_WIDTH( 16 ),
    .din92_WIDTH( 16 ),
    .din93_WIDTH( 16 ),
    .din94_WIDTH( 16 ),
    .din95_WIDTH( 16 ),
    .din96_WIDTH( 16 ),
    .din97_WIDTH( 16 ),
    .din98_WIDTH( 16 ),
    .din99_WIDTH( 16 ),
    .din100_WIDTH( 16 ),
    .din101_WIDTH( 16 ),
    .din102_WIDTH( 16 ),
    .din103_WIDTH( 16 ),
    .din104_WIDTH( 16 ),
    .din105_WIDTH( 16 ),
    .din106_WIDTH( 16 ),
    .din107_WIDTH( 16 ),
    .din108_WIDTH( 16 ),
    .din109_WIDTH( 16 ),
    .din110_WIDTH( 16 ),
    .din111_WIDTH( 16 ),
    .din112_WIDTH( 16 ),
    .din113_WIDTH( 16 ),
    .din114_WIDTH( 16 ),
    .din115_WIDTH( 16 ),
    .din116_WIDTH( 16 ),
    .din117_WIDTH( 16 ),
    .din118_WIDTH( 16 ),
    .din119_WIDTH( 16 ),
    .din120_WIDTH( 16 ),
    .din121_WIDTH( 16 ),
    .din122_WIDTH( 16 ),
    .din123_WIDTH( 16 ),
    .din124_WIDTH( 16 ),
    .din125_WIDTH( 16 ),
    .din126_WIDTH( 16 ),
    .din127_WIDTH( 16 ),
    .din128_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mux_1288_16_1_1_U1(
    .din0(input_0_load),
    .din1(input_1_load),
    .din2(input_2_load),
    .din3(input_3_load),
    .din4(input_4_load),
    .din5(input_5_load),
    .din6(input_6_load),
    .din7(input_7_load),
    .din8(input_8_load),
    .din9(input_9_load),
    .din10(input_10_load),
    .din11(input_11_load),
    .din12(input_12_load),
    .din13(input_13_load),
    .din14(input_14_load),
    .din15(input_15_load),
    .din16(input_16_load),
    .din17(input_17_load),
    .din18(input_18_load),
    .din19(input_19_load),
    .din20(input_20_load),
    .din21(input_21_load),
    .din22(input_22_load),
    .din23(input_23_load),
    .din24(input_24_load),
    .din25(input_25_load),
    .din26(input_26_load),
    .din27(input_27_load),
    .din28(input_28_load),
    .din29(input_29_load),
    .din30(input_30_load),
    .din31(input_31_load),
    .din32(input_32_load),
    .din33(input_33_load),
    .din34(input_34_load),
    .din35(input_35_load),
    .din36(input_36_load),
    .din37(input_37_load),
    .din38(input_38_load),
    .din39(input_39_load),
    .din40(input_40_load),
    .din41(input_41_load),
    .din42(input_42_load),
    .din43(input_43_load),
    .din44(input_44_load),
    .din45(input_45_load),
    .din46(input_46_load),
    .din47(input_47_load),
    .din48(input_48_load),
    .din49(input_49_load),
    .din50(input_50_load),
    .din51(input_51_load),
    .din52(input_52_load),
    .din53(input_53_load),
    .din54(input_54_load),
    .din55(input_55_load),
    .din56(input_56_load),
    .din57(input_57_load),
    .din58(input_58_load),
    .din59(input_59_load),
    .din60(input_60_load),
    .din61(input_61_load),
    .din62(input_62_load),
    .din63(input_63_load),
    .din64(input_64_load),
    .din65(input_65_load),
    .din66(input_66_load),
    .din67(input_67_load),
    .din68(input_68_load),
    .din69(input_69_load),
    .din70(input_70_load),
    .din71(input_71_load),
    .din72(input_72_load),
    .din73(input_73_load),
    .din74(input_74_load),
    .din75(input_75_load),
    .din76(input_76_load),
    .din77(input_77_load),
    .din78(input_78_load),
    .din79(input_79_load),
    .din80(input_80_load),
    .din81(input_81_load),
    .din82(input_82_load),
    .din83(input_83_load),
    .din84(input_84_load),
    .din85(input_85_load),
    .din86(input_86_load),
    .din87(input_87_load),
    .din88(input_88_load),
    .din89(input_89_load),
    .din90(input_90_load),
    .din91(input_91_load),
    .din92(input_92_load),
    .din93(input_93_load),
    .din94(input_94_load),
    .din95(input_95_load),
    .din96(input_96_load),
    .din97(input_97_load),
    .din98(input_98_load),
    .din99(input_99_load),
    .din100(input_100_load),
    .din101(input_101_load),
    .din102(input_102_load),
    .din103(input_103_load),
    .din104(input_104_load),
    .din105(input_105_load),
    .din106(input_106_load),
    .din107(input_107_load),
    .din108(input_108_load),
    .din109(input_109_load),
    .din110(input_110_load),
    .din111(input_111_load),
    .din112(input_112_load),
    .din113(input_113_load),
    .din114(input_114_load),
    .din115(input_115_load),
    .din116(input_116_load),
    .din117(input_117_load),
    .din118(input_118_load),
    .din119(input_119_load),
    .din120(input_120_load),
    .din121(input_121_load),
    .din122(input_122_load),
    .din123(input_123_load),
    .din124(input_124_load),
    .din125(input_125_load),
    .din126(input_126_load),
    .din127(input_127_load),
    .din128(ap_sig_allocacmp_inNeurons_1),
    .dout(tmp_1_fu_3203_p130)
);

nnlayer_multiDSP_mux_1287_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 16 ),
    .din33_WIDTH( 16 ),
    .din34_WIDTH( 16 ),
    .din35_WIDTH( 16 ),
    .din36_WIDTH( 16 ),
    .din37_WIDTH( 16 ),
    .din38_WIDTH( 16 ),
    .din39_WIDTH( 16 ),
    .din40_WIDTH( 16 ),
    .din41_WIDTH( 16 ),
    .din42_WIDTH( 16 ),
    .din43_WIDTH( 16 ),
    .din44_WIDTH( 16 ),
    .din45_WIDTH( 16 ),
    .din46_WIDTH( 16 ),
    .din47_WIDTH( 16 ),
    .din48_WIDTH( 16 ),
    .din49_WIDTH( 16 ),
    .din50_WIDTH( 16 ),
    .din51_WIDTH( 16 ),
    .din52_WIDTH( 16 ),
    .din53_WIDTH( 16 ),
    .din54_WIDTH( 16 ),
    .din55_WIDTH( 16 ),
    .din56_WIDTH( 16 ),
    .din57_WIDTH( 16 ),
    .din58_WIDTH( 16 ),
    .din59_WIDTH( 16 ),
    .din60_WIDTH( 16 ),
    .din61_WIDTH( 16 ),
    .din62_WIDTH( 16 ),
    .din63_WIDTH( 16 ),
    .din64_WIDTH( 16 ),
    .din65_WIDTH( 16 ),
    .din66_WIDTH( 16 ),
    .din67_WIDTH( 16 ),
    .din68_WIDTH( 16 ),
    .din69_WIDTH( 16 ),
    .din70_WIDTH( 16 ),
    .din71_WIDTH( 16 ),
    .din72_WIDTH( 16 ),
    .din73_WIDTH( 16 ),
    .din74_WIDTH( 16 ),
    .din75_WIDTH( 16 ),
    .din76_WIDTH( 16 ),
    .din77_WIDTH( 16 ),
    .din78_WIDTH( 16 ),
    .din79_WIDTH( 16 ),
    .din80_WIDTH( 16 ),
    .din81_WIDTH( 16 ),
    .din82_WIDTH( 16 ),
    .din83_WIDTH( 16 ),
    .din84_WIDTH( 16 ),
    .din85_WIDTH( 16 ),
    .din86_WIDTH( 16 ),
    .din87_WIDTH( 16 ),
    .din88_WIDTH( 16 ),
    .din89_WIDTH( 16 ),
    .din90_WIDTH( 16 ),
    .din91_WIDTH( 16 ),
    .din92_WIDTH( 16 ),
    .din93_WIDTH( 16 ),
    .din94_WIDTH( 16 ),
    .din95_WIDTH( 16 ),
    .din96_WIDTH( 16 ),
    .din97_WIDTH( 16 ),
    .din98_WIDTH( 16 ),
    .din99_WIDTH( 16 ),
    .din100_WIDTH( 16 ),
    .din101_WIDTH( 16 ),
    .din102_WIDTH( 16 ),
    .din103_WIDTH( 16 ),
    .din104_WIDTH( 16 ),
    .din105_WIDTH( 16 ),
    .din106_WIDTH( 16 ),
    .din107_WIDTH( 16 ),
    .din108_WIDTH( 16 ),
    .din109_WIDTH( 16 ),
    .din110_WIDTH( 16 ),
    .din111_WIDTH( 16 ),
    .din112_WIDTH( 16 ),
    .din113_WIDTH( 16 ),
    .din114_WIDTH( 16 ),
    .din115_WIDTH( 16 ),
    .din116_WIDTH( 16 ),
    .din117_WIDTH( 16 ),
    .din118_WIDTH( 16 ),
    .din119_WIDTH( 16 ),
    .din120_WIDTH( 16 ),
    .din121_WIDTH( 16 ),
    .din122_WIDTH( 16 ),
    .din123_WIDTH( 16 ),
    .din124_WIDTH( 16 ),
    .din125_WIDTH( 16 ),
    .din126_WIDTH( 16 ),
    .din127_WIDTH( 16 ),
    .din128_WIDTH( 7 ),
    .dout_WIDTH( 16 ))
mux_1287_16_1_1_U2(
    .din0(weights_0_q0),
    .din1(weights_1_q0),
    .din2(weights_2_q0),
    .din3(weights_3_q0),
    .din4(weights_4_q0),
    .din5(weights_5_q0),
    .din6(weights_6_q0),
    .din7(weights_7_q0),
    .din8(weights_8_q0),
    .din9(weights_9_q0),
    .din10(weights_10_q0),
    .din11(weights_11_q0),
    .din12(weights_12_q0),
    .din13(weights_13_q0),
    .din14(weights_14_q0),
    .din15(weights_15_q0),
    .din16(weights_16_q0),
    .din17(weights_17_q0),
    .din18(weights_18_q0),
    .din19(weights_19_q0),
    .din20(weights_20_q0),
    .din21(weights_21_q0),
    .din22(weights_22_q0),
    .din23(weights_23_q0),
    .din24(weights_24_q0),
    .din25(weights_25_q0),
    .din26(weights_26_q0),
    .din27(weights_27_q0),
    .din28(weights_28_q0),
    .din29(weights_29_q0),
    .din30(weights_30_q0),
    .din31(weights_31_q0),
    .din32(weights_32_q0),
    .din33(weights_33_q0),
    .din34(weights_34_q0),
    .din35(weights_35_q0),
    .din36(weights_36_q0),
    .din37(weights_37_q0),
    .din38(weights_38_q0),
    .din39(weights_39_q0),
    .din40(weights_40_q0),
    .din41(weights_41_q0),
    .din42(weights_42_q0),
    .din43(weights_43_q0),
    .din44(weights_44_q0),
    .din45(weights_45_q0),
    .din46(weights_46_q0),
    .din47(weights_47_q0),
    .din48(weights_48_q0),
    .din49(weights_49_q0),
    .din50(weights_50_q0),
    .din51(weights_51_q0),
    .din52(weights_52_q0),
    .din53(weights_53_q0),
    .din54(weights_54_q0),
    .din55(weights_55_q0),
    .din56(weights_56_q0),
    .din57(weights_57_q0),
    .din58(weights_58_q0),
    .din59(weights_59_q0),
    .din60(weights_60_q0),
    .din61(weights_61_q0),
    .din62(weights_62_q0),
    .din63(weights_63_q0),
    .din64(weights_64_q0),
    .din65(weights_65_q0),
    .din66(weights_66_q0),
    .din67(weights_67_q0),
    .din68(weights_68_q0),
    .din69(weights_69_q0),
    .din70(weights_70_q0),
    .din71(weights_71_q0),
    .din72(weights_72_q0),
    .din73(weights_73_q0),
    .din74(weights_74_q0),
    .din75(weights_75_q0),
    .din76(weights_76_q0),
    .din77(weights_77_q0),
    .din78(weights_78_q0),
    .din79(weights_79_q0),
    .din80(weights_80_q0),
    .din81(weights_81_q0),
    .din82(weights_82_q0),
    .din83(weights_83_q0),
    .din84(weights_84_q0),
    .din85(weights_85_q0),
    .din86(weights_86_q0),
    .din87(weights_87_q0),
    .din88(weights_88_q0),
    .din89(weights_89_q0),
    .din90(weights_90_q0),
    .din91(weights_91_q0),
    .din92(weights_92_q0),
    .din93(weights_93_q0),
    .din94(weights_94_q0),
    .din95(weights_95_q0),
    .din96(weights_96_q0),
    .din97(weights_97_q0),
    .din98(weights_98_q0),
    .din99(weights_99_q0),
    .din100(weights_100_q0),
    .din101(weights_101_q0),
    .din102(weights_102_q0),
    .din103(weights_103_q0),
    .din104(weights_104_q0),
    .din105(weights_105_q0),
    .din106(weights_106_q0),
    .din107(weights_107_q0),
    .din108(weights_108_q0),
    .din109(weights_109_q0),
    .din110(weights_110_q0),
    .din111(weights_111_q0),
    .din112(weights_112_q0),
    .din113(weights_113_q0),
    .din114(weights_114_q0),
    .din115(weights_115_q0),
    .din116(weights_116_q0),
    .din117(weights_117_q0),
    .din118(weights_118_q0),
    .din119(weights_119_q0),
    .din120(weights_120_q0),
    .din121(weights_121_q0),
    .din122(weights_122_q0),
    .din123(weights_123_q0),
    .din124(weights_124_q0),
    .din125(weights_125_q0),
    .din126(weights_126_q0),
    .din127(weights_127_q0),
    .din128(r_V_fu_3473_p129),
    .dout(r_V_fu_3473_p130)
);

nnlayer_multiDSP_mul_mul_16s_16s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
mul_mul_16s_16s_24_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_reg_4419_pp0_iter1_reg),
    .din1(r_V_reg_4424),
    .ce(1'b1),
    .dout(grp_fu_3755_p2)
);

nnlayer_multiDSP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln96_fu_3039_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            inNeurons_fu_576 <= inNeurons_2_fu_3045_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            inNeurons_fu_576 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        inNeurons_1_reg_3769 <= ap_sig_allocacmp_inNeurons_1;
        inNeurons_1_reg_3769_pp0_iter1_reg <= inNeurons_1_reg_3769;
        r_V_reg_4424 <= r_V_fu_3473_p130;
        tmp_1_reg_4419_pp0_iter1_reg <= tmp_1_reg_4419;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        inNeurons_1_reg_3769_pp0_iter2_reg <= inNeurons_1_reg_3769_pp0_iter1_reg;
        inNeurons_1_reg_3769_pp0_iter3_reg <= inNeurons_1_reg_3769_pp0_iter2_reg;
        inNeurons_1_reg_3769_pp0_iter4_reg <= inNeurons_1_reg_3769_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_fu_3039_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_reg_4419 <= tmp_1_fu_3203_p130;
    end
end

always @ (*) begin
    if (((icmp_ln96_fu_3039_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_inNeurons_1 = 8'd0;
    end else begin
        ap_sig_allocacmp_inNeurons_1 = inNeurons_fu_576;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        sumArr_V_ce0 = 1'b1;
    end else begin
        sumArr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        sumArr_V_we0 = 1'b1;
    end else begin
        sumArr_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_ce0 = 1'b1;
    end else begin
        weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_100_ce0 = 1'b1;
    end else begin
        weights_100_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_101_ce0 = 1'b1;
    end else begin
        weights_101_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_102_ce0 = 1'b1;
    end else begin
        weights_102_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_103_ce0 = 1'b1;
    end else begin
        weights_103_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_104_ce0 = 1'b1;
    end else begin
        weights_104_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_105_ce0 = 1'b1;
    end else begin
        weights_105_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_106_ce0 = 1'b1;
    end else begin
        weights_106_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_107_ce0 = 1'b1;
    end else begin
        weights_107_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_108_ce0 = 1'b1;
    end else begin
        weights_108_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_109_ce0 = 1'b1;
    end else begin
        weights_109_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_10_ce0 = 1'b1;
    end else begin
        weights_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_110_ce0 = 1'b1;
    end else begin
        weights_110_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_111_ce0 = 1'b1;
    end else begin
        weights_111_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_112_ce0 = 1'b1;
    end else begin
        weights_112_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_113_ce0 = 1'b1;
    end else begin
        weights_113_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_114_ce0 = 1'b1;
    end else begin
        weights_114_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_115_ce0 = 1'b1;
    end else begin
        weights_115_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_116_ce0 = 1'b1;
    end else begin
        weights_116_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_117_ce0 = 1'b1;
    end else begin
        weights_117_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_118_ce0 = 1'b1;
    end else begin
        weights_118_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_119_ce0 = 1'b1;
    end else begin
        weights_119_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_11_ce0 = 1'b1;
    end else begin
        weights_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_120_ce0 = 1'b1;
    end else begin
        weights_120_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_121_ce0 = 1'b1;
    end else begin
        weights_121_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_122_ce0 = 1'b1;
    end else begin
        weights_122_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_123_ce0 = 1'b1;
    end else begin
        weights_123_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_124_ce0 = 1'b1;
    end else begin
        weights_124_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_125_ce0 = 1'b1;
    end else begin
        weights_125_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_126_ce0 = 1'b1;
    end else begin
        weights_126_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_127_ce0 = 1'b1;
    end else begin
        weights_127_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_12_ce0 = 1'b1;
    end else begin
        weights_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_13_ce0 = 1'b1;
    end else begin
        weights_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_14_ce0 = 1'b1;
    end else begin
        weights_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_15_ce0 = 1'b1;
    end else begin
        weights_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_16_ce0 = 1'b1;
    end else begin
        weights_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_17_ce0 = 1'b1;
    end else begin
        weights_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_18_ce0 = 1'b1;
    end else begin
        weights_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_19_ce0 = 1'b1;
    end else begin
        weights_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_1_ce0 = 1'b1;
    end else begin
        weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_20_ce0 = 1'b1;
    end else begin
        weights_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_21_ce0 = 1'b1;
    end else begin
        weights_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_22_ce0 = 1'b1;
    end else begin
        weights_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_23_ce0 = 1'b1;
    end else begin
        weights_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_24_ce0 = 1'b1;
    end else begin
        weights_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_25_ce0 = 1'b1;
    end else begin
        weights_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_26_ce0 = 1'b1;
    end else begin
        weights_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_27_ce0 = 1'b1;
    end else begin
        weights_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_28_ce0 = 1'b1;
    end else begin
        weights_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_29_ce0 = 1'b1;
    end else begin
        weights_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_2_ce0 = 1'b1;
    end else begin
        weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_30_ce0 = 1'b1;
    end else begin
        weights_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_31_ce0 = 1'b1;
    end else begin
        weights_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_32_ce0 = 1'b1;
    end else begin
        weights_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_33_ce0 = 1'b1;
    end else begin
        weights_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_34_ce0 = 1'b1;
    end else begin
        weights_34_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_35_ce0 = 1'b1;
    end else begin
        weights_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_36_ce0 = 1'b1;
    end else begin
        weights_36_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_37_ce0 = 1'b1;
    end else begin
        weights_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_38_ce0 = 1'b1;
    end else begin
        weights_38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_39_ce0 = 1'b1;
    end else begin
        weights_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_3_ce0 = 1'b1;
    end else begin
        weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_40_ce0 = 1'b1;
    end else begin
        weights_40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_41_ce0 = 1'b1;
    end else begin
        weights_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_42_ce0 = 1'b1;
    end else begin
        weights_42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_43_ce0 = 1'b1;
    end else begin
        weights_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_44_ce0 = 1'b1;
    end else begin
        weights_44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_45_ce0 = 1'b1;
    end else begin
        weights_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_46_ce0 = 1'b1;
    end else begin
        weights_46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_47_ce0 = 1'b1;
    end else begin
        weights_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_48_ce0 = 1'b1;
    end else begin
        weights_48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_49_ce0 = 1'b1;
    end else begin
        weights_49_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_4_ce0 = 1'b1;
    end else begin
        weights_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_50_ce0 = 1'b1;
    end else begin
        weights_50_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_51_ce0 = 1'b1;
    end else begin
        weights_51_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_52_ce0 = 1'b1;
    end else begin
        weights_52_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_53_ce0 = 1'b1;
    end else begin
        weights_53_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_54_ce0 = 1'b1;
    end else begin
        weights_54_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_55_ce0 = 1'b1;
    end else begin
        weights_55_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_56_ce0 = 1'b1;
    end else begin
        weights_56_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_57_ce0 = 1'b1;
    end else begin
        weights_57_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_58_ce0 = 1'b1;
    end else begin
        weights_58_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_59_ce0 = 1'b1;
    end else begin
        weights_59_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_5_ce0 = 1'b1;
    end else begin
        weights_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_60_ce0 = 1'b1;
    end else begin
        weights_60_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_61_ce0 = 1'b1;
    end else begin
        weights_61_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_62_ce0 = 1'b1;
    end else begin
        weights_62_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_63_ce0 = 1'b1;
    end else begin
        weights_63_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_64_ce0 = 1'b1;
    end else begin
        weights_64_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_65_ce0 = 1'b1;
    end else begin
        weights_65_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_66_ce0 = 1'b1;
    end else begin
        weights_66_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_67_ce0 = 1'b1;
    end else begin
        weights_67_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_68_ce0 = 1'b1;
    end else begin
        weights_68_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_69_ce0 = 1'b1;
    end else begin
        weights_69_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_6_ce0 = 1'b1;
    end else begin
        weights_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_70_ce0 = 1'b1;
    end else begin
        weights_70_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_71_ce0 = 1'b1;
    end else begin
        weights_71_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_72_ce0 = 1'b1;
    end else begin
        weights_72_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_73_ce0 = 1'b1;
    end else begin
        weights_73_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_74_ce0 = 1'b1;
    end else begin
        weights_74_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_75_ce0 = 1'b1;
    end else begin
        weights_75_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_76_ce0 = 1'b1;
    end else begin
        weights_76_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_77_ce0 = 1'b1;
    end else begin
        weights_77_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_78_ce0 = 1'b1;
    end else begin
        weights_78_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_79_ce0 = 1'b1;
    end else begin
        weights_79_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_7_ce0 = 1'b1;
    end else begin
        weights_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_80_ce0 = 1'b1;
    end else begin
        weights_80_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_81_ce0 = 1'b1;
    end else begin
        weights_81_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_82_ce0 = 1'b1;
    end else begin
        weights_82_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_83_ce0 = 1'b1;
    end else begin
        weights_83_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_84_ce0 = 1'b1;
    end else begin
        weights_84_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_85_ce0 = 1'b1;
    end else begin
        weights_85_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_86_ce0 = 1'b1;
    end else begin
        weights_86_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_87_ce0 = 1'b1;
    end else begin
        weights_87_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_88_ce0 = 1'b1;
    end else begin
        weights_88_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_89_ce0 = 1'b1;
    end else begin
        weights_89_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_8_ce0 = 1'b1;
    end else begin
        weights_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_90_ce0 = 1'b1;
    end else begin
        weights_90_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_91_ce0 = 1'b1;
    end else begin
        weights_91_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_92_ce0 = 1'b1;
    end else begin
        weights_92_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_93_ce0 = 1'b1;
    end else begin
        weights_93_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_94_ce0 = 1'b1;
    end else begin
        weights_94_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_95_ce0 = 1'b1;
    end else begin
        weights_95_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_96_ce0 = 1'b1;
    end else begin
        weights_96_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_97_ce0 = 1'b1;
    end else begin
        weights_97_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_98_ce0 = 1'b1;
    end else begin
        weights_98_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_99_ce0 = 1'b1;
    end else begin
        weights_99_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_9_ce0 = 1'b1;
    end else begin
        weights_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_3055_p2 = (mul_i + zext_ln96_fu_3051_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln96_fu_3039_p2 = ((ap_sig_allocacmp_inNeurons_1 == 8'd128) ? 1'b1 : 1'b0);

assign inNeurons_2_fu_3045_p2 = (ap_sig_allocacmp_inNeurons_1 + 8'd1);

assign lshr_ln_fu_3061_p4 = {{add_ln100_fu_3055_p2[13:7]}};

assign r_V_fu_3473_p129 = inNeurons_1_reg_3769[6:0];

assign sumArr_V_address0 = zext_ln100_fu_3741_p1;

assign sumArr_V_d0 = {{grp_fu_3755_p2[23:8]}};

assign weights_0_address0 = zext_ln1169_fu_3071_p1;

assign weights_100_address0 = zext_ln1169_fu_3071_p1;

assign weights_101_address0 = zext_ln1169_fu_3071_p1;

assign weights_102_address0 = zext_ln1169_fu_3071_p1;

assign weights_103_address0 = zext_ln1169_fu_3071_p1;

assign weights_104_address0 = zext_ln1169_fu_3071_p1;

assign weights_105_address0 = zext_ln1169_fu_3071_p1;

assign weights_106_address0 = zext_ln1169_fu_3071_p1;

assign weights_107_address0 = zext_ln1169_fu_3071_p1;

assign weights_108_address0 = zext_ln1169_fu_3071_p1;

assign weights_109_address0 = zext_ln1169_fu_3071_p1;

assign weights_10_address0 = zext_ln1169_fu_3071_p1;

assign weights_110_address0 = zext_ln1169_fu_3071_p1;

assign weights_111_address0 = zext_ln1169_fu_3071_p1;

assign weights_112_address0 = zext_ln1169_fu_3071_p1;

assign weights_113_address0 = zext_ln1169_fu_3071_p1;

assign weights_114_address0 = zext_ln1169_fu_3071_p1;

assign weights_115_address0 = zext_ln1169_fu_3071_p1;

assign weights_116_address0 = zext_ln1169_fu_3071_p1;

assign weights_117_address0 = zext_ln1169_fu_3071_p1;

assign weights_118_address0 = zext_ln1169_fu_3071_p1;

assign weights_119_address0 = zext_ln1169_fu_3071_p1;

assign weights_11_address0 = zext_ln1169_fu_3071_p1;

assign weights_120_address0 = zext_ln1169_fu_3071_p1;

assign weights_121_address0 = zext_ln1169_fu_3071_p1;

assign weights_122_address0 = zext_ln1169_fu_3071_p1;

assign weights_123_address0 = zext_ln1169_fu_3071_p1;

assign weights_124_address0 = zext_ln1169_fu_3071_p1;

assign weights_125_address0 = zext_ln1169_fu_3071_p1;

assign weights_126_address0 = zext_ln1169_fu_3071_p1;

assign weights_127_address0 = zext_ln1169_fu_3071_p1;

assign weights_12_address0 = zext_ln1169_fu_3071_p1;

assign weights_13_address0 = zext_ln1169_fu_3071_p1;

assign weights_14_address0 = zext_ln1169_fu_3071_p1;

assign weights_15_address0 = zext_ln1169_fu_3071_p1;

assign weights_16_address0 = zext_ln1169_fu_3071_p1;

assign weights_17_address0 = zext_ln1169_fu_3071_p1;

assign weights_18_address0 = zext_ln1169_fu_3071_p1;

assign weights_19_address0 = zext_ln1169_fu_3071_p1;

assign weights_1_address0 = zext_ln1169_fu_3071_p1;

assign weights_20_address0 = zext_ln1169_fu_3071_p1;

assign weights_21_address0 = zext_ln1169_fu_3071_p1;

assign weights_22_address0 = zext_ln1169_fu_3071_p1;

assign weights_23_address0 = zext_ln1169_fu_3071_p1;

assign weights_24_address0 = zext_ln1169_fu_3071_p1;

assign weights_25_address0 = zext_ln1169_fu_3071_p1;

assign weights_26_address0 = zext_ln1169_fu_3071_p1;

assign weights_27_address0 = zext_ln1169_fu_3071_p1;

assign weights_28_address0 = zext_ln1169_fu_3071_p1;

assign weights_29_address0 = zext_ln1169_fu_3071_p1;

assign weights_2_address0 = zext_ln1169_fu_3071_p1;

assign weights_30_address0 = zext_ln1169_fu_3071_p1;

assign weights_31_address0 = zext_ln1169_fu_3071_p1;

assign weights_32_address0 = zext_ln1169_fu_3071_p1;

assign weights_33_address0 = zext_ln1169_fu_3071_p1;

assign weights_34_address0 = zext_ln1169_fu_3071_p1;

assign weights_35_address0 = zext_ln1169_fu_3071_p1;

assign weights_36_address0 = zext_ln1169_fu_3071_p1;

assign weights_37_address0 = zext_ln1169_fu_3071_p1;

assign weights_38_address0 = zext_ln1169_fu_3071_p1;

assign weights_39_address0 = zext_ln1169_fu_3071_p1;

assign weights_3_address0 = zext_ln1169_fu_3071_p1;

assign weights_40_address0 = zext_ln1169_fu_3071_p1;

assign weights_41_address0 = zext_ln1169_fu_3071_p1;

assign weights_42_address0 = zext_ln1169_fu_3071_p1;

assign weights_43_address0 = zext_ln1169_fu_3071_p1;

assign weights_44_address0 = zext_ln1169_fu_3071_p1;

assign weights_45_address0 = zext_ln1169_fu_3071_p1;

assign weights_46_address0 = zext_ln1169_fu_3071_p1;

assign weights_47_address0 = zext_ln1169_fu_3071_p1;

assign weights_48_address0 = zext_ln1169_fu_3071_p1;

assign weights_49_address0 = zext_ln1169_fu_3071_p1;

assign weights_4_address0 = zext_ln1169_fu_3071_p1;

assign weights_50_address0 = zext_ln1169_fu_3071_p1;

assign weights_51_address0 = zext_ln1169_fu_3071_p1;

assign weights_52_address0 = zext_ln1169_fu_3071_p1;

assign weights_53_address0 = zext_ln1169_fu_3071_p1;

assign weights_54_address0 = zext_ln1169_fu_3071_p1;

assign weights_55_address0 = zext_ln1169_fu_3071_p1;

assign weights_56_address0 = zext_ln1169_fu_3071_p1;

assign weights_57_address0 = zext_ln1169_fu_3071_p1;

assign weights_58_address0 = zext_ln1169_fu_3071_p1;

assign weights_59_address0 = zext_ln1169_fu_3071_p1;

assign weights_5_address0 = zext_ln1169_fu_3071_p1;

assign weights_60_address0 = zext_ln1169_fu_3071_p1;

assign weights_61_address0 = zext_ln1169_fu_3071_p1;

assign weights_62_address0 = zext_ln1169_fu_3071_p1;

assign weights_63_address0 = zext_ln1169_fu_3071_p1;

assign weights_64_address0 = zext_ln1169_fu_3071_p1;

assign weights_65_address0 = zext_ln1169_fu_3071_p1;

assign weights_66_address0 = zext_ln1169_fu_3071_p1;

assign weights_67_address0 = zext_ln1169_fu_3071_p1;

assign weights_68_address0 = zext_ln1169_fu_3071_p1;

assign weights_69_address0 = zext_ln1169_fu_3071_p1;

assign weights_6_address0 = zext_ln1169_fu_3071_p1;

assign weights_70_address0 = zext_ln1169_fu_3071_p1;

assign weights_71_address0 = zext_ln1169_fu_3071_p1;

assign weights_72_address0 = zext_ln1169_fu_3071_p1;

assign weights_73_address0 = zext_ln1169_fu_3071_p1;

assign weights_74_address0 = zext_ln1169_fu_3071_p1;

assign weights_75_address0 = zext_ln1169_fu_3071_p1;

assign weights_76_address0 = zext_ln1169_fu_3071_p1;

assign weights_77_address0 = zext_ln1169_fu_3071_p1;

assign weights_78_address0 = zext_ln1169_fu_3071_p1;

assign weights_79_address0 = zext_ln1169_fu_3071_p1;

assign weights_7_address0 = zext_ln1169_fu_3071_p1;

assign weights_80_address0 = zext_ln1169_fu_3071_p1;

assign weights_81_address0 = zext_ln1169_fu_3071_p1;

assign weights_82_address0 = zext_ln1169_fu_3071_p1;

assign weights_83_address0 = zext_ln1169_fu_3071_p1;

assign weights_84_address0 = zext_ln1169_fu_3071_p1;

assign weights_85_address0 = zext_ln1169_fu_3071_p1;

assign weights_86_address0 = zext_ln1169_fu_3071_p1;

assign weights_87_address0 = zext_ln1169_fu_3071_p1;

assign weights_88_address0 = zext_ln1169_fu_3071_p1;

assign weights_89_address0 = zext_ln1169_fu_3071_p1;

assign weights_8_address0 = zext_ln1169_fu_3071_p1;

assign weights_90_address0 = zext_ln1169_fu_3071_p1;

assign weights_91_address0 = zext_ln1169_fu_3071_p1;

assign weights_92_address0 = zext_ln1169_fu_3071_p1;

assign weights_93_address0 = zext_ln1169_fu_3071_p1;

assign weights_94_address0 = zext_ln1169_fu_3071_p1;

assign weights_95_address0 = zext_ln1169_fu_3071_p1;

assign weights_96_address0 = zext_ln1169_fu_3071_p1;

assign weights_97_address0 = zext_ln1169_fu_3071_p1;

assign weights_98_address0 = zext_ln1169_fu_3071_p1;

assign weights_99_address0 = zext_ln1169_fu_3071_p1;

assign weights_9_address0 = zext_ln1169_fu_3071_p1;

assign zext_ln100_fu_3741_p1 = inNeurons_1_reg_3769_pp0_iter4_reg;

assign zext_ln1169_fu_3071_p1 = lshr_ln_fu_3061_p4;

assign zext_ln96_fu_3051_p1 = ap_sig_allocacmp_inNeurons_1;

endmodule //nnlayer_multiDSP_nnlayer_multiDSP_Pipeline_VITIS_LOOP_96_2
