// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nnlayer_multiDSP_nnlayer_multiDSP_Pipeline_VITIS_LOOP_91_1_VITIS_LOOP_95_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bound,
        weights_address0,
        weights_ce0,
        weights_q0,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [22:0] bound;
output  [13:0] weights_address0;
output   weights_ce0;
input  [15:0] weights_q0;
output  [6:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [6:0] bias_address0;
output   bias_ce0;
input  [15:0] bias_q0;
output  [6:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [15:0] output_V_d0;

reg ap_idle;
reg weights_ce0;
reg input_r_ce0;
reg bias_ce0;
reg output_V_ce0;
reg output_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln91_fu_167_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln95_fu_184_p2;
reg   [0:0] icmp_ln95_reg_368;
reg   [0:0] icmp_ln95_reg_368_pp0_iter2_reg;
reg   [0:0] icmp_ln95_reg_368_pp0_iter3_reg;
wire   [15:0] select_ln91_1_fu_204_p3;
reg   [15:0] select_ln91_1_reg_373;
reg   [15:0] select_ln91_1_reg_373_pp0_iter2_reg;
reg   [15:0] select_ln91_1_reg_373_pp0_iter3_reg;
wire   [0:0] ifzero_fu_250_p2;
reg   [0:0] ifzero_reg_388;
reg   [0:0] ifzero_reg_388_pp0_iter2_reg;
reg   [0:0] ifzero_reg_388_pp0_iter3_reg;
reg   [0:0] ifzero_reg_388_pp0_iter4_reg;
wire   [63:0] zext_ln101_fu_297_p1;
reg   [63:0] zext_ln101_reg_407;
wire   [63:0] zext_ln99_1_fu_234_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln99_fu_239_p1;
reg   [15:0] lhs_fu_70;
wire   [15:0] sum_V_fu_301_p4;
reg   [15:0] ap_sig_allocacmp_lhs_load;
wire    ap_loop_init;
reg   [7:0] inNeurons_fu_74;
wire   [7:0] inNeurons_1_fu_244_p2;
reg   [15:0] outNeurons_fu_78;
reg   [22:0] indvar_flatten_fu_82;
wire   [22:0] add_ln91_fu_172_p2;
wire   [15:0] add_ln91_1_fu_198_p2;
wire   [6:0] trunc_ln91_fu_212_p1;
wire   [7:0] select_ln91_fu_190_p3;
wire   [13:0] mul_i_mid2_fu_216_p3;
wire   [13:0] zext_ln95_fu_224_p1;
wire   [13:0] add_ln99_fu_228_p2;
wire   [15:0] select_ln91_2_fu_282_p3;
wire  signed [23:0] sum_V_fu_301_p1;
wire   [23:0] grp_fu_322_p3;
wire   [23:0] grp_fu_322_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

nnlayer_multiDSP_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_r_q0),
    .din1(weights_q0),
    .din2(grp_fu_322_p2),
    .ce(1'b1),
    .dout(grp_fu_322_p3)
);

nnlayer_multiDSP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            inNeurons_fu_74 <= 8'd0;
        end else if (((icmp_ln91_fu_167_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            inNeurons_fu_74 <= inNeurons_1_fu_244_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_82 <= 23'd0;
        end else if (((icmp_ln91_fu_167_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_82 <= add_ln91_fu_172_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            lhs_fu_70 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
            lhs_fu_70 <= {{sum_V_fu_301_p1[23:8]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outNeurons_fu_78 <= 16'd0;
        end else if (((icmp_ln91_fu_167_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            outNeurons_fu_78 <= select_ln91_1_fu_204_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln95_reg_368_pp0_iter2_reg <= icmp_ln95_reg_368;
        icmp_ln95_reg_368_pp0_iter3_reg <= icmp_ln95_reg_368_pp0_iter2_reg;
        ifzero_reg_388_pp0_iter2_reg <= ifzero_reg_388;
        ifzero_reg_388_pp0_iter3_reg <= ifzero_reg_388_pp0_iter2_reg;
        ifzero_reg_388_pp0_iter4_reg <= ifzero_reg_388_pp0_iter3_reg;
        select_ln91_1_reg_373_pp0_iter2_reg <= select_ln91_1_reg_373;
        select_ln91_1_reg_373_pp0_iter3_reg <= select_ln91_1_reg_373_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_167_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln95_reg_368 <= icmp_ln95_fu_184_p2;
        ifzero_reg_388 <= ifzero_fu_250_p2;
        select_ln91_1_reg_373 <= select_ln91_1_fu_204_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ifzero_reg_388_pp0_iter3_reg == 1'd1))) begin
        zext_ln101_reg_407[15 : 0] <= zext_ln101_fu_297_p1[15 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln91_fu_167_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        ap_sig_allocacmp_lhs_load = {{sum_V_fu_301_p1[23:8]}};
    end else begin
        ap_sig_allocacmp_lhs_load = lhs_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (ifzero_reg_388_pp0_iter4_reg == 1'd1))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_ce0 = 1'b1;
    end else begin
        weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln91_1_fu_198_p2 = (outNeurons_fu_78 + 16'd1);

assign add_ln91_fu_172_p2 = (indvar_flatten_fu_82 + 23'd1);

assign add_ln99_fu_228_p2 = (mul_i_mid2_fu_216_p3 + zext_ln95_fu_224_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign bias_address0 = zext_ln101_fu_297_p1;

assign grp_fu_322_p2 = {{select_ln91_2_fu_282_p3}, {8'd0}};

assign icmp_ln91_fu_167_p2 = ((indvar_flatten_fu_82 == bound) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_184_p2 = ((inNeurons_fu_74 == 8'd128) ? 1'b1 : 1'b0);

assign ifzero_fu_250_p2 = ((inNeurons_1_fu_244_p2 == 8'd128) ? 1'b1 : 1'b0);

assign inNeurons_1_fu_244_p2 = (select_ln91_fu_190_p3 + 8'd1);

assign input_r_address0 = zext_ln99_fu_239_p1;

assign mul_i_mid2_fu_216_p3 = {{trunc_ln91_fu_212_p1}, {7'd0}};

assign output_V_address0 = zext_ln101_reg_407;

assign output_V_d0 = (bias_q0 + sum_V_fu_301_p4);

assign select_ln91_1_fu_204_p3 = ((icmp_ln95_fu_184_p2[0:0] == 1'b1) ? add_ln91_1_fu_198_p2 : outNeurons_fu_78);

assign select_ln91_2_fu_282_p3 = ((icmp_ln95_reg_368_pp0_iter3_reg[0:0] == 1'b1) ? 16'd0 : ap_sig_allocacmp_lhs_load);

assign select_ln91_fu_190_p3 = ((icmp_ln95_fu_184_p2[0:0] == 1'b1) ? 8'd0 : inNeurons_fu_74);

assign sum_V_fu_301_p1 = grp_fu_322_p3;

assign sum_V_fu_301_p4 = {{sum_V_fu_301_p1[23:8]}};

assign trunc_ln91_fu_212_p1 = select_ln91_1_fu_204_p3[6:0];

assign weights_address0 = zext_ln99_1_fu_234_p1;

assign zext_ln101_fu_297_p1 = select_ln91_1_reg_373_pp0_iter3_reg;

assign zext_ln95_fu_224_p1 = select_ln91_fu_190_p3;

assign zext_ln99_1_fu_234_p1 = add_ln99_fu_228_p2;

assign zext_ln99_fu_239_p1 = select_ln91_fu_190_p3;

always @ (posedge ap_clk) begin
    zext_ln101_reg_407[63:16] <= 48'b000000000000000000000000000000000000000000000000;
end

endmodule //nnlayer_multiDSP_nnlayer_multiDSP_Pipeline_VITIS_LOOP_91_1_VITIS_LOOP_95_2
