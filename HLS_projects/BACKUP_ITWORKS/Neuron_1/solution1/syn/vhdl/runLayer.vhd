-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity runLayer is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 11;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_local_block : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of runLayer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "runLayer_runLayer,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.884000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=746,HLS_SYN_LUT=965,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_local_deadlock : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_r_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_r_ce0 : STD_LOGIC;
    signal output_r_we0 : STD_LOGIC;
    signal output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal numOfInNeurons : STD_LOGIC_VECTOR (15 downto 0);
    signal numOfInNeurons_read_reg_222 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln27_fu_156_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln27_reg_228 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_233 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_fu_175_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln25_reg_240 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln25_fu_181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_reg_245 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln25_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln27_fu_189_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln27_reg_251 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_r_addr_reg_256 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal output_r_load_reg_261 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_bias_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_bias_load_reg_271 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_weights_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_weights_ce0 : STD_LOGIC;
    signal tmp_weights_we0 : STD_LOGIC;
    signal tmp_weights_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_bias_ce0 : STD_LOGIC;
    signal tmp_bias_we0 : STD_LOGIC;
    signal grp_runLayer_Pipeline_1_fu_123_ap_start : STD_LOGIC;
    signal grp_runLayer_Pipeline_1_fu_123_ap_done : STD_LOGIC;
    signal grp_runLayer_Pipeline_1_fu_123_ap_idle : STD_LOGIC;
    signal grp_runLayer_Pipeline_1_fu_123_ap_ready : STD_LOGIC;
    signal grp_runLayer_Pipeline_1_fu_123_bias_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_runLayer_Pipeline_1_fu_123_bias_ce0 : STD_LOGIC;
    signal grp_runLayer_Pipeline_1_fu_123_tmp_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_runLayer_Pipeline_1_fu_123_tmp_bias_ce0 : STD_LOGIC;
    signal grp_runLayer_Pipeline_1_fu_123_tmp_bias_we0 : STD_LOGIC;
    signal grp_runLayer_Pipeline_1_fu_123_tmp_bias_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_runLayer_Pipeline_2_fu_131_ap_start : STD_LOGIC;
    signal grp_runLayer_Pipeline_2_fu_131_ap_done : STD_LOGIC;
    signal grp_runLayer_Pipeline_2_fu_131_ap_idle : STD_LOGIC;
    signal grp_runLayer_Pipeline_2_fu_131_ap_ready : STD_LOGIC;
    signal grp_runLayer_Pipeline_2_fu_131_weights_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_runLayer_Pipeline_2_fu_131_weights_ce0 : STD_LOGIC;
    signal grp_runLayer_Pipeline_2_fu_131_tmp_weights_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_runLayer_Pipeline_2_fu_131_tmp_weights_ce0 : STD_LOGIC;
    signal grp_runLayer_Pipeline_2_fu_131_tmp_weights_we0 : STD_LOGIC;
    signal grp_runLayer_Pipeline_2_fu_131_tmp_weights_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_start : STD_LOGIC;
    signal grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_done : STD_LOGIC;
    signal grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_idle : STD_LOGIC;
    signal grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_ready : STD_LOGIC;
    signal grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_tmp_weights_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_tmp_weights_ce0 : STD_LOGIC;
    signal grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_input_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_input_r_ce0 : STD_LOGIC;
    signal grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_conv205_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_conv205_out_ap_vld : STD_LOGIC;
    signal grp_runLayer_Pipeline_1_fu_123_ap_start_reg : STD_LOGIC := '0';
    signal grp_runLayer_Pipeline_2_fu_131_ap_start_reg : STD_LOGIC := '0';
    signal grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal outNeurons_fu_76 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln33_fu_203_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln27_fu_189_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal mul_ln27_fu_189_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component runLayer_runLayer_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bias_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        tmp_bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        tmp_bias_ce0 : OUT STD_LOGIC;
        tmp_bias_we0 : OUT STD_LOGIC;
        tmp_bias_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component runLayer_runLayer_Pipeline_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        mul_ln27 : IN STD_LOGIC_VECTOR (8 downto 0);
        weights_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_ce0 : OUT STD_LOGIC;
        weights_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        tmp_weights_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        tmp_weights_ce0 : OUT STD_LOGIC;
        tmp_weights_we0 : OUT STD_LOGIC;
        tmp_weights_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        conv5 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component runLayer_runLayer_Pipeline_VITIS_LOOP_29_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_load : IN STD_LOGIC_VECTOR (15 downto 0);
        numOfInNeurons_cast1 : IN STD_LOGIC_VECTOR (15 downto 0);
        tmp_weights_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        tmp_weights_ce0 : OUT STD_LOGIC;
        tmp_weights_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        conv205_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        conv205_out_ap_vld : OUT STD_LOGIC );
    end component;


    component runLayer_mul_2ns_9s_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component runLayer_tmp_weights_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component runLayer_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        output_r_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        output_r_ce0 : IN STD_LOGIC;
        output_r_we0 : IN STD_LOGIC;
        output_r_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        bias_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        bias_ce0 : IN STD_LOGIC;
        bias_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        numOfInNeurons : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        input_r_ce0 : IN STD_LOGIC;
        input_r_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        weights_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        weights_ce0 : IN STD_LOGIC;
        weights_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_local_deadlock : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    tmp_weights_U : component runLayer_tmp_weights_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => tmp_weights_address0,
        ce0 => tmp_weights_ce0,
        we0 => tmp_weights_we0,
        d0 => grp_runLayer_Pipeline_2_fu_131_tmp_weights_d0,
        q0 => tmp_weights_q0);

    tmp_bias_U : component runLayer_tmp_weights_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => tmp_bias_address0,
        ce0 => tmp_bias_ce0,
        we0 => tmp_bias_we0,
        d0 => grp_runLayer_Pipeline_1_fu_123_tmp_bias_d0,
        q0 => tmp_bias_q0);

    grp_runLayer_Pipeline_1_fu_123 : component runLayer_runLayer_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_runLayer_Pipeline_1_fu_123_ap_start,
        ap_done => grp_runLayer_Pipeline_1_fu_123_ap_done,
        ap_idle => grp_runLayer_Pipeline_1_fu_123_ap_idle,
        ap_ready => grp_runLayer_Pipeline_1_fu_123_ap_ready,
        bias_address0 => grp_runLayer_Pipeline_1_fu_123_bias_address0,
        bias_ce0 => grp_runLayer_Pipeline_1_fu_123_bias_ce0,
        bias_q0 => bias_q0,
        tmp_bias_address0 => grp_runLayer_Pipeline_1_fu_123_tmp_bias_address0,
        tmp_bias_ce0 => grp_runLayer_Pipeline_1_fu_123_tmp_bias_ce0,
        tmp_bias_we0 => grp_runLayer_Pipeline_1_fu_123_tmp_bias_we0,
        tmp_bias_d0 => grp_runLayer_Pipeline_1_fu_123_tmp_bias_d0);

    grp_runLayer_Pipeline_2_fu_131 : component runLayer_runLayer_Pipeline_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_runLayer_Pipeline_2_fu_131_ap_start,
        ap_done => grp_runLayer_Pipeline_2_fu_131_ap_done,
        ap_idle => grp_runLayer_Pipeline_2_fu_131_ap_idle,
        ap_ready => grp_runLayer_Pipeline_2_fu_131_ap_ready,
        mul_ln27 => mul_ln27_reg_251,
        weights_address0 => grp_runLayer_Pipeline_2_fu_131_weights_address0,
        weights_ce0 => grp_runLayer_Pipeline_2_fu_131_weights_ce0,
        weights_q0 => weights_q0,
        tmp_weights_address0 => grp_runLayer_Pipeline_2_fu_131_tmp_weights_address0,
        tmp_weights_ce0 => grp_runLayer_Pipeline_2_fu_131_tmp_weights_ce0,
        tmp_weights_we0 => grp_runLayer_Pipeline_2_fu_131_tmp_weights_we0,
        tmp_weights_d0 => grp_runLayer_Pipeline_2_fu_131_tmp_weights_d0,
        conv5 => numOfInNeurons_read_reg_222);

    grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140 : component runLayer_runLayer_Pipeline_VITIS_LOOP_29_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_start,
        ap_done => grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_done,
        ap_idle => grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_idle,
        ap_ready => grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_ready,
        output_r_load => output_r_load_reg_261,
        numOfInNeurons_cast1 => numOfInNeurons_read_reg_222,
        tmp_weights_address0 => grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_tmp_weights_address0,
        tmp_weights_ce0 => grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_tmp_weights_ce0,
        tmp_weights_q0 => tmp_weights_q0,
        input_r_address0 => grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_input_r_address0,
        input_r_ce0 => grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_input_r_ce0,
        input_r_q0 => input_r_q0,
        conv205_out => grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_conv205_out,
        conv205_out_ap_vld => grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_conv205_out_ap_vld);

    control_s_axi_U : component runLayer_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        output_r_address0 => output_r_address0,
        output_r_ce0 => output_r_ce0,
        output_r_we0 => output_r_we0,
        output_r_d0 => output_r_d0,
        output_r_q0 => output_r_q0,
        bias_address0 => grp_runLayer_Pipeline_1_fu_123_bias_address0,
        bias_ce0 => grp_runLayer_Pipeline_1_fu_123_bias_ce0,
        bias_q0 => bias_q0,
        numOfInNeurons => numOfInNeurons,
        input_r_address0 => grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_input_r_address0,
        input_r_ce0 => grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_input_r_ce0,
        input_r_q0 => input_r_q0,
        weights_address0 => grp_runLayer_Pipeline_2_fu_131_weights_address0,
        weights_ce0 => grp_runLayer_Pipeline_2_fu_131_weights_ce0,
        weights_q0 => weights_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_local_deadlock => ap_local_deadlock);

    mul_2ns_9s_9_1_1_U14 : component runLayer_mul_2ns_9s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => mul_ln27_fu_189_p0,
        din1 => trunc_ln27_reg_228,
        dout => mul_ln27_fu_189_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_runLayer_Pipeline_1_fu_123_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_runLayer_Pipeline_1_fu_123_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_runLayer_Pipeline_1_fu_123_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_runLayer_Pipeline_1_fu_123_ap_ready = ap_const_logic_1)) then 
                    grp_runLayer_Pipeline_1_fu_123_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_runLayer_Pipeline_2_fu_131_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_runLayer_Pipeline_2_fu_131_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln25_fu_169_p2 = ap_const_lv1_0) and (empty_reg_233 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_runLayer_Pipeline_2_fu_131_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_runLayer_Pipeline_2_fu_131_ap_ready = ap_const_logic_1)) then 
                    grp_runLayer_Pipeline_2_fu_131_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_ready = ap_const_logic_1)) then 
                    grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    outNeurons_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                outNeurons_fu_76 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                outNeurons_fu_76 <= add_ln25_reg_240;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln25_reg_240 <= add_ln25_fu_175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                empty_reg_233 <= empty_fu_160_p2;
                numOfInNeurons_read_reg_222 <= numOfInNeurons;
                trunc_ln27_reg_228 <= trunc_ln27_fu_156_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                mul_ln27_reg_251 <= mul_ln27_fu_189_p2;
                    zext_ln25_reg_245(1 downto 0) <= zext_ln25_fu_181_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_r_addr_reg_256 <= zext_ln25_reg_245(2 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                output_r_load_reg_261 <= output_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_bias_load_reg_271 <= tmp_bias_q0;
            end if;
        end if;
    end process;
    zext_ln25_reg_245(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, empty_reg_233, ap_CS_fsm_state3, icmp_ln25_fu_169_p2, ap_CS_fsm_state4, grp_runLayer_Pipeline_1_fu_123_ap_done, grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_done, ap_CS_fsm_state6, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_runLayer_Pipeline_1_fu_123_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln25_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((empty_reg_233 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((empty_reg_233 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln25_fu_175_p2 <= std_logic_vector(unsigned(outNeurons_fu_76) + unsigned(ap_const_lv2_1));
    add_ln33_fu_203_p2 <= std_logic_vector(unsigned(output_r_q0) + unsigned(tmp_bias_load_reg_271));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_runLayer_Pipeline_1_fu_123_ap_done)
    begin
        if ((grp_runLayer_Pipeline_1_fu_123_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_on_subcall_done)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_done)
    begin
        if ((grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state4_on_subcall_done_assign_proc : process(empty_reg_233, grp_runLayer_Pipeline_2_fu_131_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((empty_reg_233 = ap_const_lv1_0) and (grp_runLayer_Pipeline_2_fu_131_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state3, icmp_ln25_fu_169_p2)
    begin
        if (((icmp_ln25_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_lv1_0;

    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln25_fu_169_p2)
    begin
        if (((icmp_ln25_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_fu_160_p2 <= "1" when (numOfInNeurons = ap_const_lv16_0) else "0";
    grp_runLayer_Pipeline_1_fu_123_ap_start <= grp_runLayer_Pipeline_1_fu_123_ap_start_reg;
    grp_runLayer_Pipeline_2_fu_131_ap_start <= grp_runLayer_Pipeline_2_fu_131_ap_start_reg;
    grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_start <= grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_ap_start_reg;
    icmp_ln25_fu_169_p2 <= "1" when (outNeurons_fu_76 = ap_const_lv2_3) else "0";
    mul_ln27_fu_189_p0 <= mul_ln27_fu_189_p00(2 - 1 downto 0);
    mul_ln27_fu_189_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_fu_76),9));

    output_r_address0_assign_proc : process(zext_ln25_reg_245, output_r_addr_reg_256, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_r_address0 <= output_r_addr_reg_256;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_address0 <= zext_ln25_reg_245(2 - 1 downto 0);
        else 
            output_r_address0 <= "XX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_block_state4_on_subcall_done, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done)))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state7, grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_conv205_out, ap_CS_fsm_state9, add_ln33_fu_203_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_d0 <= add_ln33_fu_203_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_d0 <= grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_conv205_out;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(empty_reg_233, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((empty_reg_233 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_bias_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln25_reg_245, ap_CS_fsm_state7, grp_runLayer_Pipeline_1_fu_123_tmp_bias_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tmp_bias_address0 <= zext_ln25_reg_245(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tmp_bias_address0 <= grp_runLayer_Pipeline_1_fu_123_tmp_bias_address0;
        else 
            tmp_bias_address0 <= "XXXXXXX";
        end if; 
    end process;


    tmp_bias_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, grp_runLayer_Pipeline_1_fu_123_tmp_bias_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tmp_bias_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tmp_bias_ce0 <= grp_runLayer_Pipeline_1_fu_123_tmp_bias_ce0;
        else 
            tmp_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_bias_we0_assign_proc : process(ap_CS_fsm_state2, grp_runLayer_Pipeline_1_fu_123_tmp_bias_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tmp_bias_we0 <= grp_runLayer_Pipeline_1_fu_123_tmp_bias_we0;
        else 
            tmp_bias_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_weights_address0_assign_proc : process(empty_reg_233, ap_CS_fsm_state4, grp_runLayer_Pipeline_2_fu_131_tmp_weights_address0, grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_tmp_weights_address0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tmp_weights_address0 <= grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_tmp_weights_address0;
        elsif (((empty_reg_233 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            tmp_weights_address0 <= grp_runLayer_Pipeline_2_fu_131_tmp_weights_address0;
        else 
            tmp_weights_address0 <= "XXXXXXX";
        end if; 
    end process;


    tmp_weights_ce0_assign_proc : process(empty_reg_233, ap_CS_fsm_state4, grp_runLayer_Pipeline_2_fu_131_tmp_weights_ce0, grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_tmp_weights_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tmp_weights_ce0 <= grp_runLayer_Pipeline_VITIS_LOOP_29_2_fu_140_tmp_weights_ce0;
        elsif (((empty_reg_233 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            tmp_weights_ce0 <= grp_runLayer_Pipeline_2_fu_131_tmp_weights_ce0;
        else 
            tmp_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_weights_we0_assign_proc : process(empty_reg_233, ap_CS_fsm_state4, grp_runLayer_Pipeline_2_fu_131_tmp_weights_we0)
    begin
        if (((empty_reg_233 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            tmp_weights_we0 <= grp_runLayer_Pipeline_2_fu_131_tmp_weights_we0;
        else 
            tmp_weights_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln27_fu_156_p1 <= numOfInNeurons(9 - 1 downto 0);
    zext_ln25_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_fu_76),64));
end behav;
