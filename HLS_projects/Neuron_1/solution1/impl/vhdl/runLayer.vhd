-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity runLayer is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 10;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_local_block : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of runLayer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "runLayer_runLayer,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=529,HLS_SYN_LUT=633,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_local_deadlock : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_i : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_o : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_o_ap_vld : STD_LOGIC;
    signal weights : STD_LOGIC_VECTOR (31 downto 0);
    signal bias : STD_LOGIC_VECTOR (31 downto 0);
    signal numOfInNeurons : STD_LOGIC_VECTOR (15 downto 0);
    signal numOfInNeurons_read_reg_126 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_read_reg_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_read_reg_145 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_read_reg_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln14_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_start : STD_LOGIC;
    signal grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_done : STD_LOGIC;
    signal grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_idle : STD_LOGIC;
    signal grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_ready : STD_LOGIC;
    signal grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_input_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_input_r_ce0 : STD_LOGIC;
    signal grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_add107_0_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_add107_0_out_ap_vld : STD_LOGIC;
    signal grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln18_fu_120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component runLayer_runLayer_Pipeline_VITIS_LOOP_14_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_load : IN STD_LOGIC_VECTOR (31 downto 0);
        zext_ln14 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_load : IN STD_LOGIC_VECTOR (31 downto 0);
        add107_0_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        add107_0_out_ap_vld : OUT STD_LOGIC );
    end component;


    component runLayer_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        output_r_o : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_o_ap_vld : IN STD_LOGIC;
        output_r_i : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        numOfInNeurons : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        input_r_ce0 : IN STD_LOGIC;
        input_r_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_local_deadlock : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97 : component runLayer_runLayer_Pipeline_VITIS_LOOP_14_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_start,
        ap_done => grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_done,
        ap_idle => grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_idle,
        ap_ready => grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_ready,
        output_r_load => output_r_read_reg_150,
        zext_ln14 => numOfInNeurons_read_reg_126,
        input_r_address0 => grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_input_r_address0,
        input_r_ce0 => grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_input_r_ce0,
        input_r_q0 => input_r_q0,
        weights_load => weights_read_reg_145,
        add107_0_out => grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_add107_0_out,
        add107_0_out_ap_vld => grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_add107_0_out_ap_vld);

    control_s_axi_U : component runLayer_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        output_r_o => output_r_o,
        output_r_o_ap_vld => output_r_o_ap_vld,
        output_r_i => output_r_i,
        bias => bias,
        numOfInNeurons => numOfInNeurons,
        input_r_address0 => grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_input_r_address0,
        input_r_ce0 => grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_input_r_ce0,
        input_r_q0 => input_r_q0,
        weights => weights,
        ap_local_deadlock => ap_local_deadlock);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln14_fu_110_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1))) then 
                    grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_ready = ap_const_logic_1)) then 
                    grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                bias_read_reg_140 <= bias;
                numOfInNeurons_read_reg_126 <= numOfInNeurons;
                weights_read_reg_145 <= weights;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln14_fu_110_p2 = ap_const_lv1_0))) then
                output_r_read_reg_150 <= output_r_i;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln14_fu_110_p2, grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln14_fu_110_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln14_fu_110_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln18_fu_120_p2 <= std_logic_vector(unsigned(output_r_i) + unsigned(bias_read_reg_140));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_done)
    begin
        if ((grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_lv1_0;

    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_start <= grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_ap_start_reg;
    icmp_ln14_fu_110_p2 <= "1" when (numOfInNeurons = ap_const_lv16_0) else "0";

    output_r_o_assign_proc : process(grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_add107_0_out, ap_CS_fsm_state3, ap_CS_fsm_state4, add_ln18_fu_120_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_o <= add_ln18_fu_120_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_o <= grp_runLayer_Pipeline_VITIS_LOOP_14_2_fu_97_add107_0_out;
        else 
            output_r_o <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_o_ap_vld_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_r_o_ap_vld <= ap_const_logic_1;
        else 
            output_r_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
