-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nnlayer is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 18;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_local_block : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of nnlayer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nnlayer_nnlayer,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.446000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=67,HLS_SYN_DSP=0,HLS_SYN_FF=661,HLS_SYN_LUT=923,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_local_deadlock : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_r_ce0 : STD_LOGIC;
    signal input_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_r_ce0 : STD_LOGIC;
    signal output_r_we0 : STD_LOGIC;
    signal output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_ce0 : STD_LOGIC;
    signal weights_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal numOfInNeurons : STD_LOGIC_VECTOR (15 downto 0);
    signal numOfOutNeurons : STD_LOGIC_VECTOR (15 downto 0);
    signal activation : STD_LOGIC_VECTOR (7 downto 0);
    signal activation_read_reg_338 : STD_LOGIC_VECTOR (7 downto 0);
    signal numOfOutNeurons_read_reg_343 : STD_LOGIC_VECTOR (15 downto 0);
    signal numOfInNeurons_read_reg_350 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln32_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_357 : STD_LOGIC_VECTOR (0 downto 0);
    signal numOfInNeurons_cast_fu_223_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal numOfInNeurons_cast_reg_375 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal cmp981_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp981_reg_380 : STD_LOGIC_VECTOR (0 downto 0);
    signal outNeurons_3_fu_239_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal outNeurons_3_reg_387 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal output_r_addr_reg_392 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln36_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_397 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_21_fu_255_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_21_reg_401 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal inNeurons_1_fu_268_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal inNeurons_1_reg_414 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln38_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_start : STD_LOGIC;
    signal grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_done : STD_LOGIC;
    signal grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_idle : STD_LOGIC;
    signal grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_ready : STD_LOGIC;
    signal grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_bias_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_bias_ce0 : STD_LOGIC;
    signal grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_output_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_output_r_ce0 : STD_LOGIC;
    signal grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_output_r_we0 : STD_LOGIC;
    signal grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_ap_start : STD_LOGIC;
    signal grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_ap_done : STD_LOGIC;
    signal grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_ap_idle : STD_LOGIC;
    signal grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_ap_ready : STD_LOGIC;
    signal grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_output_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_output_r_ce0 : STD_LOGIC;
    signal grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_output_r_we0 : STD_LOGIC;
    signal grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_reg_165 : STD_LOGIC_VECTOR (15 downto 0);
    signal inNeurons_reg_176 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_start_reg : STD_LOGIC := '0';
    signal grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal idxprom16_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_1_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal outNeurons_2_fu_100 : STD_LOGIC_VECTOR (15 downto 0);
    signal weightIndexAdded_fu_104 : STD_LOGIC_VECTOR (15 downto 0);
    signal weightIndexAdded_1_fu_290_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln38_fu_259_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln41_fu_274_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_320_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_329_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_329_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component nnlayer_nnlayer_Pipeline_VITIS_LOOP_32_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        numOfOutNeurons : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_nnlayer_Pipeline_VITIS_LOOP_10_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        numOfOutNeurons_cast : IN STD_LOGIC_VECTOR (7 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component nnlayer_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        numOfInNeurons : OUT STD_LOGIC_VECTOR (15 downto 0);
        numOfOutNeurons : OUT STD_LOGIC_VECTOR (15 downto 0);
        activation : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_r_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        input_r_ce0 : IN STD_LOGIC;
        input_r_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        output_r_ce0 : IN STD_LOGIC;
        output_r_we0 : IN STD_LOGIC;
        output_r_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        bias_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bias_ce0 : IN STD_LOGIC;
        bias_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        weights_address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        weights_ce0 : IN STD_LOGIC;
        weights_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_local_deadlock : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187 : component nnlayer_nnlayer_Pipeline_VITIS_LOOP_32_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_start,
        ap_done => grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_done,
        ap_idle => grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_idle,
        ap_ready => grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_ready,
        numOfOutNeurons => numOfOutNeurons_read_reg_343,
        bias_address0 => grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_bias_address0,
        bias_ce0 => grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_bias_ce0,
        bias_q0 => bias_q0,
        output_r_address0 => grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_output_r_address0,
        output_r_ce0 => grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_output_r_ce0,
        output_r_we0 => grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_output_r_we0,
        output_r_d0 => grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_output_r_d0);

    grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197 : component nnlayer_nnlayer_Pipeline_VITIS_LOOP_10_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_ap_start,
        ap_done => grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_ap_done,
        ap_idle => grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_ap_idle,
        ap_ready => grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_ap_ready,
        numOfOutNeurons_cast => empty_21_reg_401,
        output_r_address0 => grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_output_r_address0,
        output_r_ce0 => grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_output_r_ce0,
        output_r_we0 => grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_output_r_we0,
        output_r_d0 => grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_output_r_d0,
        output_r_q0 => output_r_q0);

    control_s_axi_U : component nnlayer_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        numOfInNeurons => numOfInNeurons,
        numOfOutNeurons => numOfOutNeurons,
        activation => activation,
        input_r_address0 => input_r_address0,
        input_r_ce0 => input_r_ce0,
        input_r_q0 => input_r_q0,
        output_r_address0 => output_r_address0,
        output_r_ce0 => output_r_ce0,
        output_r_we0 => output_r_we0,
        output_r_d0 => output_r_d0,
        output_r_q0 => output_r_q0,
        bias_address0 => grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_bias_address0,
        bias_ce0 => grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_bias_ce0,
        bias_q0 => bias_q0,
        weights_address0 => weights_address0,
        weights_ce0 => weights_ce0,
        weights_q0 => weights_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_local_deadlock => ap_local_deadlock);

    mac_muladd_16s_16s_24ns_24_4_1_U6 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => input_r_q0,
        din1 => weights_q0,
        din2 => grp_fu_329_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_329_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((icmp_ln46_fu_250_p2 = ap_const_lv1_1) and (icmp_ln32_reg_357 = ap_const_lv1_1)) or ((icmp_ln46_fu_250_p2 = ap_const_lv1_1) and (icmp_ln36_fu_234_p2 = ap_const_lv1_1))))) then 
                    grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_ap_ready = ap_const_logic_1)) then 
                    grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln32_fu_207_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_ready = ap_const_logic_1)) then 
                    grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    inNeurons_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                inNeurons_reg_176 <= inNeurons_1_reg_414;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                inNeurons_reg_176 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    lhs_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                lhs_reg_165 <= trunc_ln_fu_320_p1(23 downto 8);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                lhs_reg_165 <= output_r_q0;
            end if; 
        end if;
    end process;

    outNeurons_2_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_207_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                outNeurons_2_fu_100 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and ((cmp981_reg_380 = ap_const_lv1_1) or (icmp_ln38_fu_263_p2 = ap_const_lv1_0)))) then 
                outNeurons_2_fu_100 <= outNeurons_3_reg_387;
            end if; 
        end if;
    end process;

    weightIndexAdded_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_207_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                weightIndexAdded_fu_104 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and ((cmp981_reg_380 = ap_const_lv1_1) or (icmp_ln38_fu_263_p2 = ap_const_lv1_0)))) then 
                weightIndexAdded_fu_104 <= weightIndexAdded_1_fu_290_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                activation_read_reg_338 <= activation;
                icmp_ln32_reg_357 <= icmp_ln32_fu_207_p2;
                numOfInNeurons_read_reg_350 <= numOfInNeurons;
                numOfOutNeurons_read_reg_343 <= numOfOutNeurons;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                cmp981_reg_380 <= cmp981_fu_226_p2;
                    numOfInNeurons_cast_reg_375(15 downto 0) <= numOfInNeurons_cast_fu_223_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((icmp_ln46_fu_250_p2 = ap_const_lv1_1) and (icmp_ln32_reg_357 = ap_const_lv1_1)) or ((icmp_ln46_fu_250_p2 = ap_const_lv1_1) and (icmp_ln36_fu_234_p2 = ap_const_lv1_1))))) then
                empty_21_reg_401 <= empty_21_fu_255_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln36_fu_234_p2 = ap_const_lv1_1) or (icmp_ln32_reg_357 = ap_const_lv1_1)))) then
                icmp_ln46_reg_397 <= icmp_ln46_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp981_reg_380 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                inNeurons_1_reg_414 <= inNeurons_1_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_357 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                outNeurons_3_reg_387 <= outNeurons_3_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_234_p2 = ap_const_lv1_0) and (cmp981_reg_380 = ap_const_lv1_0) and (icmp_ln32_reg_357 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                output_r_addr_reg_392 <= idxprom16_fu_245_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    numOfInNeurons_cast_reg_375(16) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln32_fu_207_p2, icmp_ln32_reg_357, ap_CS_fsm_state2, cmp981_reg_380, ap_CS_fsm_state3, icmp_ln36_fu_234_p2, ap_CS_fsm_state5, icmp_ln38_fu_263_p2, grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_done, ap_CS_fsm_state10, ap_block_state10_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln32_fu_207_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((icmp_ln32_fu_207_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln36_fu_234_p2 = ap_const_lv1_1) or (icmp_ln32_reg_357 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((icmp_ln36_fu_234_p2 = ap_const_lv1_0) and (cmp981_reg_380 = ap_const_lv1_1) and (icmp_ln32_reg_357 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((cmp981_reg_380 = ap_const_lv1_1) or (icmp_ln38_fu_263_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln41_fu_274_p2 <= std_logic_vector(signed(inNeurons_reg_176) + signed(weightIndexAdded_fu_104));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(ap_block_state10_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state10_on_subcall_done)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_done)
    begin
        if ((grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state10_on_subcall_done_assign_proc : process(icmp_ln46_reg_397, grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((icmp_ln46_reg_397 = ap_const_lv1_1) and (grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_lv1_0;

    ap_ready_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cmp981_fu_226_p2 <= "1" when (numOfInNeurons_read_reg_350 = ap_const_lv16_0) else "0";
    empty_21_fu_255_p1 <= numOfOutNeurons_read_reg_343(8 - 1 downto 0);
    grp_fu_329_p2 <= (lhs_reg_165 & ap_const_lv8_0);
    grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_ap_start <= grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_ap_start_reg;
    grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_start <= grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_ap_start_reg;
    icmp_ln32_fu_207_p2 <= "1" when (numOfOutNeurons = ap_const_lv16_0) else "0";
    icmp_ln36_fu_234_p2 <= "1" when (outNeurons_2_fu_100 = numOfOutNeurons_read_reg_343) else "0";
    icmp_ln38_fu_263_p2 <= "1" when (signed(sext_ln38_fu_259_p1) < signed(numOfInNeurons_cast_reg_375)) else "0";
    icmp_ln46_fu_250_p2 <= "1" when (activation_read_reg_338 = ap_const_lv8_1) else "0";
    idxprom16_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_2_fu_100),64));
    inNeurons_1_fu_268_p2 <= std_logic_vector(signed(inNeurons_reg_176) + signed(ap_const_lv16_1));
    input_r_address0 <= zext_ln41_1_fu_285_p1(8 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    numOfInNeurons_cast_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(numOfInNeurons_read_reg_350),17));
    outNeurons_3_fu_239_p2 <= std_logic_vector(unsigned(outNeurons_2_fu_100) + unsigned(ap_const_lv16_1));

    output_r_address0_assign_proc : process(icmp_ln32_reg_357, ap_CS_fsm_state2, cmp981_reg_380, ap_CS_fsm_state3, output_r_addr_reg_392, icmp_ln36_fu_234_p2, icmp_ln46_reg_397, ap_CS_fsm_state5, grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_output_r_address0, grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_output_r_address0, ap_CS_fsm_state10, idxprom16_fu_245_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address0 <= output_r_addr_reg_392;
        elsif (((icmp_ln36_fu_234_p2 = ap_const_lv1_0) and (cmp981_reg_380 = ap_const_lv1_0) and (icmp_ln32_reg_357 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_r_address0 <= idxprom16_fu_245_p1(8 - 1 downto 0);
        elsif (((icmp_ln46_reg_397 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            output_r_address0 <= grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_address0 <= grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_output_r_address0;
        else 
            output_r_address0 <= "XXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(icmp_ln32_reg_357, ap_CS_fsm_state2, cmp981_reg_380, ap_CS_fsm_state3, icmp_ln36_fu_234_p2, icmp_ln46_reg_397, ap_CS_fsm_state5, grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_output_r_ce0, grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_output_r_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln36_fu_234_p2 = ap_const_lv1_0) and (cmp981_reg_380 = ap_const_lv1_0) and (icmp_ln32_reg_357 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            output_r_ce0 <= ap_const_logic_1;
        elsif (((icmp_ln46_reg_397 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            output_r_ce0 <= grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_ce0 <= grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_output_r_ce0;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state2, icmp_ln46_reg_397, ap_CS_fsm_state5, grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_output_r_d0, grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_output_r_d0, lhs_reg_165, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_d0 <= lhs_reg_165;
        elsif (((icmp_ln46_reg_397 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            output_r_d0 <= grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_d0 <= grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_output_r_d0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state2, cmp981_reg_380, icmp_ln46_reg_397, ap_CS_fsm_state5, icmp_ln38_fu_263_p2, grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_output_r_we0, grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_output_r_we0, ap_CS_fsm_state10)
    begin
        if (((cmp981_reg_380 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln38_fu_263_p2 = ap_const_lv1_0))) then 
            output_r_we0 <= ap_const_logic_1;
        elsif (((icmp_ln46_reg_397 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            output_r_we0 <= grp_nnlayer_Pipeline_VITIS_LOOP_10_1_fu_197_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_we0 <= grp_nnlayer_Pipeline_VITIS_LOOP_32_1_fu_187_output_r_we0;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln38_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inNeurons_reg_176),17));

    trunc_ln_fu_320_p1 <= grp_fu_329_p3;
    weightIndexAdded_1_fu_290_p2 <= std_logic_vector(unsigned(weightIndexAdded_fu_104) + unsigned(numOfInNeurons_read_reg_350));
    weights_address0 <= zext_ln41_fu_280_p1(16 - 1 downto 0);

    weights_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_ce0 <= ap_const_logic_1;
        else 
            weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln41_1_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inNeurons_reg_176),64));
    zext_ln41_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_fu_274_p2),64));
end behav;
