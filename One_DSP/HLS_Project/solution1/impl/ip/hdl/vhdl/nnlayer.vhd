-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nnlayer is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 16;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_local_block : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of nnlayer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nnlayer_nnlayer,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=21,HLS_SYN_DSP=0,HLS_SYN_FF=2714,HLS_SYN_LUT=3434,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (148 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (148 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (148 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (148 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (148 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (148 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (148 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (148 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (148 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (148 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (148 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (148 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_91 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010001";
    constant ap_const_lv32_93 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010010";
    constant ap_const_lv32_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv16_F500 : STD_LOGIC_VECTOR (15 downto 0) := "1111010100000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv16_B00 : STD_LOGIC_VECTOR (15 downto 0) := "0000101100000000";
    constant ap_const_lv17_1F500 : STD_LOGIC_VECTOR (16 downto 0) := "11111010100000000";
    constant ap_const_lv50_1724288 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000001011100100100001010001000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv49_0 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000000";
    constant ap_const_lv24_10000 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_const_lv26_1000000 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv17_100 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_const_lv24_7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000111";
    constant ap_const_lv24_8000 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal ap_local_deadlock : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (148 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal input_r_ce0 : STD_LOGIC;
    signal input_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_r_ce0 : STD_LOGIC;
    signal output_r_we0 : STD_LOGIC;
    signal output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_ce0 : STD_LOGIC;
    signal bias_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal weights_ce0 : STD_LOGIC;
    signal weights_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal numOfInNeurons : STD_LOGIC_VECTOR (15 downto 0);
    signal numOfOutputNeurons : STD_LOGIC_VECTOR (15 downto 0);
    signal activation : STD_LOGIC_VECTOR (7 downto 0);
    signal output_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_ce0 : STD_LOGIC;
    signal output_V_we0 : STD_LOGIC;
    signal output_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_415 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal activation_read_reg_1187 : STD_LOGIC_VECTOR (7 downto 0);
    signal numOfOutputNeurons_read_reg_1191 : STD_LOGIC_VECTOR (15 downto 0);
    signal numOfInNeurons_read_reg_1202 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_419_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_reg_1207 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln87_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1212 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal outNeurons_2_fu_446_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal outNeurons_2_reg_1227 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal output_V_addr_reg_1272 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_1166_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_i_reg_1282 : STD_LOGIC_VECTOR (13 downto 0);
    signal inNeurons_1_fu_491_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal inNeurons_1_reg_1290 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln91_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln45_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_2_fu_565_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_2_reg_1333 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln52_fu_573_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln52_reg_1338 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_22_fu_666_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_22_reg_1360 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln56_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_reg_1365 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln52_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_5_reg_1370 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln1547_2_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_2_reg_1375 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_reg_1386 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal resArray_V_addr_1_reg_1390 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal select_ln7_fu_722_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln7_reg_1395 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_1400 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1201_fu_755_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal trunc_ln1201_reg_1406 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_2_cast_reg_1411 : STD_LOGIC_VECTOR (15 downto 0);
    signal fixed_V_fu_796_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal fixed_V_reg_1417 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal p_Result_s_reg_1422 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_838_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_1_reg_1429 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln1547_3_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_3_reg_1434 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_854_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1438 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_866_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_3_reg_1447 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal lshr_ln1201_fu_875_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1201_reg_1452 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1457 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal zext_ln717_fu_903_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal shl_ln740_1_fu_918_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln80_fu_965_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln80_reg_1475 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal icmp_ln77_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal zext_ln32_fu_1012_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_1498 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal icmp_ln30_fu_1001_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_1048_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_reg_1508 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal trunc_ln717_1_reg_1523 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state144 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state144 : signal is "none";
    signal zext_ln18_fu_1107_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_reg_1531 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state146 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state146 : signal is "none";
    signal icmp_ln16_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln114_fu_1156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_reg_1544 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state148 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state148 : signal is "none";
    signal icmp_ln112_fu_1145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal resArray_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal resArray_V_ce0 : STD_LOGIC;
    signal resArray_V_we0 : STD_LOGIC;
    signal resArray_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal resArray_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inNeurons_reg_373 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_reg_384 : STD_LOGIC_VECTOR (15 downto 0);
    signal storemerge8_reg_395 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln87_1_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln90_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_1_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal ap_CS_fsm_state145 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state145 : signal is "none";
    signal ap_CS_fsm_state147 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state147 : signal is "none";
    signal ap_CS_fsm_state149 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state149 : signal is "none";
    signal outNeurons_fu_158 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_fu_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal overflow_2_fu_645_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_6_fu_170 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_18_fu_549_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_4_fu_174 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_16_fu_1006_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_2_fu_178 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_14_fu_1101_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_182 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_12_fu_1150_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_V_fu_186 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_V_1_fu_940_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal i_7_fu_190 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_9_fu_194 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_21_fu_959_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal trunc_ln717_fu_993_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln20_fu_1137_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln91_fu_482_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln94_fu_497_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln94_fu_497_p2 : signal is "no";
    signal trunc_ln1_fu_532_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1171_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln1246_fu_593_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln_fu_603_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_7_fu_597_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1547_fu_611_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln1547_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_1_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1547_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_621_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal overflow_1_fu_637_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln712_1_fu_688_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln712_1_fu_688_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_4_fu_692_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_V_fu_703_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_708_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln712_2_fu_716_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_2_fu_738_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1201_fu_749_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1201_fu_749_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal sub_ln1201_fu_769_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_1_cast_fu_774_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1201_fu_784_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1201_1_fu_790_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal whole_V_fu_812_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_8_fu_819_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_2_fu_824_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_6_fu_832_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_866_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln67_fu_872_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_4_fu_887_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_4_fu_887_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_4_fu_887_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal sext_ln740_fu_909_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln64_fu_906_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln740_fu_912_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1_fu_928_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln712_fu_936_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_4_fu_975_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_987_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_987_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_1022_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln712_fu_1030_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_4_fu_1036_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln712_fu_1044_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1065_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1065_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_2_fu_1071_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_2_fu_1077_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_fu_1121_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1548_fu_1117_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln18_fu_1129_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1166_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1171_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_866_ap_start : STD_LOGIC;
    signal grp_fu_866_ap_done : STD_LOGIC;
    signal grp_fu_987_ap_start : STD_LOGIC;
    signal grp_fu_987_ap_done : STD_LOGIC;
    signal grp_fu_1065_ap_start : STD_LOGIC;
    signal grp_fu_1065_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (148 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ST_fsm_state110_blk : STD_LOGIC;
    signal ap_ST_fsm_state111_blk : STD_LOGIC;
    signal ap_ST_fsm_state112_blk : STD_LOGIC;
    signal ap_ST_fsm_state113_blk : STD_LOGIC;
    signal ap_ST_fsm_state114_blk : STD_LOGIC;
    signal ap_ST_fsm_state115_blk : STD_LOGIC;
    signal ap_ST_fsm_state116_blk : STD_LOGIC;
    signal ap_ST_fsm_state117_blk : STD_LOGIC;
    signal ap_ST_fsm_state118_blk : STD_LOGIC;
    signal ap_ST_fsm_state119_blk : STD_LOGIC;
    signal ap_ST_fsm_state120_blk : STD_LOGIC;
    signal ap_ST_fsm_state121_blk : STD_LOGIC;
    signal ap_ST_fsm_state122_blk : STD_LOGIC;
    signal ap_ST_fsm_state123_blk : STD_LOGIC;
    signal ap_ST_fsm_state124_blk : STD_LOGIC;
    signal ap_ST_fsm_state125_blk : STD_LOGIC;
    signal ap_ST_fsm_state126_blk : STD_LOGIC;
    signal ap_ST_fsm_state127_blk : STD_LOGIC;
    signal ap_ST_fsm_state128_blk : STD_LOGIC;
    signal ap_ST_fsm_state129_blk : STD_LOGIC;
    signal ap_ST_fsm_state130_blk : STD_LOGIC;
    signal ap_ST_fsm_state131_blk : STD_LOGIC;
    signal ap_ST_fsm_state132_blk : STD_LOGIC;
    signal ap_ST_fsm_state133_blk : STD_LOGIC;
    signal ap_ST_fsm_state134_blk : STD_LOGIC;
    signal ap_ST_fsm_state135_blk : STD_LOGIC;
    signal ap_ST_fsm_state136_blk : STD_LOGIC;
    signal ap_ST_fsm_state137_blk : STD_LOGIC;
    signal ap_ST_fsm_state138_blk : STD_LOGIC;
    signal ap_ST_fsm_state139_blk : STD_LOGIC;
    signal ap_ST_fsm_state140_blk : STD_LOGIC;
    signal ap_ST_fsm_state141_blk : STD_LOGIC;
    signal ap_ST_fsm_state142_blk : STD_LOGIC;
    signal ap_ST_fsm_state143_blk : STD_LOGIC;
    signal ap_ST_fsm_state144_blk : STD_LOGIC;
    signal ap_ST_fsm_state145_blk : STD_LOGIC;
    signal ap_ST_fsm_state146_blk : STD_LOGIC;
    signal ap_ST_fsm_state147_blk : STD_LOGIC;
    signal ap_ST_fsm_state148_blk : STD_LOGIC;
    signal ap_ST_fsm_state149_blk : STD_LOGIC;
    signal grp_fu_987_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_4_fu_887_p00 : STD_LOGIC_VECTOR (41 downto 0);
    signal r_V_4_fu_887_p10 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component nnlayer_mul_24s_26ns_50_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;


    component nnlayer_udiv_26ns_26s_26_30_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (25 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component nnlayer_mul_32ns_26ns_42_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component nnlayer_udiv_56ns_64ns_16_60_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_sdiv_24ns_17s_24_28_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component nnlayer_mul_mul_14s_14s_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component nnlayer_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component nnlayer_output_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_resArray_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nnlayer_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        numOfInNeurons : OUT STD_LOGIC_VECTOR (15 downto 0);
        numOfOutputNeurons : OUT STD_LOGIC_VECTOR (15 downto 0);
        activation : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_r_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        input_r_ce0 : IN STD_LOGIC;
        input_r_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        output_r_ce0 : IN STD_LOGIC;
        output_r_we0 : IN STD_LOGIC;
        output_r_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        bias_ce0 : IN STD_LOGIC;
        bias_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        weights_address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        weights_ce0 : IN STD_LOGIC;
        weights_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_local_deadlock : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    output_V_U : component nnlayer_output_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_V_address0,
        ce0 => output_V_ce0,
        we0 => output_V_we0,
        d0 => output_V_d0,
        q0 => output_V_q0);

    resArray_V_U : component nnlayer_resArray_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => resArray_V_address0,
        ce0 => resArray_V_ce0,
        we0 => resArray_V_we0,
        d0 => resArray_V_d0,
        q0 => resArray_V_q0);

    control_s_axi_U : component nnlayer_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        numOfInNeurons => numOfInNeurons,
        numOfOutputNeurons => numOfOutputNeurons,
        activation => activation,
        input_r_address0 => input_r_address0,
        input_r_ce0 => input_r_ce0,
        input_r_q0 => input_r_q0,
        output_r_address0 => output_r_address0,
        output_r_ce0 => output_r_ce0,
        output_r_we0 => output_r_we0,
        output_r_d0 => output_r_d0,
        bias_address0 => bias_address0,
        bias_ce0 => bias_ce0,
        bias_q0 => bias_q0,
        weights_address0 => weights_address0,
        weights_ce0 => weights_ce0,
        weights_q0 => weights_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_local_deadlock => ap_local_deadlock);

    mul_24s_26ns_50_1_1_U1 : component nnlayer_mul_24s_26ns_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 26,
        dout_WIDTH => 50)
    port map (
        din0 => t_2_fu_738_p3,
        din1 => mul_ln1201_fu_749_p1,
        dout => mul_ln1201_fu_749_p2);

    udiv_26ns_26s_26_30_seq_1_U2 : component nnlayer_udiv_26ns_26s_26_30_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 26,
        din1_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_866_ap_start,
        done => grp_fu_866_ap_done,
        din0 => ap_const_lv26_1000000,
        din1 => grp_fu_866_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_866_p2);

    mul_32ns_26ns_42_1_1_U3 : component nnlayer_mul_32ns_26ns_42_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 26,
        dout_WIDTH => 42)
    port map (
        din0 => r_V_4_fu_887_p0,
        din1 => r_V_4_fu_887_p1,
        dout => r_V_4_fu_887_p2);

    udiv_56ns_64ns_16_60_seq_1_U4 : component nnlayer_udiv_56ns_64ns_16_60_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 60,
        din0_WIDTH => 56,
        din1_WIDTH => 64,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_987_ap_start,
        done => grp_fu_987_ap_done,
        din0 => grp_fu_987_p0,
        din1 => sum_V_fu_186,
        ce => ap_const_logic_1,
        dout => grp_fu_987_p2);

    sdiv_24ns_17s_24_28_seq_1_U5 : component nnlayer_sdiv_24ns_17s_24_28_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 24,
        din1_WIDTH => 17,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1065_ap_start,
        done => grp_fu_1065_ap_done,
        din0 => grp_fu_1065_p0,
        din1 => ret_V_1_reg_1508,
        ce => ap_const_logic_1,
        dout => grp_fu_1065_p2);

    mul_mul_14s_14s_14_4_1_U6 : component nnlayer_mul_mul_14s_14s_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1166_p0,
        din1 => empty_reg_1207,
        ce => ap_const_logic_1,
        dout => grp_fu_1166_p2);

    mac_muladd_16s_16s_24ns_24_4_1_U7 : component nnlayer_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => input_r_q0,
        din1 => weights_q0,
        din2 => grp_fu_1171_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1171_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    i_2_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv8_1 = activation_read_reg_1187) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_1_fu_441_p2 = ap_const_lv1_1))) then 
                i_2_fu_178 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state146) and (icmp_ln16_fu_1096_p2 = ap_const_lv1_0))) then 
                i_2_fu_178 <= i_14_fu_1101_p2;
            end if; 
        end if;
    end process;

    i_4_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv8_2 = activation_read_reg_1187) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_1_fu_441_p2 = ap_const_lv1_1))) then 
                i_4_fu_174 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state115) and (icmp_ln30_fu_1001_p2 = ap_const_lv1_0))) then 
                i_4_fu_174 <= i_16_fu_1006_p2;
            end if; 
        end if;
    end process;

    i_6_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_1_fu_441_p2 = ap_const_lv1_1) and (ap_const_lv8_3 = activation_read_reg_1187))) then 
                i_6_fu_170 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln45_fu_544_p2 = ap_const_lv1_0))) then 
                i_6_fu_170 <= i_18_fu_549_p2;
            end if; 
        end if;
    end process;

    i_7_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln45_fu_544_p2 = ap_const_lv1_1) and (icmp_ln87_reg_1212 = ap_const_lv1_0))) then 
                i_7_fu_190 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                i_7_fu_190 <= i_22_reg_1360;
            end if; 
        end if;
    end process;

    i_9_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln1547_2_fu_677_p2 = ap_const_lv1_0) and (icmp_ln52_fu_661_p2 = ap_const_lv1_1))) then 
                i_9_fu_194 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state54) and (icmp_ln77_fu_954_p2 = ap_const_lv1_0) and (ap_const_lv8_3 = activation_read_reg_1187) and (icmp_ln1547_2_reg_1375 = ap_const_lv1_0) and (icmp_ln87_reg_1212 = ap_const_lv1_0))) then 
                i_9_fu_194 <= i_21_fu_959_p2;
            end if; 
        end if;
    end process;

    i_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv8_1 = activation_read_reg_1187)) and not((ap_const_lv8_2 = activation_read_reg_1187)) and not((ap_const_lv8_3 = activation_read_reg_1187)) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_1_fu_441_p2 = ap_const_lv1_1))) then 
                i_fu_182 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state148) and (icmp_ln112_fu_1145_p2 = ap_const_lv1_0))) then 
                i_fu_182 <= i_12_fu_1150_p2;
            end if; 
        end if;
    end process;

    inNeurons_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                inNeurons_reg_373 <= inNeurons_1_reg_1290;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                inNeurons_reg_373 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    lhs_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                lhs_reg_384 <= trunc_ln1_fu_532_p1(23 downto 8);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                lhs_reg_384 <= bias_q0;
            end if; 
        end if;
    end process;

    outNeurons_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                outNeurons_fu_158 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln91_fu_486_p2 = ap_const_lv1_1))) then 
                outNeurons_fu_158 <= outNeurons_2_reg_1227;
            end if; 
        end if;
    end process;

    rhs_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_1_fu_441_p2 = ap_const_lv1_1) and (ap_const_lv8_3 = activation_read_reg_1187))) then 
                rhs_fu_166 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                rhs_fu_166 <= overflow_2_fu_645_p3;
            end if; 
        end if;
    end process;

    storemerge8_reg_395_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (tmp_4_fu_854_p3 = ap_const_lv1_0) and (icmp_ln1547_3_fu_848_p2 = ap_const_lv1_0))) then 
                storemerge8_reg_395 <= ap_const_lv32_10000;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state52) and (tmp_4_reg_1438 = ap_const_lv1_1) and (icmp_ln1547_3_reg_1434 = ap_const_lv1_0))) then 
                storemerge8_reg_395 <= zext_ln717_fu_903_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state52) and (icmp_ln1547_3_reg_1434 = ap_const_lv1_1))) then 
                storemerge8_reg_395 <= shl_ln740_1_fu_918_p2;
            end if; 
        end if;
    end process;

    sum_V_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln45_fu_544_p2 = ap_const_lv1_1) and (icmp_ln87_reg_1212 = ap_const_lv1_0))) then 
                sum_V_fu_186 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                sum_V_fu_186 <= sum_V_1_fu_940_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                activation_read_reg_1187 <= activation;
                empty_reg_1207 <= empty_fu_419_p1;
                icmp_ln87_reg_1212 <= icmp_ln87_fu_423_p2;
                numOfInNeurons_read_reg_1202 <= numOfInNeurons;
                numOfOutputNeurons_read_reg_1191 <= numOfOutputNeurons;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                fixed_V_reg_1417 <= fixed_V_fu_796_p3;
                p_Result_s_reg_1422 <= fixed_V_fu_796_p3(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_22_reg_1360 <= i_22_fu_666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln52_fu_661_p2 = ap_const_lv1_1))) then
                icmp_ln1547_2_reg_1375 <= icmp_ln1547_2_fu_677_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                icmp_ln1547_3_reg_1434 <= icmp_ln1547_3_fu_848_p2;
                tmp_V_1_reg_1429 <= ret_V_6_fu_832_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                icmp_ln1548_reg_1386 <= icmp_ln1548_fu_697_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                inNeurons_1_reg_1290 <= inNeurons_1_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                lshr_ln1201_reg_1452 <= lshr_ln1201_fu_875_p2;
                r_V_3_reg_1447 <= grp_fu_866_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mul_i_reg_1282 <= grp_fu_1166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                outNeurons_2_reg_1227 <= outNeurons_2_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln52_fu_661_p2 = ap_const_lv1_0))) then
                output_V_addr_5_reg_1370 <= zext_ln56_fu_672_p1(7 - 1 downto 0);
                    zext_ln56_reg_1365(15 downto 0) <= zext_ln56_fu_672_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_1272 <= zext_ln90_fu_477_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_415 <= output_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                resArray_V_addr_1_reg_1390 <= zext_ln56_reg_1365(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state116)) then
                ret_V_1_reg_1508 <= ret_V_1_fu_1048_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln45_fu_544_p2 = ap_const_lv1_1))) then
                    rhs_2_reg_1333(15 downto 8) <= rhs_2_fu_565_p3(15 downto 8);
                    sext_ln52_reg_1338(16 downto 8) <= sext_ln52_fu_573_p1(16 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                select_ln7_reg_1395 <= select_ln7_fu_722_p3;
                tmp_3_reg_1400 <= select_ln7_fu_722_p3(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_2_cast_reg_1411 <= mul_ln1201_fu_749_p2(47 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln1547_3_fu_848_p2 = ap_const_lv1_0))) then
                tmp_4_reg_1438 <= reg_415(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                tmp_5_reg_1457 <= r_V_4_fu_887_p2(41 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_3_reg_1400 = ap_const_lv1_1))) then
                trunc_ln1201_reg_1406 <= trunc_ln1201_fu_755_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state144)) then
                trunc_ln717_1_reg_1523 <= ret_V_2_fu_1077_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state148) and (icmp_ln112_fu_1145_p2 = ap_const_lv1_0))) then
                    zext_ln114_reg_1544(15 downto 0) <= zext_ln114_fu_1156_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state146) and (icmp_ln16_fu_1096_p2 = ap_const_lv1_0))) then
                    zext_ln18_reg_1531(15 downto 0) <= zext_ln18_fu_1107_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state115) and (icmp_ln30_fu_1001_p2 = ap_const_lv1_0))) then
                    zext_ln32_reg_1498(15 downto 0) <= zext_ln32_fu_1012_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) and (icmp_ln77_fu_954_p2 = ap_const_lv1_0) and (ap_const_lv8_3 = activation_read_reg_1187) and (icmp_ln1547_2_reg_1375 = ap_const_lv1_0) and (icmp_ln87_reg_1212 = ap_const_lv1_0))) then
                    zext_ln80_reg_1475(15 downto 0) <= zext_ln80_fu_965_p1(15 downto 0);
            end if;
        end if;
    end process;
    rhs_2_reg_1333(7 downto 0) <= "00000000";
    sext_ln52_reg_1338(7 downto 0) <= "00000000";
    zext_ln56_reg_1365(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln80_reg_1475(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln32_reg_1498(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln18_reg_1531(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln114_reg_1544(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, activation_read_reg_1187, icmp_ln87_reg_1212, ap_CS_fsm_state2, ap_CS_fsm_state6, icmp_ln91_fu_486_p2, ap_CS_fsm_state11, icmp_ln45_fu_544_p2, ap_CS_fsm_state14, icmp_ln52_fu_661_p2, icmp_ln1547_2_reg_1375, ap_CS_fsm_state21, icmp_ln1547_3_fu_848_p2, tmp_4_fu_854_p3, ap_CS_fsm_state54, icmp_ln77_fu_954_p2, ap_CS_fsm_state115, icmp_ln30_fu_1001_p2, ap_CS_fsm_state146, icmp_ln16_fu_1096_p2, ap_CS_fsm_state148, icmp_ln112_fu_1145_p2, icmp_ln87_1_fu_441_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((ap_const_lv8_1 = activation_read_reg_1187)) and not((ap_const_lv8_2 = activation_read_reg_1187)) and not((ap_const_lv8_3 = activation_read_reg_1187)) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_1_fu_441_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state148;
                elsif (((ap_const_lv8_1 = activation_read_reg_1187) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_1_fu_441_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state146;
                elsif (((ap_const_lv8_2 = activation_read_reg_1187) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_1_fu_441_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_1_fu_441_p2 = ap_const_lv1_1) and (ap_const_lv8_3 = activation_read_reg_1187))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln91_fu_486_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln45_fu_544_p2 = ap_const_lv1_1) and (icmp_ln87_reg_1212 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln45_fu_544_p2 = ap_const_lv1_1) and (icmp_ln87_reg_1212 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln52_fu_661_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (tmp_4_fu_854_p3 = ap_const_lv1_1) and (icmp_ln1547_3_fu_848_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state54 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state54) and (not((ap_const_lv8_3 = activation_read_reg_1187)) or ((icmp_ln87_reg_1212 = ap_const_lv1_1) or ((icmp_ln77_fu_954_p2 = ap_const_lv1_1) or (icmp_ln1547_2_reg_1375 = ap_const_lv1_1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state115 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state115) and (icmp_ln30_fu_1001_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state116;
                end if;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state146 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state146) and (icmp_ln16_fu_1096_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state147;
                end if;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state148 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state148) and (icmp_ln112_fu_1145_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state149;
                end if;
            when ap_ST_fsm_state149 => 
                ap_NS_fsm <= ap_ST_fsm_state148;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln94_fu_497_p2 <= std_logic_vector(signed(mul_i_reg_1282) + signed(trunc_ln91_fu_482_p1));
    and_ln1547_fu_631_p2 <= (icmp_ln1547_fu_587_p2 and icmp_ln1547_1_fu_615_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state144 <= ap_CS_fsm(143);
    ap_CS_fsm_state145 <= ap_CS_fsm(144);
    ap_CS_fsm_state146 <= ap_CS_fsm(145);
    ap_CS_fsm_state147 <= ap_CS_fsm(146);
    ap_CS_fsm_state148 <= ap_CS_fsm(147);
    ap_CS_fsm_state149 <= ap_CS_fsm(148);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;
    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;
    ap_ST_fsm_state103_blk <= ap_const_logic_0;
    ap_ST_fsm_state104_blk <= ap_const_logic_0;
    ap_ST_fsm_state105_blk <= ap_const_logic_0;
    ap_ST_fsm_state106_blk <= ap_const_logic_0;
    ap_ST_fsm_state107_blk <= ap_const_logic_0;
    ap_ST_fsm_state108_blk <= ap_const_logic_0;
    ap_ST_fsm_state109_blk <= ap_const_logic_0;
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state110_blk <= ap_const_logic_0;
    ap_ST_fsm_state111_blk <= ap_const_logic_0;
    ap_ST_fsm_state112_blk <= ap_const_logic_0;
    ap_ST_fsm_state113_blk <= ap_const_logic_0;
    ap_ST_fsm_state114_blk <= ap_const_logic_0;
    ap_ST_fsm_state115_blk <= ap_const_logic_0;
    ap_ST_fsm_state116_blk <= ap_const_logic_0;
    ap_ST_fsm_state117_blk <= ap_const_logic_0;
    ap_ST_fsm_state118_blk <= ap_const_logic_0;
    ap_ST_fsm_state119_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state120_blk <= ap_const_logic_0;
    ap_ST_fsm_state121_blk <= ap_const_logic_0;
    ap_ST_fsm_state122_blk <= ap_const_logic_0;
    ap_ST_fsm_state123_blk <= ap_const_logic_0;
    ap_ST_fsm_state124_blk <= ap_const_logic_0;
    ap_ST_fsm_state125_blk <= ap_const_logic_0;
    ap_ST_fsm_state126_blk <= ap_const_logic_0;
    ap_ST_fsm_state127_blk <= ap_const_logic_0;
    ap_ST_fsm_state128_blk <= ap_const_logic_0;
    ap_ST_fsm_state129_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state130_blk <= ap_const_logic_0;
    ap_ST_fsm_state131_blk <= ap_const_logic_0;
    ap_ST_fsm_state132_blk <= ap_const_logic_0;
    ap_ST_fsm_state133_blk <= ap_const_logic_0;
    ap_ST_fsm_state134_blk <= ap_const_logic_0;
    ap_ST_fsm_state135_blk <= ap_const_logic_0;
    ap_ST_fsm_state136_blk <= ap_const_logic_0;
    ap_ST_fsm_state137_blk <= ap_const_logic_0;
    ap_ST_fsm_state138_blk <= ap_const_logic_0;
    ap_ST_fsm_state139_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state140_blk <= ap_const_logic_0;
    ap_ST_fsm_state141_blk <= ap_const_logic_0;
    ap_ST_fsm_state142_blk <= ap_const_logic_0;
    ap_ST_fsm_state143_blk <= ap_const_logic_0;
    ap_ST_fsm_state144_blk <= ap_const_logic_0;
    ap_ST_fsm_state145_blk <= ap_const_logic_0;
    ap_ST_fsm_state146_blk <= ap_const_logic_0;
    ap_ST_fsm_state147_blk <= ap_const_logic_0;
    ap_ST_fsm_state148_blk <= ap_const_logic_0;
    ap_ST_fsm_state149_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;
    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;
    ap_ST_fsm_state93_blk <= ap_const_logic_0;
    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state95_blk <= ap_const_logic_0;
    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;
    ap_ST_fsm_state98_blk <= ap_const_logic_0;
    ap_ST_fsm_state99_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(activation_read_reg_1187, icmp_ln87_reg_1212, icmp_ln1547_2_reg_1375, ap_CS_fsm_state54, icmp_ln77_fu_954_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) and (not((ap_const_lv8_3 = activation_read_reg_1187)) or ((icmp_ln87_reg_1212 = ap_const_lv1_1) or ((icmp_ln77_fu_954_p2 = ap_const_lv1_1) or (icmp_ln1547_2_reg_1375 = ap_const_lv1_1)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_lv1_0;

    ap_ready_assign_proc : process(activation_read_reg_1187, icmp_ln87_reg_1212, icmp_ln1547_2_reg_1375, ap_CS_fsm_state54, icmp_ln77_fu_954_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) and (not((ap_const_lv8_3 = activation_read_reg_1187)) or ((icmp_ln87_reg_1212 = ap_const_lv1_1) or ((icmp_ln77_fu_954_p2 = ap_const_lv1_1) or (icmp_ln1547_2_reg_1375 = ap_const_lv1_1)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= zext_ln90_fu_477_p1(7 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_419_p1 <= numOfInNeurons(14 - 1 downto 0);
    fixed_V_fu_796_p3 <= 
        sub_ln1201_1_fu_790_p2 when (tmp_3_reg_1400(0) = '1') else 
        tmp_2_cast_reg_1411;

    grp_fu_1065_ap_start_assign_proc : process(ap_CS_fsm_state117)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            grp_fu_1065_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1065_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1065_p0 <= (reg_415 & ap_const_lv8_0);
    grp_fu_1166_p0 <= outNeurons_fu_158(14 - 1 downto 0);
    grp_fu_1171_p2 <= (lhs_reg_384 & ap_const_lv8_0);

    grp_fu_866_ap_start_assign_proc : process(ap_CS_fsm_state21, icmp_ln1547_3_fu_848_p2, tmp_4_fu_854_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (tmp_4_fu_854_p3 = ap_const_lv1_1) and (icmp_ln1547_3_fu_848_p2 = ap_const_lv1_0))) then 
            grp_fu_866_ap_start <= ap_const_logic_1;
        else 
            grp_fu_866_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_1_fu_838_p4),26));


    grp_fu_987_ap_start_assign_proc : process(ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_987_ap_start <= ap_const_logic_1;
        else 
            grp_fu_987_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_987_p0 <= grp_fu_987_p00(56 - 1 downto 0);
    grp_fu_987_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_4_fu_975_p3),64));
    i_12_fu_1150_p2 <= std_logic_vector(unsigned(i_fu_182) + unsigned(ap_const_lv16_1));
    i_14_fu_1101_p2 <= std_logic_vector(unsigned(i_2_fu_178) + unsigned(ap_const_lv16_1));
    i_16_fu_1006_p2 <= std_logic_vector(unsigned(i_4_fu_174) + unsigned(ap_const_lv16_1));
    i_18_fu_549_p2 <= std_logic_vector(unsigned(i_6_fu_170) + unsigned(ap_const_lv16_1));
    i_21_fu_959_p2 <= std_logic_vector(unsigned(i_9_fu_194) + unsigned(ap_const_lv16_1));
    i_22_fu_666_p2 <= std_logic_vector(unsigned(i_7_fu_190) + unsigned(ap_const_lv16_1));
    icmp_ln112_fu_1145_p2 <= "1" when (i_fu_182 = numOfOutputNeurons_read_reg_1191) else "0";
    icmp_ln1547_1_fu_615_p2 <= "1" when (signed(ret_V_7_fu_597_p2) > signed(sext_ln1547_fu_611_p1)) else "0";
    icmp_ln1547_2_fu_677_p2 <= "1" when (sum_V_fu_186 = ap_const_lv64_0) else "0";
    icmp_ln1547_3_fu_848_p2 <= "1" when (signed(reg_415) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1547_fu_587_p2 <= "1" when (signed(reg_415) > signed(ap_const_lv16_B00)) else "0";
    icmp_ln1548_fu_697_p2 <= "1" when (signed(ret_V_4_fu_692_p2) < signed(ap_const_lv17_1F500)) else "0";
    icmp_ln16_fu_1096_p2 <= "1" when (i_2_fu_178 = numOfOutputNeurons_read_reg_1191) else "0";
    icmp_ln30_fu_1001_p2 <= "1" when (i_4_fu_174 = numOfOutputNeurons_read_reg_1191) else "0";
    icmp_ln45_fu_544_p2 <= "1" when (i_6_fu_170 = numOfOutputNeurons_read_reg_1191) else "0";
    icmp_ln52_fu_661_p2 <= "1" when (i_7_fu_190 = numOfOutputNeurons_read_reg_1191) else "0";
    icmp_ln77_fu_954_p2 <= "1" when (i_9_fu_194 = numOfOutputNeurons_read_reg_1191) else "0";
    icmp_ln87_1_fu_441_p2 <= "1" when (outNeurons_fu_158 = numOfOutputNeurons_read_reg_1191) else "0";
    icmp_ln87_fu_423_p2 <= "1" when (numOfOutputNeurons = ap_const_lv16_0) else "0";
    icmp_ln91_fu_486_p2 <= "1" when (inNeurons_reg_373 = numOfInNeurons_read_reg_1202) else "0";
    inNeurons_1_fu_491_p2 <= std_logic_vector(unsigned(inNeurons_reg_373) + unsigned(ap_const_lv16_1));
    input_r_address0 <= zext_ln94_fu_507_p1(7 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_2_fu_824_p3 <= (ret_V_8_fu_819_p2 & ap_const_lv8_0);
    lshr_ln1201_fu_875_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_10000),to_integer(unsigned('0' & zext_ln67_fu_872_p1(31-1 downto 0)))));
    mul_ln1201_fu_749_p1 <= ap_const_lv50_1724288(26 - 1 downto 0);
    outNeurons_2_fu_446_p2 <= std_logic_vector(unsigned(outNeurons_fu_158) + unsigned(ap_const_lv16_1));

    output_V_address0_assign_proc : process(output_V_addr_reg_1272, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state14, zext_ln56_fu_672_p1, output_V_addr_5_reg_1370, ap_CS_fsm_state16, zext_ln32_fu_1012_p1, ap_CS_fsm_state115, zext_ln18_fu_1107_p1, ap_CS_fsm_state146, zext_ln114_fu_1156_p1, ap_CS_fsm_state148, zext_ln46_fu_555_p1, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state148)) then 
            output_V_address0 <= zext_ln114_fu_1156_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state146)) then 
            output_V_address0 <= zext_ln18_fu_1107_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            output_V_address0 <= zext_ln32_fu_1012_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            output_V_address0 <= output_V_addr_5_reg_1370;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_V_address0 <= zext_ln56_fu_672_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_V_address0 <= zext_ln46_fu_555_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_address0 <= output_V_addr_reg_1272;
        else 
            output_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    output_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state115, ap_CS_fsm_state146, ap_CS_fsm_state148, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state148) or (ap_const_logic_1 = ap_CS_fsm_state146) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state16, lhs_reg_384)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_V_d0 <= ap_const_lv16_F500;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_d0 <= lhs_reg_384;
        else 
            output_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln91_fu_486_p2, icmp_ln1548_reg_1386, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln1548_reg_1386 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln91_fu_486_p2 = ap_const_lv1_1)))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_address0_assign_proc : process(zext_ln80_reg_1475, zext_ln32_reg_1498, zext_ln18_reg_1531, zext_ln114_reg_1544, ap_CS_fsm_state114, ap_CS_fsm_state145, ap_CS_fsm_state147, ap_CS_fsm_state149)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            output_r_address0 <= zext_ln114_reg_1544(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            output_r_address0 <= zext_ln18_reg_1531(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state145)) then 
            output_r_address0 <= zext_ln32_reg_1498(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            output_r_address0 <= zext_ln80_reg_1475(7 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state114, ap_CS_fsm_state145, ap_CS_fsm_state147, ap_CS_fsm_state149)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state149) or (ap_const_logic_1 = ap_CS_fsm_state147) or (ap_const_logic_1 = ap_CS_fsm_state145) or (ap_const_logic_1 = ap_CS_fsm_state114))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(output_V_q0, trunc_ln717_1_reg_1523, ap_CS_fsm_state114, ap_CS_fsm_state145, ap_CS_fsm_state147, ap_CS_fsm_state149, trunc_ln717_fu_993_p1, zext_ln20_fu_1137_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            output_r_d0 <= output_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            output_r_d0 <= zext_ln20_fu_1137_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state145)) then 
            output_r_d0 <= trunc_ln717_1_reg_1523;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            output_r_d0 <= trunc_ln717_fu_993_p1;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state114, ap_CS_fsm_state145, ap_CS_fsm_state147, ap_CS_fsm_state149)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state149) or (ap_const_logic_1 = ap_CS_fsm_state147) or (ap_const_logic_1 = ap_CS_fsm_state145) or (ap_const_logic_1 = ap_CS_fsm_state114))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_1_fu_637_p3 <= 
        overflow_fu_621_p4 when (and_ln1547_fu_631_p2(0) = '1') else 
        rhs_fu_166;
    overflow_2_fu_645_p3 <= 
        overflow_1_fu_637_p3 when (icmp_ln1547_fu_587_p2(0) = '1') else 
        rhs_fu_166;
    overflow_fu_621_p4 <= ret_V_7_fu_597_p2(15 downto 8);
    r_V_2_fu_1071_p2 <= std_logic_vector(shift_left(unsigned(grp_fu_1065_p2),to_integer(unsigned('0' & ap_const_lv24_7(24-1 downto 0)))));
    r_V_4_fu_887_p0 <= r_V_4_fu_887_p00(32 - 1 downto 0);
    r_V_4_fu_887_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1201_reg_1452),42));
    r_V_4_fu_887_p1 <= r_V_4_fu_887_p10(26 - 1 downto 0);
    r_V_4_fu_887_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_reg_1447),42));

    resArray_V_address0_assign_proc : process(ap_CS_fsm_state2, resArray_V_addr_1_reg_1390, zext_ln80_fu_965_p1, ap_CS_fsm_state54, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            resArray_V_address0 <= zext_ln80_fu_965_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            resArray_V_address0 <= resArray_V_addr_1_reg_1390;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            resArray_V_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            resArray_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    resArray_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state54, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            resArray_V_ce0 <= ap_const_logic_1;
        else 
            resArray_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    resArray_V_d0_assign_proc : process(ap_CS_fsm_state2, storemerge8_reg_395, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            resArray_V_d0 <= storemerge8_reg_395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            resArray_V_d0 <= ap_const_lv32_0;
        else 
            resArray_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    resArray_V_we0_assign_proc : process(activation_read_reg_1187, ap_CS_fsm_state2, icmp_ln87_1_fu_441_p2, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_1_fu_441_p2 = ap_const_lv1_1) and (ap_const_lv8_3 = activation_read_reg_1187)))) then 
            resArray_V_we0 <= ap_const_logic_1;
        else 
            resArray_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_1_fu_1048_p2 <= std_logic_vector(signed(sext_ln712_fu_1044_p1) + signed(ap_const_lv17_100));
    ret_V_2_fu_1077_p2 <= std_logic_vector(unsigned(r_V_2_fu_1071_p2) + unsigned(ap_const_lv24_8000));
    ret_V_4_fu_692_p2 <= std_logic_vector(signed(sext_ln712_1_fu_688_p1) - signed(sext_ln52_reg_1338));
    ret_V_6_fu_832_p2 <= std_logic_vector(unsigned(lhs_V_2_fu_824_p3) + unsigned(ap_const_lv24_10000));
    ret_V_7_fu_597_p2 <= std_logic_vector(unsigned(zext_ln1246_fu_593_p1) + unsigned(ap_const_lv17_1F500));
    ret_V_8_fu_819_p2 <= std_logic_vector(unsigned(fixed_V_reg_1417) - unsigned(whole_V_fu_812_p3));
    rhs_2_fu_565_p3 <= (rhs_fu_166 & ap_const_lv8_0);
    select_ln1201_fu_784_p3 <= 
        tmp_1_cast_fu_774_p4 when (tmp_3_reg_1400(0) = '1') else 
        tmp_2_cast_reg_1411;
    select_ln18_fu_1129_p3 <= 
        ap_const_lv15_0 when (tmp_fu_1121_p3(0) = '1') else 
        trunc_ln1548_fu_1117_p1;
    select_ln7_fu_722_p3 <= 
        sub_ln712_2_fu_716_p2 when (tmp_2_fu_708_p3(0) = '1') else 
        x_V_fu_703_p2;
        sext_ln1547_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_603_p3),17));

        sext_ln52_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_2_fu_565_p3),17));

    sext_ln712_1_fu_688_p0 <= output_V_q0;
        sext_ln712_1_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln712_1_fu_688_p0),17));

        sext_ln712_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_V_4_fu_1036_p3),17));

        sext_ln740_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_1_reg_1429),32));

    shl_ln1_fu_928_p3 <= (storemerge8_reg_395 & ap_const_lv16_0);
    shl_ln740_1_fu_918_p2 <= std_logic_vector(shift_left(unsigned(shl_ln740_fu_912_p2),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln740_fu_912_p2 <= std_logic_vector(shift_left(unsigned(sext_ln740_fu_909_p1),to_integer(unsigned('0' & zext_ln64_fu_906_p1(31-1 downto 0)))));
    shl_ln_fu_603_p3 <= (rhs_fu_166 & ap_const_lv8_0);
    sub_ln1201_1_fu_790_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(select_ln1201_fu_784_p3));
    sub_ln1201_fu_769_p2 <= std_logic_vector(unsigned(ap_const_lv49_0) - unsigned(trunc_ln1201_reg_1406));
    sub_ln712_2_fu_716_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(x_V_fu_703_p2));
    sub_ln712_fu_1030_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(output_V_q0));
    sum_V_1_fu_940_p2 <= std_logic_vector(unsigned(zext_ln712_fu_936_p1) + unsigned(sum_V_fu_186));
    t_2_fu_738_p3 <= (select_ln7_reg_1395 & ap_const_lv8_0);
    t_4_fu_975_p3 <= (resArray_V_q0 & ap_const_lv24_0);
    tmp_1_cast_fu_774_p4 <= sub_ln1201_fu_769_p2(47 downto 32);
    tmp_1_fu_1022_p3 <= output_V_q0(15 downto 15);
    tmp_2_fu_708_p3 <= x_V_fu_703_p2(15 downto 15);
    tmp_4_fu_854_p3 <= reg_415(15 downto 15);
    tmp_V_1_fu_838_p4 <= ret_V_6_fu_832_p2(23 downto 8);
    tmp_fu_1121_p3 <= output_V_q0(15 downto 15);
    trunc_ln1201_fu_755_p1 <= mul_ln1201_fu_749_p2(49 - 1 downto 0);
    trunc_ln1548_fu_1117_p1 <= output_V_q0(15 - 1 downto 0);
    trunc_ln1_fu_532_p1 <= grp_fu_1171_p3;
    trunc_ln717_fu_993_p1 <= grp_fu_987_p2(16 - 1 downto 0);
    trunc_ln91_fu_482_p1 <= inNeurons_reg_373(14 - 1 downto 0);
    weights_address0 <= zext_ln94_1_fu_502_p1(14 - 1 downto 0);

    weights_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weights_ce0 <= ap_const_logic_1;
        else 
            weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    whole_V_fu_812_p3 <= (p_Result_s_reg_1422 & ap_const_lv8_0);
    x_V_4_fu_1036_p3 <= 
        sub_ln712_fu_1030_p2 when (tmp_1_fu_1022_p3(0) = '1') else 
        output_V_q0;
    x_V_fu_703_p2 <= std_logic_vector(unsigned(output_V_q0) - unsigned(rhs_2_reg_1333));
    zext_ln114_fu_1156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_182),64));
    zext_ln1246_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_415),17));
    zext_ln18_fu_1107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_178),64));
    zext_ln20_fu_1137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_fu_1129_p3),16));
    zext_ln32_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_fu_174),64));
    zext_ln46_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_fu_170),64));
    zext_ln56_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_fu_190),64));
    zext_ln64_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_reg_1422),32));
    zext_ln67_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_reg_1422),32));
    zext_ln712_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_928_p3),64));
    zext_ln717_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_1457),32));
    zext_ln80_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_fu_194),64));
    zext_ln90_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_fu_158),64));
    zext_ln94_1_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln94_fu_497_p2),64));
    zext_ln94_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inNeurons_reg_373),64));
end behav;
