// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nnlayer_nnlayer,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=21,HLS_SYN_DSP=0,HLS_SYN_FF=2714,HLS_SYN_LUT=3434,HLS_VERSION=2021_2}" *)

module nnlayer (
        ap_local_block,
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 149'd1;
parameter    ap_ST_fsm_state2 = 149'd2;
parameter    ap_ST_fsm_state3 = 149'd4;
parameter    ap_ST_fsm_state4 = 149'd8;
parameter    ap_ST_fsm_state5 = 149'd16;
parameter    ap_ST_fsm_state6 = 149'd32;
parameter    ap_ST_fsm_state7 = 149'd64;
parameter    ap_ST_fsm_state8 = 149'd128;
parameter    ap_ST_fsm_state9 = 149'd256;
parameter    ap_ST_fsm_state10 = 149'd512;
parameter    ap_ST_fsm_state11 = 149'd1024;
parameter    ap_ST_fsm_state12 = 149'd2048;
parameter    ap_ST_fsm_state13 = 149'd4096;
parameter    ap_ST_fsm_state14 = 149'd8192;
parameter    ap_ST_fsm_state15 = 149'd16384;
parameter    ap_ST_fsm_state16 = 149'd32768;
parameter    ap_ST_fsm_state17 = 149'd65536;
parameter    ap_ST_fsm_state18 = 149'd131072;
parameter    ap_ST_fsm_state19 = 149'd262144;
parameter    ap_ST_fsm_state20 = 149'd524288;
parameter    ap_ST_fsm_state21 = 149'd1048576;
parameter    ap_ST_fsm_state22 = 149'd2097152;
parameter    ap_ST_fsm_state23 = 149'd4194304;
parameter    ap_ST_fsm_state24 = 149'd8388608;
parameter    ap_ST_fsm_state25 = 149'd16777216;
parameter    ap_ST_fsm_state26 = 149'd33554432;
parameter    ap_ST_fsm_state27 = 149'd67108864;
parameter    ap_ST_fsm_state28 = 149'd134217728;
parameter    ap_ST_fsm_state29 = 149'd268435456;
parameter    ap_ST_fsm_state30 = 149'd536870912;
parameter    ap_ST_fsm_state31 = 149'd1073741824;
parameter    ap_ST_fsm_state32 = 149'd2147483648;
parameter    ap_ST_fsm_state33 = 149'd4294967296;
parameter    ap_ST_fsm_state34 = 149'd8589934592;
parameter    ap_ST_fsm_state35 = 149'd17179869184;
parameter    ap_ST_fsm_state36 = 149'd34359738368;
parameter    ap_ST_fsm_state37 = 149'd68719476736;
parameter    ap_ST_fsm_state38 = 149'd137438953472;
parameter    ap_ST_fsm_state39 = 149'd274877906944;
parameter    ap_ST_fsm_state40 = 149'd549755813888;
parameter    ap_ST_fsm_state41 = 149'd1099511627776;
parameter    ap_ST_fsm_state42 = 149'd2199023255552;
parameter    ap_ST_fsm_state43 = 149'd4398046511104;
parameter    ap_ST_fsm_state44 = 149'd8796093022208;
parameter    ap_ST_fsm_state45 = 149'd17592186044416;
parameter    ap_ST_fsm_state46 = 149'd35184372088832;
parameter    ap_ST_fsm_state47 = 149'd70368744177664;
parameter    ap_ST_fsm_state48 = 149'd140737488355328;
parameter    ap_ST_fsm_state49 = 149'd281474976710656;
parameter    ap_ST_fsm_state50 = 149'd562949953421312;
parameter    ap_ST_fsm_state51 = 149'd1125899906842624;
parameter    ap_ST_fsm_state52 = 149'd2251799813685248;
parameter    ap_ST_fsm_state53 = 149'd4503599627370496;
parameter    ap_ST_fsm_state54 = 149'd9007199254740992;
parameter    ap_ST_fsm_state55 = 149'd18014398509481984;
parameter    ap_ST_fsm_state56 = 149'd36028797018963968;
parameter    ap_ST_fsm_state57 = 149'd72057594037927936;
parameter    ap_ST_fsm_state58 = 149'd144115188075855872;
parameter    ap_ST_fsm_state59 = 149'd288230376151711744;
parameter    ap_ST_fsm_state60 = 149'd576460752303423488;
parameter    ap_ST_fsm_state61 = 149'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 149'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 149'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 149'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 149'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 149'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 149'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 149'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 149'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 149'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 149'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 149'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 149'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 149'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 149'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 149'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 149'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 149'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 149'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 149'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 149'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 149'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 149'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 149'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 149'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 149'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 149'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 149'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 149'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 149'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 149'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 149'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 149'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 149'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 149'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 149'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 149'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 149'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 149'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 149'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 149'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 149'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 149'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 149'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 149'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 149'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 149'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 149'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 149'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 149'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 149'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 149'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 149'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 149'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 149'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 149'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 149'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 149'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 149'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 149'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 149'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 149'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 149'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 149'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 149'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 149'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 149'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 149'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 149'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 149'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 149'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 149'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 149'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 149'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 149'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 149'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 149'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 149'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 149'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 149'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 149'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 149'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 149'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 149'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 149'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 149'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 149'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 149'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 149'd356811923176489970264571492362373784095686656;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 16;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

output   ap_local_block;
input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

wire   [0:0] ap_local_deadlock;
(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [148:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [6:0] input_r_address0;
reg    input_r_ce0;
wire  signed [15:0] input_r_q0;
reg   [6:0] output_r_address0;
reg    output_r_ce0;
reg    output_r_we0;
reg   [15:0] output_r_d0;
wire   [6:0] bias_address0;
reg    bias_ce0;
wire   [15:0] bias_q0;
wire   [13:0] weights_address0;
reg    weights_ce0;
wire  signed [15:0] weights_q0;
wire   [15:0] numOfInNeurons;
wire   [15:0] numOfOutputNeurons;
wire   [7:0] activation;
reg   [6:0] output_V_address0;
reg    output_V_ce0;
reg    output_V_we0;
reg   [15:0] output_V_d0;
wire   [15:0] output_V_q0;
reg   [15:0] reg_415;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state116;
reg   [7:0] activation_read_reg_1187;
reg   [15:0] numOfOutputNeurons_read_reg_1191;
reg   [15:0] numOfInNeurons_read_reg_1202;
wire  signed [13:0] empty_fu_419_p1;
reg  signed [13:0] empty_reg_1207;
wire   [0:0] icmp_ln87_fu_423_p2;
reg   [0:0] icmp_ln87_reg_1212;
wire    ap_CS_fsm_state2;
wire   [15:0] outNeurons_2_fu_446_p2;
reg   [15:0] outNeurons_2_reg_1227;
wire    ap_CS_fsm_state4;
reg   [6:0] output_V_addr_reg_1272;
wire    ap_CS_fsm_state5;
wire  signed [13:0] grp_fu_1166_p2;
reg  signed [13:0] mul_i_reg_1282;
wire   [15:0] inNeurons_1_fu_491_p2;
reg   [15:0] inNeurons_1_reg_1290;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln91_fu_486_p2;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln45_fu_544_p2;
wire  signed [15:0] rhs_2_fu_565_p3;
reg  signed [15:0] rhs_2_reg_1333;
wire  signed [16:0] sext_ln52_fu_573_p1;
reg  signed [16:0] sext_ln52_reg_1338;
wire   [15:0] i_22_fu_666_p2;
reg   [15:0] i_22_reg_1360;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln56_fu_672_p1;
reg   [63:0] zext_ln56_reg_1365;
wire   [0:0] icmp_ln52_fu_661_p2;
reg   [6:0] output_V_addr_5_reg_1370;
wire   [0:0] icmp_ln1547_2_fu_677_p2;
reg   [0:0] icmp_ln1547_2_reg_1375;
wire   [0:0] icmp_ln1548_fu_697_p2;
reg   [0:0] icmp_ln1548_reg_1386;
wire    ap_CS_fsm_state15;
reg   [6:0] resArray_V_addr_1_reg_1390;
wire    ap_CS_fsm_state16;
wire   [15:0] select_ln7_fu_722_p3;
reg   [15:0] select_ln7_reg_1395;
reg   [0:0] tmp_3_reg_1400;
wire   [48:0] trunc_ln1201_fu_755_p1;
reg   [48:0] trunc_ln1201_reg_1406;
wire    ap_CS_fsm_state19;
reg   [15:0] tmp_2_cast_reg_1411;
wire   [15:0] fixed_V_fu_796_p3;
reg   [15:0] fixed_V_reg_1417;
wire    ap_CS_fsm_state20;
reg   [7:0] p_Result_s_reg_1422;
wire  signed [15:0] tmp_V_1_fu_838_p4;
reg  signed [15:0] tmp_V_1_reg_1429;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln1547_3_fu_848_p2;
reg   [0:0] icmp_ln1547_3_reg_1434;
wire   [0:0] tmp_4_fu_854_p3;
reg   [0:0] tmp_4_reg_1438;
wire   [25:0] grp_fu_866_p2;
reg   [25:0] r_V_3_reg_1447;
wire    ap_CS_fsm_state50;
wire   [31:0] lshr_ln1201_fu_875_p2;
reg   [31:0] lshr_ln1201_reg_1452;
reg   [25:0] tmp_5_reg_1457;
wire    ap_CS_fsm_state51;
wire   [31:0] zext_ln717_fu_903_p1;
wire    ap_CS_fsm_state52;
wire   [31:0] shl_ln740_1_fu_918_p2;
wire   [63:0] zext_ln80_fu_965_p1;
reg   [63:0] zext_ln80_reg_1475;
wire    ap_CS_fsm_state54;
wire   [0:0] icmp_ln77_fu_954_p2;
wire    ap_CS_fsm_state55;
wire   [63:0] zext_ln32_fu_1012_p1;
reg   [63:0] zext_ln32_reg_1498;
wire    ap_CS_fsm_state115;
wire   [0:0] icmp_ln30_fu_1001_p2;
wire   [16:0] ret_V_1_fu_1048_p2;
reg  signed [16:0] ret_V_1_reg_1508;
wire    ap_CS_fsm_state117;
reg   [15:0] trunc_ln717_1_reg_1523;
wire    ap_CS_fsm_state144;
wire   [63:0] zext_ln18_fu_1107_p1;
reg   [63:0] zext_ln18_reg_1531;
wire    ap_CS_fsm_state146;
wire   [0:0] icmp_ln16_fu_1096_p2;
wire   [63:0] zext_ln114_fu_1156_p1;
reg   [63:0] zext_ln114_reg_1544;
wire    ap_CS_fsm_state148;
wire   [0:0] icmp_ln112_fu_1145_p2;
reg   [6:0] resArray_V_address0;
reg    resArray_V_ce0;
reg    resArray_V_we0;
reg   [31:0] resArray_V_d0;
wire   [31:0] resArray_V_q0;
reg   [15:0] inNeurons_reg_373;
reg   [15:0] lhs_reg_384;
reg   [31:0] storemerge8_reg_395;
wire   [0:0] icmp_ln87_1_fu_441_p2;
wire   [63:0] zext_ln90_fu_477_p1;
wire   [63:0] zext_ln94_1_fu_502_p1;
wire   [63:0] zext_ln94_fu_507_p1;
wire   [63:0] zext_ln46_fu_555_p1;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state145;
wire    ap_CS_fsm_state147;
wire    ap_CS_fsm_state149;
reg   [15:0] outNeurons_fu_158;
reg   [7:0] rhs_fu_166;
wire   [7:0] overflow_2_fu_645_p3;
wire    ap_CS_fsm_state13;
reg   [15:0] i_6_fu_170;
wire   [15:0] i_18_fu_549_p2;
reg   [15:0] i_4_fu_174;
wire   [15:0] i_16_fu_1006_p2;
reg   [15:0] i_2_fu_178;
wire   [15:0] i_14_fu_1101_p2;
reg   [15:0] i_fu_182;
wire   [15:0] i_12_fu_1150_p2;
reg   [63:0] sum_V_fu_186;
wire   [63:0] sum_V_1_fu_940_p2;
wire    ap_CS_fsm_state53;
reg   [15:0] i_7_fu_190;
reg   [15:0] i_9_fu_194;
wire   [15:0] i_21_fu_959_p2;
wire    ap_CS_fsm_state17;
wire   [15:0] trunc_ln717_fu_993_p1;
wire   [15:0] zext_ln20_fu_1137_p1;
wire   [13:0] trunc_ln91_fu_482_p1;
(* use_dsp48 = "no" *) wire   [13:0] add_ln94_fu_497_p2;
wire  signed [23:0] trunc_ln1_fu_532_p1;
wire   [23:0] grp_fu_1171_p3;
wire   [16:0] zext_ln1246_fu_593_p1;
wire   [15:0] shl_ln_fu_603_p3;
wire   [16:0] ret_V_7_fu_597_p2;
wire  signed [16:0] sext_ln1547_fu_611_p1;
wire   [0:0] icmp_ln1547_fu_587_p2;
wire   [0:0] icmp_ln1547_1_fu_615_p2;
wire   [0:0] and_ln1547_fu_631_p2;
wire   [7:0] overflow_fu_621_p4;
wire   [7:0] overflow_1_fu_637_p3;
wire  signed [15:0] sext_ln712_1_fu_688_p0;
wire  signed [16:0] sext_ln712_1_fu_688_p1;
wire   [16:0] ret_V_4_fu_692_p2;
wire   [15:0] x_V_fu_703_p2;
wire   [0:0] tmp_2_fu_708_p3;
wire   [15:0] sub_ln712_2_fu_716_p2;
wire  signed [23:0] t_2_fu_738_p3;
wire   [25:0] mul_ln1201_fu_749_p1;
wire   [49:0] mul_ln1201_fu_749_p2;
wire   [48:0] sub_ln1201_fu_769_p2;
wire   [15:0] tmp_1_cast_fu_774_p4;
wire   [15:0] select_ln1201_fu_784_p3;
wire   [15:0] sub_ln1201_1_fu_790_p2;
wire   [15:0] whole_V_fu_812_p3;
wire   [15:0] ret_V_8_fu_819_p2;
wire   [23:0] lhs_V_2_fu_824_p3;
wire   [23:0] ret_V_6_fu_832_p2;
wire  signed [25:0] grp_fu_866_p1;
wire   [31:0] zext_ln67_fu_872_p1;
wire   [31:0] r_V_4_fu_887_p0;
wire   [25:0] r_V_4_fu_887_p1;
wire   [41:0] r_V_4_fu_887_p2;
wire  signed [31:0] sext_ln740_fu_909_p1;
wire   [31:0] zext_ln64_fu_906_p1;
wire   [31:0] shl_ln740_fu_912_p2;
wire   [47:0] shl_ln1_fu_928_p3;
wire   [63:0] zext_ln712_fu_936_p1;
wire   [55:0] t_4_fu_975_p3;
wire   [55:0] grp_fu_987_p0;
wire   [15:0] grp_fu_987_p2;
wire   [0:0] tmp_1_fu_1022_p3;
wire   [15:0] sub_ln712_fu_1030_p2;
wire   [15:0] x_V_4_fu_1036_p3;
wire  signed [16:0] sext_ln712_fu_1044_p1;
wire   [23:0] grp_fu_1065_p0;
wire   [23:0] grp_fu_1065_p2;
wire   [23:0] r_V_2_fu_1071_p2;
wire   [23:0] ret_V_2_fu_1077_p2;
wire   [0:0] tmp_fu_1121_p3;
wire   [14:0] trunc_ln1548_fu_1117_p1;
wire   [14:0] select_ln18_fu_1129_p3;
wire  signed [13:0] grp_fu_1166_p0;
wire   [23:0] grp_fu_1171_p2;
reg    grp_fu_866_ap_start;
wire    grp_fu_866_ap_done;
reg    grp_fu_987_ap_start;
wire    grp_fu_987_ap_done;
reg    grp_fu_1065_ap_start;
wire    grp_fu_1065_ap_done;
reg   [148:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
wire    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
wire    ap_ST_fsm_state99_blk;
wire    ap_ST_fsm_state100_blk;
wire    ap_ST_fsm_state101_blk;
wire    ap_ST_fsm_state102_blk;
wire    ap_ST_fsm_state103_blk;
wire    ap_ST_fsm_state104_blk;
wire    ap_ST_fsm_state105_blk;
wire    ap_ST_fsm_state106_blk;
wire    ap_ST_fsm_state107_blk;
wire    ap_ST_fsm_state108_blk;
wire    ap_ST_fsm_state109_blk;
wire    ap_ST_fsm_state110_blk;
wire    ap_ST_fsm_state111_blk;
wire    ap_ST_fsm_state112_blk;
wire    ap_ST_fsm_state113_blk;
wire    ap_ST_fsm_state114_blk;
wire    ap_ST_fsm_state115_blk;
wire    ap_ST_fsm_state116_blk;
wire    ap_ST_fsm_state117_blk;
wire    ap_ST_fsm_state118_blk;
wire    ap_ST_fsm_state119_blk;
wire    ap_ST_fsm_state120_blk;
wire    ap_ST_fsm_state121_blk;
wire    ap_ST_fsm_state122_blk;
wire    ap_ST_fsm_state123_blk;
wire    ap_ST_fsm_state124_blk;
wire    ap_ST_fsm_state125_blk;
wire    ap_ST_fsm_state126_blk;
wire    ap_ST_fsm_state127_blk;
wire    ap_ST_fsm_state128_blk;
wire    ap_ST_fsm_state129_blk;
wire    ap_ST_fsm_state130_blk;
wire    ap_ST_fsm_state131_blk;
wire    ap_ST_fsm_state132_blk;
wire    ap_ST_fsm_state133_blk;
wire    ap_ST_fsm_state134_blk;
wire    ap_ST_fsm_state135_blk;
wire    ap_ST_fsm_state136_blk;
wire    ap_ST_fsm_state137_blk;
wire    ap_ST_fsm_state138_blk;
wire    ap_ST_fsm_state139_blk;
wire    ap_ST_fsm_state140_blk;
wire    ap_ST_fsm_state141_blk;
wire    ap_ST_fsm_state142_blk;
wire    ap_ST_fsm_state143_blk;
wire    ap_ST_fsm_state144_blk;
wire    ap_ST_fsm_state145_blk;
wire    ap_ST_fsm_state146_blk;
wire    ap_ST_fsm_state147_blk;
wire    ap_ST_fsm_state148_blk;
wire    ap_ST_fsm_state149_blk;
wire   [63:0] grp_fu_987_p00;
wire   [41:0] r_V_4_fu_887_p00;
wire   [41:0] r_V_4_fu_887_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 149'd1;
end

nnlayer_output_V_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
output_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_V_address0),
    .ce0(output_V_ce0),
    .we0(output_V_we0),
    .d0(output_V_d0),
    .q0(output_V_q0)
);

nnlayer_resArray_V_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
resArray_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(resArray_V_address0),
    .ce0(resArray_V_ce0),
    .we0(resArray_V_we0),
    .d0(resArray_V_d0),
    .q0(resArray_V_q0)
);

nnlayer_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .numOfInNeurons(numOfInNeurons),
    .numOfOutputNeurons(numOfOutputNeurons),
    .activation(activation),
    .input_r_address0(input_r_address0),
    .input_r_ce0(input_r_ce0),
    .input_r_q0(input_r_q0),
    .output_r_address0(output_r_address0),
    .output_r_ce0(output_r_ce0),
    .output_r_we0(output_r_we0),
    .output_r_d0(output_r_d0),
    .bias_address0(bias_address0),
    .bias_ce0(bias_ce0),
    .bias_q0(bias_q0),
    .weights_address0(weights_address0),
    .weights_ce0(weights_ce0),
    .weights_q0(weights_q0),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_local_deadlock(ap_local_deadlock)
);

nnlayer_mul_24s_26ns_50_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 50 ))
mul_24s_26ns_50_1_1_U1(
    .din0(t_2_fu_738_p3),
    .din1(mul_ln1201_fu_749_p1),
    .dout(mul_ln1201_fu_749_p2)
);

nnlayer_udiv_26ns_26s_26_30_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 26 ))
udiv_26ns_26s_26_30_seq_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_866_ap_start),
    .done(grp_fu_866_ap_done),
    .din0(26'd16777216),
    .din1(grp_fu_866_p1),
    .ce(1'b1),
    .dout(grp_fu_866_p2)
);

nnlayer_mul_32ns_26ns_42_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 42 ))
mul_32ns_26ns_42_1_1_U3(
    .din0(r_V_4_fu_887_p0),
    .din1(r_V_4_fu_887_p1),
    .dout(r_V_4_fu_887_p2)
);

nnlayer_udiv_56ns_64ns_16_60_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 60 ),
    .din0_WIDTH( 56 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
udiv_56ns_64ns_16_60_seq_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_987_ap_start),
    .done(grp_fu_987_ap_done),
    .din0(grp_fu_987_p0),
    .din1(sum_V_fu_186),
    .ce(1'b1),
    .dout(grp_fu_987_p2)
);

nnlayer_sdiv_24ns_17s_24_28_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 28 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 24 ))
sdiv_24ns_17s_24_28_seq_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1065_ap_start),
    .done(grp_fu_1065_ap_done),
    .din0(grp_fu_1065_p0),
    .din1(ret_V_1_reg_1508),
    .ce(1'b1),
    .dout(grp_fu_1065_p2)
);

nnlayer_mul_mul_14s_14s_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mul_mul_14s_14s_14_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1166_p0),
    .din1(empty_reg_1207),
    .ce(1'b1),
    .dout(grp_fu_1166_p2)
);

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(input_r_q0),
    .din1(weights_q0),
    .din2(grp_fu_1171_p2),
    .ce(1'b1),
    .dout(grp_fu_1171_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((8'd1 == activation_read_reg_1187) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln87_1_fu_441_p2 == 1'd1))) begin
        i_2_fu_178 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state146) & (icmp_ln16_fu_1096_p2 == 1'd0))) begin
        i_2_fu_178 <= i_14_fu_1101_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((8'd2 == activation_read_reg_1187) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln87_1_fu_441_p2 == 1'd1))) begin
        i_4_fu_174 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state115) & (icmp_ln30_fu_1001_p2 == 1'd0))) begin
        i_4_fu_174 <= i_16_fu_1006_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln87_1_fu_441_p2 == 1'd1) & (8'd3 == activation_read_reg_1187))) begin
        i_6_fu_170 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln45_fu_544_p2 == 1'd0))) begin
        i_6_fu_170 <= i_18_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln45_fu_544_p2 == 1'd1) & (icmp_ln87_reg_1212 == 1'd0))) begin
        i_7_fu_190 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        i_7_fu_190 <= i_22_reg_1360;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln1547_2_fu_677_p2 == 1'd0) & (icmp_ln52_fu_661_p2 == 1'd1))) begin
        i_9_fu_194 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state54) & (icmp_ln77_fu_954_p2 == 1'd0) & (8'd3 == activation_read_reg_1187) & (icmp_ln1547_2_reg_1375 == 1'd0) & (icmp_ln87_reg_1212 == 1'd0))) begin
        i_9_fu_194 <= i_21_fu_959_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(8'd1 == activation_read_reg_1187) & ~(8'd2 == activation_read_reg_1187) & ~(8'd3 == activation_read_reg_1187) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln87_1_fu_441_p2 == 1'd1))) begin
        i_fu_182 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state148) & (icmp_ln112_fu_1145_p2 == 1'd0))) begin
        i_fu_182 <= i_12_fu_1150_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        inNeurons_reg_373 <= inNeurons_1_reg_1290;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        inNeurons_reg_373 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        lhs_reg_384 <= {{trunc_ln1_fu_532_p1[23:8]}};
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        lhs_reg_384 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        outNeurons_fu_158 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln91_fu_486_p2 == 1'd1))) begin
        outNeurons_fu_158 <= outNeurons_2_reg_1227;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln87_1_fu_441_p2 == 1'd1) & (8'd3 == activation_read_reg_1187))) begin
        rhs_fu_166 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        rhs_fu_166 <= overflow_2_fu_645_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (tmp_4_fu_854_p3 == 1'd0) & (icmp_ln1547_3_fu_848_p2 == 1'd0))) begin
        storemerge8_reg_395 <= 32'd65536;
    end else if (((1'b1 == ap_CS_fsm_state52) & (tmp_4_reg_1438 == 1'd1) & (icmp_ln1547_3_reg_1434 == 1'd0))) begin
        storemerge8_reg_395 <= zext_ln717_fu_903_p1;
    end else if (((1'b1 == ap_CS_fsm_state52) & (icmp_ln1547_3_reg_1434 == 1'd1))) begin
        storemerge8_reg_395 <= shl_ln740_1_fu_918_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln45_fu_544_p2 == 1'd1) & (icmp_ln87_reg_1212 == 1'd0))) begin
        sum_V_fu_186 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        sum_V_fu_186 <= sum_V_1_fu_940_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        activation_read_reg_1187 <= activation;
        empty_reg_1207 <= empty_fu_419_p1;
        icmp_ln87_reg_1212 <= icmp_ln87_fu_423_p2;
        numOfInNeurons_read_reg_1202 <= numOfInNeurons;
        numOfOutputNeurons_read_reg_1191 <= numOfOutputNeurons;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        fixed_V_reg_1417 <= fixed_V_fu_796_p3;
        p_Result_s_reg_1422 <= {{fixed_V_fu_796_p3[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_22_reg_1360 <= i_22_fu_666_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln52_fu_661_p2 == 1'd1))) begin
        icmp_ln1547_2_reg_1375 <= icmp_ln1547_2_fu_677_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        icmp_ln1547_3_reg_1434 <= icmp_ln1547_3_fu_848_p2;
        tmp_V_1_reg_1429 <= {{ret_V_6_fu_832_p2[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        icmp_ln1548_reg_1386 <= icmp_ln1548_fu_697_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        inNeurons_1_reg_1290 <= inNeurons_1_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        lshr_ln1201_reg_1452 <= lshr_ln1201_fu_875_p2;
        r_V_3_reg_1447 <= grp_fu_866_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mul_i_reg_1282 <= grp_fu_1166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        outNeurons_2_reg_1227 <= outNeurons_2_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln52_fu_661_p2 == 1'd0))) begin
        output_V_addr_5_reg_1370 <= zext_ln56_fu_672_p1;
        zext_ln56_reg_1365[15 : 0] <= zext_ln56_fu_672_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_1272 <= zext_ln90_fu_477_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_415 <= output_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        resArray_V_addr_1_reg_1390 <= zext_ln56_reg_1365;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        ret_V_1_reg_1508 <= ret_V_1_fu_1048_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln45_fu_544_p2 == 1'd1))) begin
        rhs_2_reg_1333[15 : 8] <= rhs_2_fu_565_p3[15 : 8];
        sext_ln52_reg_1338[16 : 8] <= sext_ln52_fu_573_p1[16 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        select_ln7_reg_1395 <= select_ln7_fu_722_p3;
        tmp_3_reg_1400 <= select_ln7_fu_722_p3[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_2_cast_reg_1411 <= {{mul_ln1201_fu_749_p2[47:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln1547_3_fu_848_p2 == 1'd0))) begin
        tmp_4_reg_1438 <= reg_415[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tmp_5_reg_1457 <= {{r_V_4_fu_887_p2[41:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (tmp_3_reg_1400 == 1'd1))) begin
        trunc_ln1201_reg_1406 <= trunc_ln1201_fu_755_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state144)) begin
        trunc_ln717_1_reg_1523 <= {{ret_V_2_fu_1077_p2[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state148) & (icmp_ln112_fu_1145_p2 == 1'd0))) begin
        zext_ln114_reg_1544[15 : 0] <= zext_ln114_fu_1156_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state146) & (icmp_ln16_fu_1096_p2 == 1'd0))) begin
        zext_ln18_reg_1531[15 : 0] <= zext_ln18_fu_1107_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state115) & (icmp_ln30_fu_1001_p2 == 1'd0))) begin
        zext_ln32_reg_1498[15 : 0] <= zext_ln32_fu_1012_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state54) & (icmp_ln77_fu_954_p2 == 1'd0) & (8'd3 == activation_read_reg_1187) & (icmp_ln1547_2_reg_1375 == 1'd0) & (icmp_ln87_reg_1212 == 1'd0))) begin
        zext_ln80_reg_1475[15 : 0] <= zext_ln80_fu_965_p1[15 : 0];
    end
end

assign ap_ST_fsm_state100_blk = 1'b0;

assign ap_ST_fsm_state101_blk = 1'b0;

assign ap_ST_fsm_state102_blk = 1'b0;

assign ap_ST_fsm_state103_blk = 1'b0;

assign ap_ST_fsm_state104_blk = 1'b0;

assign ap_ST_fsm_state105_blk = 1'b0;

assign ap_ST_fsm_state106_blk = 1'b0;

assign ap_ST_fsm_state107_blk = 1'b0;

assign ap_ST_fsm_state108_blk = 1'b0;

assign ap_ST_fsm_state109_blk = 1'b0;

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state110_blk = 1'b0;

assign ap_ST_fsm_state111_blk = 1'b0;

assign ap_ST_fsm_state112_blk = 1'b0;

assign ap_ST_fsm_state113_blk = 1'b0;

assign ap_ST_fsm_state114_blk = 1'b0;

assign ap_ST_fsm_state115_blk = 1'b0;

assign ap_ST_fsm_state116_blk = 1'b0;

assign ap_ST_fsm_state117_blk = 1'b0;

assign ap_ST_fsm_state118_blk = 1'b0;

assign ap_ST_fsm_state119_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state120_blk = 1'b0;

assign ap_ST_fsm_state121_blk = 1'b0;

assign ap_ST_fsm_state122_blk = 1'b0;

assign ap_ST_fsm_state123_blk = 1'b0;

assign ap_ST_fsm_state124_blk = 1'b0;

assign ap_ST_fsm_state125_blk = 1'b0;

assign ap_ST_fsm_state126_blk = 1'b0;

assign ap_ST_fsm_state127_blk = 1'b0;

assign ap_ST_fsm_state128_blk = 1'b0;

assign ap_ST_fsm_state129_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state130_blk = 1'b0;

assign ap_ST_fsm_state131_blk = 1'b0;

assign ap_ST_fsm_state132_blk = 1'b0;

assign ap_ST_fsm_state133_blk = 1'b0;

assign ap_ST_fsm_state134_blk = 1'b0;

assign ap_ST_fsm_state135_blk = 1'b0;

assign ap_ST_fsm_state136_blk = 1'b0;

assign ap_ST_fsm_state137_blk = 1'b0;

assign ap_ST_fsm_state138_blk = 1'b0;

assign ap_ST_fsm_state139_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state140_blk = 1'b0;

assign ap_ST_fsm_state141_blk = 1'b0;

assign ap_ST_fsm_state142_blk = 1'b0;

assign ap_ST_fsm_state143_blk = 1'b0;

assign ap_ST_fsm_state144_blk = 1'b0;

assign ap_ST_fsm_state145_blk = 1'b0;

assign ap_ST_fsm_state146_blk = 1'b0;

assign ap_ST_fsm_state147_blk = 1'b0;

assign ap_ST_fsm_state148_blk = 1'b0;

assign ap_ST_fsm_state149_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

assign ap_ST_fsm_state96_blk = 1'b0;

assign ap_ST_fsm_state97_blk = 1'b0;

assign ap_ST_fsm_state98_blk = 1'b0;

assign ap_ST_fsm_state99_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) & (~(8'd3 == activation_read_reg_1187) | ((icmp_ln87_reg_1212 == 1'd1) | ((icmp_ln77_fu_954_p2 == 1'd1) | (icmp_ln1547_2_reg_1375 == 1'd1)))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) & (~(8'd3 == activation_read_reg_1187) | ((icmp_ln87_reg_1212 == 1'd1) | ((icmp_ln77_fu_954_p2 == 1'd1) | (icmp_ln1547_2_reg_1375 == 1'd1)))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        grp_fu_1065_ap_start = 1'b1;
    end else begin
        grp_fu_1065_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (tmp_4_fu_854_p3 == 1'd1) & (icmp_ln1547_3_fu_848_p2 == 1'd0))) begin
        grp_fu_866_ap_start = 1'b1;
    end else begin
        grp_fu_866_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_987_ap_start = 1'b1;
    end else begin
        grp_fu_987_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state148)) begin
        output_V_address0 = zext_ln114_fu_1156_p1;
    end else if ((1'b1 == ap_CS_fsm_state146)) begin
        output_V_address0 = zext_ln18_fu_1107_p1;
    end else if ((1'b1 == ap_CS_fsm_state115)) begin
        output_V_address0 = zext_ln32_fu_1012_p1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        output_V_address0 = output_V_addr_5_reg_1370;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_V_address0 = zext_ln56_fu_672_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_V_address0 = zext_ln46_fu_555_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_address0 = output_V_addr_reg_1272;
    end else begin
        output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        output_V_d0 = 16'd62720;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_d0 = lhs_reg_384;
    end else begin
        output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state16) & (icmp_ln1548_reg_1386 == 1'd1)) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln91_fu_486_p2 == 1'd1)))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        output_r_address0 = zext_ln114_reg_1544;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        output_r_address0 = zext_ln18_reg_1531;
    end else if ((1'b1 == ap_CS_fsm_state145)) begin
        output_r_address0 = zext_ln32_reg_1498;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        output_r_address0 = zext_ln80_reg_1475;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state114))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        output_r_d0 = output_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        output_r_d0 = zext_ln20_fu_1137_p1;
    end else if ((1'b1 == ap_CS_fsm_state145)) begin
        output_r_d0 = trunc_ln717_1_reg_1523;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        output_r_d0 = trunc_ln717_fu_993_p1;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state114))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        resArray_V_address0 = zext_ln80_fu_965_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        resArray_V_address0 = resArray_V_addr_1_reg_1390;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        resArray_V_address0 = 64'd0;
    end else begin
        resArray_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state2))) begin
        resArray_V_ce0 = 1'b1;
    end else begin
        resArray_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        resArray_V_d0 = storemerge8_reg_395;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        resArray_V_d0 = 32'd0;
    end else begin
        resArray_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln87_1_fu_441_p2 == 1'd1) & (8'd3 == activation_read_reg_1187)))) begin
        resArray_V_we0 = 1'b1;
    end else begin
        resArray_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weights_ce0 = 1'b1;
    end else begin
        weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(8'd1 == activation_read_reg_1187) & ~(8'd2 == activation_read_reg_1187) & ~(8'd3 == activation_read_reg_1187) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln87_1_fu_441_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state148;
            end else if (((8'd1 == activation_read_reg_1187) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln87_1_fu_441_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state146;
            end else if (((8'd2 == activation_read_reg_1187) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln87_1_fu_441_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln87_1_fu_441_p2 == 1'd1) & (8'd3 == activation_read_reg_1187))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln91_fu_486_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln45_fu_544_p2 == 1'd1) & (icmp_ln87_reg_1212 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln45_fu_544_p2 == 1'd1) & (icmp_ln87_reg_1212 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln52_fu_661_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (tmp_4_fu_854_p3 == 1'd1) & (icmp_ln1547_3_fu_848_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state54 : begin
            if (((1'b1 == ap_CS_fsm_state54) & (~(8'd3 == activation_read_reg_1187) | ((icmp_ln87_reg_1212 == 1'd1) | ((icmp_ln77_fu_954_p2 == 1'd1) | (icmp_ln1547_2_reg_1375 == 1'd1)))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state115 : begin
            if (((1'b1 == ap_CS_fsm_state115) & (icmp_ln30_fu_1001_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state146 : begin
            if (((1'b1 == ap_CS_fsm_state146) & (icmp_ln16_fu_1096_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state147;
            end
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state148 : begin
            if (((1'b1 == ap_CS_fsm_state148) & (icmp_ln112_fu_1145_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state149;
            end
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln94_fu_497_p2 = ($signed(mul_i_reg_1282) + $signed(trunc_ln91_fu_482_p1));

assign and_ln1547_fu_631_p2 = (icmp_ln1547_fu_587_p2 & icmp_ln1547_1_fu_615_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state146 = ap_CS_fsm[32'd145];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd146];

assign ap_CS_fsm_state148 = ap_CS_fsm[32'd147];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'd0;

assign bias_address0 = zext_ln90_fu_477_p1;

assign empty_fu_419_p1 = numOfInNeurons[13:0];

assign fixed_V_fu_796_p3 = ((tmp_3_reg_1400[0:0] == 1'b1) ? sub_ln1201_1_fu_790_p2 : tmp_2_cast_reg_1411);

assign grp_fu_1065_p0 = {{reg_415}, {8'd0}};

assign grp_fu_1166_p0 = outNeurons_fu_158[13:0];

assign grp_fu_1171_p2 = {{lhs_reg_384}, {8'd0}};

assign grp_fu_866_p1 = tmp_V_1_fu_838_p4;

assign grp_fu_987_p0 = grp_fu_987_p00;

assign grp_fu_987_p00 = t_4_fu_975_p3;

assign i_12_fu_1150_p2 = (i_fu_182 + 16'd1);

assign i_14_fu_1101_p2 = (i_2_fu_178 + 16'd1);

assign i_16_fu_1006_p2 = (i_4_fu_174 + 16'd1);

assign i_18_fu_549_p2 = (i_6_fu_170 + 16'd1);

assign i_21_fu_959_p2 = (i_9_fu_194 + 16'd1);

assign i_22_fu_666_p2 = (i_7_fu_190 + 16'd1);

assign icmp_ln112_fu_1145_p2 = ((i_fu_182 == numOfOutputNeurons_read_reg_1191) ? 1'b1 : 1'b0);

assign icmp_ln1547_1_fu_615_p2 = (($signed(ret_V_7_fu_597_p2) > $signed(sext_ln1547_fu_611_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1547_2_fu_677_p2 = ((sum_V_fu_186 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln1547_3_fu_848_p2 = (($signed(reg_415) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1547_fu_587_p2 = (($signed(reg_415) > $signed(16'd2816)) ? 1'b1 : 1'b0);

assign icmp_ln1548_fu_697_p2 = (($signed(ret_V_4_fu_692_p2) < $signed(17'd128256)) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_1096_p2 = ((i_2_fu_178 == numOfOutputNeurons_read_reg_1191) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_1001_p2 = ((i_4_fu_174 == numOfOutputNeurons_read_reg_1191) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_544_p2 = ((i_6_fu_170 == numOfOutputNeurons_read_reg_1191) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_661_p2 = ((i_7_fu_190 == numOfOutputNeurons_read_reg_1191) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_954_p2 = ((i_9_fu_194 == numOfOutputNeurons_read_reg_1191) ? 1'b1 : 1'b0);

assign icmp_ln87_1_fu_441_p2 = ((outNeurons_fu_158 == numOfOutputNeurons_read_reg_1191) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_423_p2 = ((numOfOutputNeurons == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_486_p2 = ((inNeurons_reg_373 == numOfInNeurons_read_reg_1202) ? 1'b1 : 1'b0);

assign inNeurons_1_fu_491_p2 = (inNeurons_reg_373 + 16'd1);

assign input_r_address0 = zext_ln94_fu_507_p1;

assign lhs_V_2_fu_824_p3 = {{ret_V_8_fu_819_p2}, {8'd0}};

assign lshr_ln1201_fu_875_p2 = 32'd65536 >> zext_ln67_fu_872_p1;

assign mul_ln1201_fu_749_p1 = 50'd24265352;

assign outNeurons_2_fu_446_p2 = (outNeurons_fu_158 + 16'd1);

assign overflow_1_fu_637_p3 = ((and_ln1547_fu_631_p2[0:0] == 1'b1) ? overflow_fu_621_p4 : rhs_fu_166);

assign overflow_2_fu_645_p3 = ((icmp_ln1547_fu_587_p2[0:0] == 1'b1) ? overflow_1_fu_637_p3 : rhs_fu_166);

assign overflow_fu_621_p4 = {{ret_V_7_fu_597_p2[15:8]}};

assign r_V_2_fu_1071_p2 = grp_fu_1065_p2 << 24'd7;

assign r_V_4_fu_887_p0 = r_V_4_fu_887_p00;

assign r_V_4_fu_887_p00 = lshr_ln1201_reg_1452;

assign r_V_4_fu_887_p1 = r_V_4_fu_887_p10;

assign r_V_4_fu_887_p10 = r_V_3_reg_1447;

assign ret_V_1_fu_1048_p2 = ($signed(sext_ln712_fu_1044_p1) + $signed(17'd256));

assign ret_V_2_fu_1077_p2 = (r_V_2_fu_1071_p2 + 24'd32768);

assign ret_V_4_fu_692_p2 = ($signed(sext_ln712_1_fu_688_p1) - $signed(sext_ln52_reg_1338));

assign ret_V_6_fu_832_p2 = (lhs_V_2_fu_824_p3 + 24'd65536);

assign ret_V_7_fu_597_p2 = ($signed(zext_ln1246_fu_593_p1) + $signed(17'd128256));

assign ret_V_8_fu_819_p2 = (fixed_V_reg_1417 - whole_V_fu_812_p3);

assign rhs_2_fu_565_p3 = {{rhs_fu_166}, {8'd0}};

assign select_ln1201_fu_784_p3 = ((tmp_3_reg_1400[0:0] == 1'b1) ? tmp_1_cast_fu_774_p4 : tmp_2_cast_reg_1411);

assign select_ln18_fu_1129_p3 = ((tmp_fu_1121_p3[0:0] == 1'b1) ? 15'd0 : trunc_ln1548_fu_1117_p1);

assign select_ln7_fu_722_p3 = ((tmp_2_fu_708_p3[0:0] == 1'b1) ? sub_ln712_2_fu_716_p2 : x_V_fu_703_p2);

assign sext_ln1547_fu_611_p1 = $signed(shl_ln_fu_603_p3);

assign sext_ln52_fu_573_p1 = rhs_2_fu_565_p3;

assign sext_ln712_1_fu_688_p0 = output_V_q0;

assign sext_ln712_1_fu_688_p1 = sext_ln712_1_fu_688_p0;

assign sext_ln712_fu_1044_p1 = $signed(x_V_4_fu_1036_p3);

assign sext_ln740_fu_909_p1 = tmp_V_1_reg_1429;

assign shl_ln1_fu_928_p3 = {{storemerge8_reg_395}, {16'd0}};

assign shl_ln740_1_fu_918_p2 = shl_ln740_fu_912_p2 << 32'd8;

assign shl_ln740_fu_912_p2 = sext_ln740_fu_909_p1 << zext_ln64_fu_906_p1;

assign shl_ln_fu_603_p3 = {{rhs_fu_166}, {8'd0}};

assign sub_ln1201_1_fu_790_p2 = (16'd0 - select_ln1201_fu_784_p3);

assign sub_ln1201_fu_769_p2 = (49'd0 - trunc_ln1201_reg_1406);

assign sub_ln712_2_fu_716_p2 = (16'd0 - x_V_fu_703_p2);

assign sub_ln712_fu_1030_p2 = (16'd0 - output_V_q0);

assign sum_V_1_fu_940_p2 = (zext_ln712_fu_936_p1 + sum_V_fu_186);

assign t_2_fu_738_p3 = {{select_ln7_reg_1395}, {8'd0}};

assign t_4_fu_975_p3 = {{resArray_V_q0}, {24'd0}};

assign tmp_1_cast_fu_774_p4 = {{sub_ln1201_fu_769_p2[47:32]}};

assign tmp_1_fu_1022_p3 = output_V_q0[32'd15];

assign tmp_2_fu_708_p3 = x_V_fu_703_p2[32'd15];

assign tmp_4_fu_854_p3 = reg_415[32'd15];

assign tmp_V_1_fu_838_p4 = {{ret_V_6_fu_832_p2[23:8]}};

assign tmp_fu_1121_p3 = output_V_q0[32'd15];

assign trunc_ln1201_fu_755_p1 = mul_ln1201_fu_749_p2[48:0];

assign trunc_ln1548_fu_1117_p1 = output_V_q0[14:0];

assign trunc_ln1_fu_532_p1 = grp_fu_1171_p3;

assign trunc_ln717_fu_993_p1 = grp_fu_987_p2[15:0];

assign trunc_ln91_fu_482_p1 = inNeurons_reg_373[13:0];

assign weights_address0 = zext_ln94_1_fu_502_p1;

assign whole_V_fu_812_p3 = {{p_Result_s_reg_1422}, {8'd0}};

assign x_V_4_fu_1036_p3 = ((tmp_1_fu_1022_p3[0:0] == 1'b1) ? sub_ln712_fu_1030_p2 : output_V_q0);

assign x_V_fu_703_p2 = ($signed(output_V_q0) - $signed(rhs_2_reg_1333));

assign zext_ln114_fu_1156_p1 = i_fu_182;

assign zext_ln1246_fu_593_p1 = reg_415;

assign zext_ln18_fu_1107_p1 = i_2_fu_178;

assign zext_ln20_fu_1137_p1 = select_ln18_fu_1129_p3;

assign zext_ln32_fu_1012_p1 = i_4_fu_174;

assign zext_ln46_fu_555_p1 = i_6_fu_170;

assign zext_ln56_fu_672_p1 = i_7_fu_190;

assign zext_ln64_fu_906_p1 = p_Result_s_reg_1422;

assign zext_ln67_fu_872_p1 = p_Result_s_reg_1422;

assign zext_ln712_fu_936_p1 = shl_ln1_fu_928_p3;

assign zext_ln717_fu_903_p1 = tmp_5_reg_1457;

assign zext_ln80_fu_965_p1 = i_9_fu_194;

assign zext_ln90_fu_477_p1 = outNeurons_fu_158;

assign zext_ln94_1_fu_502_p1 = add_ln94_fu_497_p2;

assign zext_ln94_fu_507_p1 = inNeurons_reg_373;

always @ (posedge ap_clk) begin
    rhs_2_reg_1333[7:0] <= 8'b00000000;
    sext_ln52_reg_1338[7:0] <= 8'b00000000;
    zext_ln56_reg_1365[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln80_reg_1475[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln32_reg_1498[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln18_reg_1531[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1544[63:16] <= 48'b000000000000000000000000000000000000000000000000;
end

endmodule //nnlayer
