-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nnlayer_nnlayer_Pipeline_VITIS_LOOP_47_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    numOfOutNeurons : IN STD_LOGIC_VECTOR (4 downto 0);
    sum_V_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_V_out_ap_vld : OUT STD_LOGIC;
    resArray_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    resArray_V_ce0 : OUT STD_LOGIC;
    resArray_V_we0 : OUT STD_LOGIC;
    resArray_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of nnlayer_nnlayer_Pipeline_VITIS_LOOP_47_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv50_1724288 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000001011100100100001010001000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv49_0 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv18_10000 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln47_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln47_reg_423 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_423_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal resArray_V_addr_reg_432 : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter18_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter19_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter20_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter21_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter22_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter23_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter24_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter25_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter26_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal resArray_V_addr_reg_432_pp0_iter27_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_180_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln9_fu_194_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln9_reg_441 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_446_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_452_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1201_fu_233_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal trunc_ln1201_reg_456 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_2_cast_reg_461 : STD_LOGIC_VECTOR (15 downto 0);
    signal fixed_fu_274_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal fixed_reg_467 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_reg_473 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_fu_303_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_V_fu_303_p2 : signal is "no";
    signal tmp_3_reg_489 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_489_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_395_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_storemerge8_phi_fu_134_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter3_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter4_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter5_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter6_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter7_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter8_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter9_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter10_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter11_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter12_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter13_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter14_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter15_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter16_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter17_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter18_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter19_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter20_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter21_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter22_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter23_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter24_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter25_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter26_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter27_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter28_storemerge8_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln50_fu_169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal sum_V_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_V_1_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_88 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_fu_163_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i_4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sub_ln712_fu_188_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_fu_216_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1201_fu_227_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1201_fu_227_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal sub_ln1201_fu_247_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_1_cast_fu_252_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1201_fu_262_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1201_1_fu_268_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_fu_290_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal newFirst_fu_297_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln55_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln55_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_312_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1201_fu_342_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_fu_338_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln1201_fu_345_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_401_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln_fu_372_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_395_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_401_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_401_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_condition_529 : BOOLEAN;
    signal ap_condition_433 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component nnlayer_mul_24s_26ns_50_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;


    component nnlayer_sdiv_18ns_16s_16_22_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_mul_mul_16s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_mul_mul_9ns_16s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component nnlayer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_24s_26ns_50_1_1_U12 : component nnlayer_mul_24s_26ns_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 26,
        dout_WIDTH => 50)
    port map (
        din0 => t_fu_216_p3,
        din1 => mul_ln1201_fu_227_p1,
        dout => mul_ln1201_fu_227_p2);

    sdiv_18ns_16s_16_22_1_U13 : component nnlayer_sdiv_18ns_16s_16_22_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv18_10000,
        din1 => tmp_V_fu_303_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_312_p2);

    mul_mul_16s_16s_16_4_1_U14 : component nnlayer_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_395_p0,
        din1 => tmp_V_fu_303_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_395_p2);

    mul_mul_9ns_16s_24_4_1_U15 : component nnlayer_mul_mul_9ns_16s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_401_p0,
        din1 => r_V_fu_338_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_401_p2);

    flow_control_loop_pipe_sequential_init_U : component nnlayer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter27_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_storemerge8_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_433)) then
                if ((ap_const_boolean_1 = ap_condition_529)) then 
                    ap_phi_reg_pp0_iter2_storemerge8_reg_130 <= ap_const_lv16_100;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_storemerge8_reg_130 <= ap_phi_reg_pp0_iter1_storemerge8_reg_130;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter8_storemerge8_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln1547_reg_452_pp0_iter6_reg = ap_const_lv1_1) and (icmp_ln47_reg_423_pp0_iter6_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter8_storemerge8_reg_130 <= grp_fu_395_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter8_storemerge8_reg_130 <= ap_phi_reg_pp0_iter7_storemerge8_reg_130;
                end if;
            end if; 
        end if;
    end process;

    i_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln47_fu_157_p2 = ap_const_lv1_0))) then 
                    i_fu_88 <= i_5_fu_163_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_88 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    sum_V_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    sum_V_fu_84 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter28 = ap_const_logic_1)) then 
                    sum_V_fu_84 <= sum_V_1_fu_380_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln1547_reg_452_pp0_iter10_reg <= icmp_ln1547_reg_452_pp0_iter9_reg;
                icmp_ln1547_reg_452_pp0_iter11_reg <= icmp_ln1547_reg_452_pp0_iter10_reg;
                icmp_ln1547_reg_452_pp0_iter12_reg <= icmp_ln1547_reg_452_pp0_iter11_reg;
                icmp_ln1547_reg_452_pp0_iter13_reg <= icmp_ln1547_reg_452_pp0_iter12_reg;
                icmp_ln1547_reg_452_pp0_iter14_reg <= icmp_ln1547_reg_452_pp0_iter13_reg;
                icmp_ln1547_reg_452_pp0_iter15_reg <= icmp_ln1547_reg_452_pp0_iter14_reg;
                icmp_ln1547_reg_452_pp0_iter16_reg <= icmp_ln1547_reg_452_pp0_iter15_reg;
                icmp_ln1547_reg_452_pp0_iter17_reg <= icmp_ln1547_reg_452_pp0_iter16_reg;
                icmp_ln1547_reg_452_pp0_iter18_reg <= icmp_ln1547_reg_452_pp0_iter17_reg;
                icmp_ln1547_reg_452_pp0_iter19_reg <= icmp_ln1547_reg_452_pp0_iter18_reg;
                icmp_ln1547_reg_452_pp0_iter20_reg <= icmp_ln1547_reg_452_pp0_iter19_reg;
                icmp_ln1547_reg_452_pp0_iter21_reg <= icmp_ln1547_reg_452_pp0_iter20_reg;
                icmp_ln1547_reg_452_pp0_iter22_reg <= icmp_ln1547_reg_452_pp0_iter21_reg;
                icmp_ln1547_reg_452_pp0_iter23_reg <= icmp_ln1547_reg_452_pp0_iter22_reg;
                icmp_ln1547_reg_452_pp0_iter24_reg <= icmp_ln1547_reg_452_pp0_iter23_reg;
                icmp_ln1547_reg_452_pp0_iter25_reg <= icmp_ln1547_reg_452_pp0_iter24_reg;
                icmp_ln1547_reg_452_pp0_iter26_reg <= icmp_ln1547_reg_452_pp0_iter25_reg;
                icmp_ln1547_reg_452_pp0_iter27_reg <= icmp_ln1547_reg_452_pp0_iter26_reg;
                icmp_ln1547_reg_452_pp0_iter2_reg <= icmp_ln1547_reg_452;
                icmp_ln1547_reg_452_pp0_iter3_reg <= icmp_ln1547_reg_452_pp0_iter2_reg;
                icmp_ln1547_reg_452_pp0_iter4_reg <= icmp_ln1547_reg_452_pp0_iter3_reg;
                icmp_ln1547_reg_452_pp0_iter5_reg <= icmp_ln1547_reg_452_pp0_iter4_reg;
                icmp_ln1547_reg_452_pp0_iter6_reg <= icmp_ln1547_reg_452_pp0_iter5_reg;
                icmp_ln1547_reg_452_pp0_iter7_reg <= icmp_ln1547_reg_452_pp0_iter6_reg;
                icmp_ln1547_reg_452_pp0_iter8_reg <= icmp_ln1547_reg_452_pp0_iter7_reg;
                icmp_ln1547_reg_452_pp0_iter9_reg <= icmp_ln1547_reg_452_pp0_iter8_reg;
                icmp_ln47_reg_423_pp0_iter10_reg <= icmp_ln47_reg_423_pp0_iter9_reg;
                icmp_ln47_reg_423_pp0_iter11_reg <= icmp_ln47_reg_423_pp0_iter10_reg;
                icmp_ln47_reg_423_pp0_iter12_reg <= icmp_ln47_reg_423_pp0_iter11_reg;
                icmp_ln47_reg_423_pp0_iter13_reg <= icmp_ln47_reg_423_pp0_iter12_reg;
                icmp_ln47_reg_423_pp0_iter14_reg <= icmp_ln47_reg_423_pp0_iter13_reg;
                icmp_ln47_reg_423_pp0_iter15_reg <= icmp_ln47_reg_423_pp0_iter14_reg;
                icmp_ln47_reg_423_pp0_iter16_reg <= icmp_ln47_reg_423_pp0_iter15_reg;
                icmp_ln47_reg_423_pp0_iter17_reg <= icmp_ln47_reg_423_pp0_iter16_reg;
                icmp_ln47_reg_423_pp0_iter18_reg <= icmp_ln47_reg_423_pp0_iter17_reg;
                icmp_ln47_reg_423_pp0_iter19_reg <= icmp_ln47_reg_423_pp0_iter18_reg;
                icmp_ln47_reg_423_pp0_iter20_reg <= icmp_ln47_reg_423_pp0_iter19_reg;
                icmp_ln47_reg_423_pp0_iter21_reg <= icmp_ln47_reg_423_pp0_iter20_reg;
                icmp_ln47_reg_423_pp0_iter22_reg <= icmp_ln47_reg_423_pp0_iter21_reg;
                icmp_ln47_reg_423_pp0_iter23_reg <= icmp_ln47_reg_423_pp0_iter22_reg;
                icmp_ln47_reg_423_pp0_iter24_reg <= icmp_ln47_reg_423_pp0_iter23_reg;
                icmp_ln47_reg_423_pp0_iter25_reg <= icmp_ln47_reg_423_pp0_iter24_reg;
                icmp_ln47_reg_423_pp0_iter26_reg <= icmp_ln47_reg_423_pp0_iter25_reg;
                icmp_ln47_reg_423_pp0_iter27_reg <= icmp_ln47_reg_423_pp0_iter26_reg;
                icmp_ln47_reg_423_pp0_iter2_reg <= icmp_ln47_reg_423_pp0_iter1_reg;
                icmp_ln47_reg_423_pp0_iter3_reg <= icmp_ln47_reg_423_pp0_iter2_reg;
                icmp_ln47_reg_423_pp0_iter4_reg <= icmp_ln47_reg_423_pp0_iter3_reg;
                icmp_ln47_reg_423_pp0_iter5_reg <= icmp_ln47_reg_423_pp0_iter4_reg;
                icmp_ln47_reg_423_pp0_iter6_reg <= icmp_ln47_reg_423_pp0_iter5_reg;
                icmp_ln47_reg_423_pp0_iter7_reg <= icmp_ln47_reg_423_pp0_iter6_reg;
                icmp_ln47_reg_423_pp0_iter8_reg <= icmp_ln47_reg_423_pp0_iter7_reg;
                icmp_ln47_reg_423_pp0_iter9_reg <= icmp_ln47_reg_423_pp0_iter8_reg;
                resArray_V_addr_reg_432_pp0_iter10_reg <= resArray_V_addr_reg_432_pp0_iter9_reg;
                resArray_V_addr_reg_432_pp0_iter11_reg <= resArray_V_addr_reg_432_pp0_iter10_reg;
                resArray_V_addr_reg_432_pp0_iter12_reg <= resArray_V_addr_reg_432_pp0_iter11_reg;
                resArray_V_addr_reg_432_pp0_iter13_reg <= resArray_V_addr_reg_432_pp0_iter12_reg;
                resArray_V_addr_reg_432_pp0_iter14_reg <= resArray_V_addr_reg_432_pp0_iter13_reg;
                resArray_V_addr_reg_432_pp0_iter15_reg <= resArray_V_addr_reg_432_pp0_iter14_reg;
                resArray_V_addr_reg_432_pp0_iter16_reg <= resArray_V_addr_reg_432_pp0_iter15_reg;
                resArray_V_addr_reg_432_pp0_iter17_reg <= resArray_V_addr_reg_432_pp0_iter16_reg;
                resArray_V_addr_reg_432_pp0_iter18_reg <= resArray_V_addr_reg_432_pp0_iter17_reg;
                resArray_V_addr_reg_432_pp0_iter19_reg <= resArray_V_addr_reg_432_pp0_iter18_reg;
                resArray_V_addr_reg_432_pp0_iter20_reg <= resArray_V_addr_reg_432_pp0_iter19_reg;
                resArray_V_addr_reg_432_pp0_iter21_reg <= resArray_V_addr_reg_432_pp0_iter20_reg;
                resArray_V_addr_reg_432_pp0_iter22_reg <= resArray_V_addr_reg_432_pp0_iter21_reg;
                resArray_V_addr_reg_432_pp0_iter23_reg <= resArray_V_addr_reg_432_pp0_iter22_reg;
                resArray_V_addr_reg_432_pp0_iter24_reg <= resArray_V_addr_reg_432_pp0_iter23_reg;
                resArray_V_addr_reg_432_pp0_iter25_reg <= resArray_V_addr_reg_432_pp0_iter24_reg;
                resArray_V_addr_reg_432_pp0_iter26_reg <= resArray_V_addr_reg_432_pp0_iter25_reg;
                resArray_V_addr_reg_432_pp0_iter27_reg <= resArray_V_addr_reg_432_pp0_iter26_reg;
                resArray_V_addr_reg_432_pp0_iter2_reg <= resArray_V_addr_reg_432_pp0_iter1_reg;
                resArray_V_addr_reg_432_pp0_iter3_reg <= resArray_V_addr_reg_432_pp0_iter2_reg;
                resArray_V_addr_reg_432_pp0_iter4_reg <= resArray_V_addr_reg_432_pp0_iter3_reg;
                resArray_V_addr_reg_432_pp0_iter5_reg <= resArray_V_addr_reg_432_pp0_iter4_reg;
                resArray_V_addr_reg_432_pp0_iter6_reg <= resArray_V_addr_reg_432_pp0_iter5_reg;
                resArray_V_addr_reg_432_pp0_iter7_reg <= resArray_V_addr_reg_432_pp0_iter6_reg;
                resArray_V_addr_reg_432_pp0_iter8_reg <= resArray_V_addr_reg_432_pp0_iter7_reg;
                resArray_V_addr_reg_432_pp0_iter9_reg <= resArray_V_addr_reg_432_pp0_iter8_reg;
                tmp_1_reg_446_pp0_iter2_reg <= tmp_1_reg_446;
                tmp_3_reg_489_pp0_iter10_reg <= tmp_3_reg_489_pp0_iter9_reg;
                tmp_3_reg_489_pp0_iter11_reg <= tmp_3_reg_489_pp0_iter10_reg;
                tmp_3_reg_489_pp0_iter12_reg <= tmp_3_reg_489_pp0_iter11_reg;
                tmp_3_reg_489_pp0_iter13_reg <= tmp_3_reg_489_pp0_iter12_reg;
                tmp_3_reg_489_pp0_iter14_reg <= tmp_3_reg_489_pp0_iter13_reg;
                tmp_3_reg_489_pp0_iter15_reg <= tmp_3_reg_489_pp0_iter14_reg;
                tmp_3_reg_489_pp0_iter16_reg <= tmp_3_reg_489_pp0_iter15_reg;
                tmp_3_reg_489_pp0_iter17_reg <= tmp_3_reg_489_pp0_iter16_reg;
                tmp_3_reg_489_pp0_iter18_reg <= tmp_3_reg_489_pp0_iter17_reg;
                tmp_3_reg_489_pp0_iter19_reg <= tmp_3_reg_489_pp0_iter18_reg;
                tmp_3_reg_489_pp0_iter20_reg <= tmp_3_reg_489_pp0_iter19_reg;
                tmp_3_reg_489_pp0_iter21_reg <= tmp_3_reg_489_pp0_iter20_reg;
                tmp_3_reg_489_pp0_iter22_reg <= tmp_3_reg_489_pp0_iter21_reg;
                tmp_3_reg_489_pp0_iter23_reg <= tmp_3_reg_489_pp0_iter22_reg;
                tmp_3_reg_489_pp0_iter24_reg <= tmp_3_reg_489_pp0_iter23_reg;
                tmp_3_reg_489_pp0_iter5_reg <= tmp_3_reg_489;
                tmp_3_reg_489_pp0_iter6_reg <= tmp_3_reg_489_pp0_iter5_reg;
                tmp_3_reg_489_pp0_iter7_reg <= tmp_3_reg_489_pp0_iter6_reg;
                tmp_3_reg_489_pp0_iter8_reg <= tmp_3_reg_489_pp0_iter7_reg;
                tmp_3_reg_489_pp0_iter9_reg <= tmp_3_reg_489_pp0_iter8_reg;
                tmp_reg_437_pp0_iter10_reg <= tmp_reg_437_pp0_iter9_reg;
                tmp_reg_437_pp0_iter11_reg <= tmp_reg_437_pp0_iter10_reg;
                tmp_reg_437_pp0_iter12_reg <= tmp_reg_437_pp0_iter11_reg;
                tmp_reg_437_pp0_iter13_reg <= tmp_reg_437_pp0_iter12_reg;
                tmp_reg_437_pp0_iter14_reg <= tmp_reg_437_pp0_iter13_reg;
                tmp_reg_437_pp0_iter15_reg <= tmp_reg_437_pp0_iter14_reg;
                tmp_reg_437_pp0_iter16_reg <= tmp_reg_437_pp0_iter15_reg;
                tmp_reg_437_pp0_iter17_reg <= tmp_reg_437_pp0_iter16_reg;
                tmp_reg_437_pp0_iter18_reg <= tmp_reg_437_pp0_iter17_reg;
                tmp_reg_437_pp0_iter19_reg <= tmp_reg_437_pp0_iter18_reg;
                tmp_reg_437_pp0_iter20_reg <= tmp_reg_437_pp0_iter19_reg;
                tmp_reg_437_pp0_iter21_reg <= tmp_reg_437_pp0_iter20_reg;
                tmp_reg_437_pp0_iter22_reg <= tmp_reg_437_pp0_iter21_reg;
                tmp_reg_437_pp0_iter23_reg <= tmp_reg_437_pp0_iter22_reg;
                tmp_reg_437_pp0_iter24_reg <= tmp_reg_437_pp0_iter23_reg;
                tmp_reg_437_pp0_iter25_reg <= tmp_reg_437_pp0_iter24_reg;
                tmp_reg_437_pp0_iter26_reg <= tmp_reg_437_pp0_iter25_reg;
                tmp_reg_437_pp0_iter27_reg <= tmp_reg_437_pp0_iter26_reg;
                tmp_reg_437_pp0_iter2_reg <= tmp_reg_437;
                tmp_reg_437_pp0_iter3_reg <= tmp_reg_437_pp0_iter2_reg;
                tmp_reg_437_pp0_iter4_reg <= tmp_reg_437_pp0_iter3_reg;
                tmp_reg_437_pp0_iter5_reg <= tmp_reg_437_pp0_iter4_reg;
                tmp_reg_437_pp0_iter6_reg <= tmp_reg_437_pp0_iter5_reg;
                tmp_reg_437_pp0_iter7_reg <= tmp_reg_437_pp0_iter6_reg;
                tmp_reg_437_pp0_iter8_reg <= tmp_reg_437_pp0_iter7_reg;
                tmp_reg_437_pp0_iter9_reg <= tmp_reg_437_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln47_reg_423 <= icmp_ln47_fu_157_p2;
                icmp_ln47_reg_423_pp0_iter1_reg <= icmp_ln47_reg_423;
                resArray_V_addr_reg_432_pp0_iter1_reg <= resArray_V_addr_reg_432;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_storemerge8_reg_130 <= ap_phi_reg_pp0_iter9_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter11_storemerge8_reg_130 <= ap_phi_reg_pp0_iter10_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter12_storemerge8_reg_130 <= ap_phi_reg_pp0_iter11_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter13_storemerge8_reg_130 <= ap_phi_reg_pp0_iter12_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter14_storemerge8_reg_130 <= ap_phi_reg_pp0_iter13_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter15_storemerge8_reg_130 <= ap_phi_reg_pp0_iter14_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter16_storemerge8_reg_130 <= ap_phi_reg_pp0_iter15_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter17_storemerge8_reg_130 <= ap_phi_reg_pp0_iter16_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter18_storemerge8_reg_130 <= ap_phi_reg_pp0_iter17_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter19_storemerge8_reg_130 <= ap_phi_reg_pp0_iter18_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_storemerge8_reg_130 <= ap_phi_reg_pp0_iter0_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter20_storemerge8_reg_130 <= ap_phi_reg_pp0_iter19_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter21_storemerge8_reg_130 <= ap_phi_reg_pp0_iter20_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter22_storemerge8_reg_130 <= ap_phi_reg_pp0_iter21_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter23_storemerge8_reg_130 <= ap_phi_reg_pp0_iter22_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter24_storemerge8_reg_130 <= ap_phi_reg_pp0_iter23_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter25_storemerge8_reg_130 <= ap_phi_reg_pp0_iter24_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter26_storemerge8_reg_130 <= ap_phi_reg_pp0_iter25_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter27_storemerge8_reg_130 <= ap_phi_reg_pp0_iter26_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter28_storemerge8_reg_130 <= ap_phi_reg_pp0_iter27_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_storemerge8_reg_130 <= ap_phi_reg_pp0_iter2_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_storemerge8_reg_130 <= ap_phi_reg_pp0_iter3_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_storemerge8_reg_130 <= ap_phi_reg_pp0_iter4_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_storemerge8_reg_130 <= ap_phi_reg_pp0_iter5_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_storemerge8_reg_130 <= ap_phi_reg_pp0_iter6_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_storemerge8_reg_130 <= ap_phi_reg_pp0_iter8_storemerge8_reg_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_reg_423_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                fixed_reg_467 <= fixed_fu_274_p3;
                p_Result_s_reg_473 <= fixed_fu_274_p3(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_reg_423 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1547_reg_452 <= icmp_ln1547_fu_210_p2;
                select_ln9_reg_441 <= select_ln9_fu_194_p3;
                tmp_1_reg_446 <= select_ln9_fu_194_p3(15 downto 15);
                tmp_reg_437 <= output_V_q0(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln47_fu_157_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                resArray_V_addr_reg_432 <= zext_ln50_fu_169_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_reg_423_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_2_cast_reg_461 <= mul_ln1201_fu_227_p2(47 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1547_reg_452_pp0_iter3_reg = ap_const_lv1_0) and (tmp_reg_437_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln47_reg_423_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_3_reg_489 <= fixed_reg_467(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_reg_446 = ap_const_lv1_1) and (icmp_ln47_reg_423_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln1201_reg_456 <= trunc_ln1201_fu_233_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_433_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_433 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_529_assign_proc : process(icmp_ln47_reg_423, tmp_fu_180_p3, icmp_ln1547_fu_210_p2)
    begin
                ap_condition_529 <= ((icmp_ln1547_fu_210_p2 = ap_const_lv1_0) and (tmp_fu_180_p3 = ap_const_lv1_0) and (icmp_ln47_reg_423 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln47_fu_157_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln47_fu_157_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter27_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter27_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_storemerge8_phi_fu_134_p6_assign_proc : process(icmp_ln47_reg_423_pp0_iter27_reg, tmp_reg_437_pp0_iter27_reg, icmp_ln1547_reg_452_pp0_iter27_reg, ap_phi_reg_pp0_iter28_storemerge8_reg_130, grp_fu_401_p2)
    begin
        if (((icmp_ln1547_reg_452_pp0_iter27_reg = ap_const_lv1_0) and (tmp_reg_437_pp0_iter27_reg = ap_const_lv1_1) and (icmp_ln47_reg_423_pp0_iter27_reg = ap_const_lv1_0))) then 
            ap_phi_mux_storemerge8_phi_fu_134_p6 <= grp_fu_401_p2(23 downto 8);
        else 
            ap_phi_mux_storemerge8_phi_fu_134_p6 <= ap_phi_reg_pp0_iter28_storemerge8_reg_130;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge8_reg_130 <= "XXXXXXXXXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_88)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_4 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_4 <= i_fu_88;
        end if; 
    end process;

    fixed_fu_274_p3 <= 
        sub_ln1201_1_fu_268_p2 when (tmp_1_reg_446_pp0_iter2_reg(0) = '1') else 
        tmp_2_cast_reg_461;
    grp_fu_395_p0 <= shl_ln55_fu_328_p2(16 - 1 downto 0);
    grp_fu_401_p0 <= grp_fu_401_p00(9 - 1 downto 0);
    grp_fu_401_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1201_fu_345_p2),24));
    i_5_fu_163_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_4) + unsigned(ap_const_lv5_1));
    icmp_ln1547_fu_210_p2 <= "1" when (signed(output_V_q0) > signed(ap_const_lv16_0)) else "0";
    icmp_ln47_fu_157_p2 <= "1" when (ap_sig_allocacmp_i_4 = numOfOutNeurons) else "0";
    lshr_ln1201_fu_345_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv9_100),to_integer(unsigned('0' & zext_ln1201_fu_342_p1(9-1 downto 0)))));
    mul_ln1201_fu_227_p1 <= ap_const_lv50_1724288(26 - 1 downto 0);
    newFirst_fu_297_p2 <= std_logic_vector(unsigned(ap_const_lv16_100) - unsigned(p_Val2_1_fu_290_p3));
    output_V_address0 <= zext_ln50_fu_169_p1(4 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_1_fu_290_p3 <= (p_Result_s_reg_473 & ap_const_lv8_0);
    r_V_fu_338_p1 <= grp_fu_312_p2(16 - 1 downto 0);
    resArray_V_address0 <= resArray_V_addr_reg_432_pp0_iter27_reg;

    resArray_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter28, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            resArray_V_ce0 <= ap_const_logic_1;
        else 
            resArray_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    resArray_V_d0 <= ap_phi_mux_storemerge8_phi_fu_134_p6;

    resArray_V_we0_assign_proc : process(ap_enable_reg_pp0_iter28, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            resArray_V_we0 <= ap_const_logic_1;
        else 
            resArray_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1201_fu_262_p3 <= 
        tmp_1_cast_fu_252_p4 when (tmp_1_reg_446_pp0_iter2_reg(0) = '1') else 
        tmp_2_cast_reg_461;
    select_ln9_fu_194_p3 <= 
        sub_ln712_fu_188_p2 when (tmp_fu_180_p3(0) = '1') else 
        output_V_q0;
    shl_ln55_fu_328_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & zext_ln55_fu_325_p1(31-1 downto 0)))));
    shl_ln_fu_372_p3 <= (ap_phi_mux_storemerge8_phi_fu_134_p6 & ap_const_lv16_0);
    sub_ln1201_1_fu_268_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(select_ln1201_fu_262_p3));
    sub_ln1201_fu_247_p2 <= std_logic_vector(unsigned(ap_const_lv49_0) - unsigned(trunc_ln1201_reg_456));
    sub_ln712_fu_188_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(output_V_q0));
    sum_V_1_fu_380_p2 <= std_logic_vector(unsigned(shl_ln_fu_372_p3) + unsigned(sum_V_fu_84));
    sum_V_out <= sum_V_fu_84;

    sum_V_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln47_reg_423_pp0_iter26_reg)
    begin
        if (((icmp_ln47_reg_423_pp0_iter26_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            sum_V_out_ap_vld <= ap_const_logic_1;
        else 
            sum_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    t_fu_216_p3 <= (select_ln9_reg_441 & ap_const_lv8_0);
    tmp_1_cast_fu_252_p4 <= sub_ln1201_fu_247_p2(47 downto 32);
    tmp_V_fu_303_p2 <= std_logic_vector(unsigned(fixed_reg_467) + unsigned(newFirst_fu_297_p2));
    tmp_fu_180_p3 <= output_V_q0(15 downto 15);
    trunc_ln1201_fu_233_p1 <= mul_ln1201_fu_227_p2(49 - 1 downto 0);
    zext_ln1201_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_489_pp0_iter24_reg),9));
    zext_ln50_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_4),64));
    zext_ln55_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_reg_473),32));
end behav;
