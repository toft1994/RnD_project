-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nnlayer_OneDSP is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 16;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_local_block : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of nnlayer_OneDSP is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nnlayer_OneDSP_nnlayer_OneDSP,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=21,HLS_SYN_DSP=0,HLS_SYN_FF=3884,HLS_SYN_LUT=4417,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (112 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (112 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (112 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (112 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (112 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (112 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (112 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (112 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (112 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (112 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (112 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_10000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv56_0 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv16_F500 : STD_LOGIC_VECTOR (15 downto 0) := "1111010100000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv17_1F500 : STD_LOGIC_VECTOR (16 downto 0) := "11111010100000000";
    constant ap_const_lv50_1724288 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000001011100100100001010001000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv49_0 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000000";
    constant ap_const_lv24_10000 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv26_1000000 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal ap_local_deadlock : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_r_ce0 : STD_LOGIC;
    signal output_r_we0 : STD_LOGIC;
    signal output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal numOfInNeurons : STD_LOGIC_VECTOR (15 downto 0);
    signal numOfOutputNeurons : STD_LOGIC_VECTOR (15 downto 0);
    signal activation : STD_LOGIC_VECTOR (7 downto 0);
    signal output_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_ce0 : STD_LOGIC;
    signal output_V_we0 : STD_LOGIC;
    signal output_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_338 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal activation_read_reg_772 : STD_LOGIC_VECTOR (7 downto 0);
    signal numOfOutputNeurons_read_reg_776 : STD_LOGIC_VECTOR (15 downto 0);
    signal numOfInNeurons_read_reg_783 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_343_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_790 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln87_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_810 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_36_fu_358_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_36_reg_821 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal cmp4_i19881_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp4_i19881_reg_826 : STD_LOGIC_VECTOR (0 downto 0);
    signal outNeurons_2_fu_378_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal outNeurons_2_reg_833 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln94_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_reg_843 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_767_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_i_reg_848 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal rhs_fu_404_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_reg_853 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal sext_ln52_fu_412_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln52_reg_858 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_12_fu_438_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_12_reg_880 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln56_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_reg_885 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln52_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_1_reg_890 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln1547_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_reg_895 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_reg_906 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal resArray_V_addr_1_reg_910 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal select_ln7_fu_494_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln7_reg_915 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_920 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1201_fu_527_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal trunc_ln1201_reg_926 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_2_cast_reg_931 : STD_LOGIC_VECTOR (15 downto 0);
    signal fixed_V_fu_568_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal fixed_V_reg_937 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal p_Result_s_reg_942 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_610_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_1_reg_949 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln1547_2_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_2_reg_954 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_626_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_958 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_638_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_reg_967 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal lshr_ln1201_fu_647_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1201_reg_972 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_977 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal zext_ln717_fu_675_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal shl_ln740_1_fu_690_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln80_fu_738_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln80_reg_995 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal icmp_ln77_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal resArray_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal resArray_V_ce0 : STD_LOGIC;
    signal resArray_V_we0 : STD_LOGIC;
    signal resArray_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal resArray_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_start : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_done : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_idle : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_ready : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_bias_ce0 : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_output_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_output_V_ce0 : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_output_V_we0 : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_output_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_start : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_done : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_idle : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_ready : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_overflow_4_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_overflow_4_out_ap_vld : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_output_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_output_V_ce0 : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_ap_start : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_ap_done : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_ap_idle : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_ap_ready : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_r_ce0 : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_r_we0 : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_V_ce0 : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_ap_start : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_ap_done : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_ap_idle : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_ap_ready : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_r_ce0 : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_r_we0 : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_V_ce0 : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_ap_start : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_ap_done : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_ap_idle : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_ap_ready : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_r_ce0 : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_r_we0 : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_V_ce0 : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_start : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_done : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_idle : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_ready : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_weights_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_weights_ce0 : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_input_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_input_r_ce0 : STD_LOGIC;
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_lhs_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_lhs_out_ap_vld : STD_LOGIC;
    signal storemerge8_reg_263 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_start_reg : STD_LOGIC := '0';
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_ap_start_reg : STD_LOGIC := '0';
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_ap_start_reg : STD_LOGIC := '0';
    signal grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal idxprom10_i_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal outNeurons_fu_168 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_V_fu_172 : STD_LOGIC_VECTOR (55 downto 0);
    signal sum_V_1_fu_712_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal i_fu_176 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_9_fu_180 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_11_fu_732_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal trunc_ln717_fu_762_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln94_fu_369_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln52_fu_429_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln712_fu_460_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln712_fu_460_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_464_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_V_fu_475_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_480_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln712_fu_488_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_fu_510_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1201_fu_521_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1201_fu_521_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal sub_ln1201_fu_541_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_1_cast_fu_546_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1201_fu_556_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1201_1_fu_562_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal whole_V_fu_584_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_4_fu_591_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_2_fu_596_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_3_fu_604_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_638_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln67_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_2_fu_659_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_2_fu_659_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_2_fu_659_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal sext_ln740_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln64_fu_678_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln740_fu_684_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1_fu_700_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln712_fu_708_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_756_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_756_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_767_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_638_ap_start : STD_LOGIC;
    signal grp_fu_638_ap_done : STD_LOGIC;
    signal grp_fu_756_ap_start : STD_LOGIC;
    signal grp_fu_756_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (112 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ST_fsm_state110_blk : STD_LOGIC;
    signal ap_ST_fsm_state111_blk : STD_LOGIC;
    signal ap_ST_fsm_state112_blk : STD_LOGIC;
    signal ap_predicate_op389_call_state113 : BOOLEAN;
    signal ap_block_state113_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state113_blk : STD_LOGIC;
    signal grp_fu_767_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_2_fu_659_p00 : STD_LOGIC_VECTOR (41 downto 0);
    signal r_V_2_fu_659_p10 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component nnlayer_OneDSP_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        numOfOutputNeurons : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_OneDSP_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        numOfOutputNeurons : IN STD_LOGIC_VECTOR (7 downto 0);
        overflow_4_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        overflow_4_out_ap_vld : OUT STD_LOGIC;
        output_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_OneDSP_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        numOfOutputNeurons : IN STD_LOGIC_VECTOR (7 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_OneDSP_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        numOfOutputNeurons : IN STD_LOGIC_VECTOR (7 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_OneDSP_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        numOfOutputNeurons : IN STD_LOGIC_VECTOR (7 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_OneDSP_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_load : IN STD_LOGIC_VECTOR (15 downto 0);
        numOfInNeurons : IN STD_LOGIC_VECTOR (15 downto 0);
        mul_i : IN STD_LOGIC_VECTOR (13 downto 0);
        weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        weights_ce0 : OUT STD_LOGIC;
        weights_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        lhs_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        lhs_out_ap_vld : OUT STD_LOGIC );
    end component;


    component nnlayer_OneDSP_mul_24s_26ns_50_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;


    component nnlayer_OneDSP_udiv_26ns_26s_26_30_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (25 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component nnlayer_OneDSP_mul_32ns_26ns_42_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component nnlayer_OneDSP_udiv_56ns_56ns_16_60_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (55 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_OneDSP_mul_mul_8ns_14s_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component nnlayer_OneDSP_output_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nnlayer_OneDSP_resArray_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nnlayer_OneDSP_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        numOfInNeurons : OUT STD_LOGIC_VECTOR (15 downto 0);
        numOfOutputNeurons : OUT STD_LOGIC_VECTOR (15 downto 0);
        activation : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_r_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        input_r_ce0 : IN STD_LOGIC;
        input_r_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        output_r_ce0 : IN STD_LOGIC;
        output_r_we0 : IN STD_LOGIC;
        output_r_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        bias_ce0 : IN STD_LOGIC;
        bias_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        weights_address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        weights_ce0 : IN STD_LOGIC;
        weights_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_local_deadlock : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    output_V_U : component nnlayer_OneDSP_output_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_V_address0,
        ce0 => output_V_ce0,
        we0 => output_V_we0,
        d0 => output_V_d0,
        q0 => output_V_q0);

    resArray_V_U : component nnlayer_OneDSP_resArray_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => resArray_V_address0,
        ce0 => resArray_V_ce0,
        we0 => resArray_V_we0,
        d0 => resArray_V_d0,
        q0 => resArray_V_q0);

    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277 : component nnlayer_OneDSP_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_start,
        ap_done => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_done,
        ap_idle => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_idle,
        ap_ready => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_ready,
        numOfOutputNeurons => numOfOutputNeurons_read_reg_776,
        bias_address0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_bias_address0,
        bias_ce0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_bias_ce0,
        bias_q0 => bias_q0,
        output_V_address0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_output_V_address0,
        output_V_ce0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_output_V_ce0,
        output_V_we0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_output_V_we0,
        output_V_d0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_output_V_d0);

    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287 : component nnlayer_OneDSP_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_start,
        ap_done => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_done,
        ap_idle => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_idle,
        ap_ready => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_ready,
        numOfOutputNeurons => empty_reg_790,
        overflow_4_out => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_overflow_4_out,
        overflow_4_out_ap_vld => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_overflow_4_out_ap_vld,
        output_V_address0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_output_V_address0,
        output_V_ce0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_output_V_ce0,
        output_V_q0 => output_V_q0);

    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295 : component nnlayer_OneDSP_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_ap_start,
        ap_done => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_ap_done,
        ap_idle => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_ap_idle,
        ap_ready => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_ap_ready,
        numOfOutputNeurons => empty_reg_790,
        output_r_address0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_r_address0,
        output_r_ce0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_r_ce0,
        output_r_we0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_r_we0,
        output_r_d0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_r_d0,
        output_V_address0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_V_address0,
        output_V_ce0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_V_ce0,
        output_V_q0 => output_V_q0);

    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304 : component nnlayer_OneDSP_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_ap_start,
        ap_done => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_ap_done,
        ap_idle => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_ap_idle,
        ap_ready => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_ap_ready,
        numOfOutputNeurons => empty_reg_790,
        output_r_address0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_r_address0,
        output_r_ce0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_r_ce0,
        output_r_we0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_r_we0,
        output_r_d0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_r_d0,
        output_V_address0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_V_address0,
        output_V_ce0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_V_ce0,
        output_V_q0 => output_V_q0);

    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313 : component nnlayer_OneDSP_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_ap_start,
        ap_done => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_ap_done,
        ap_idle => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_ap_idle,
        ap_ready => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_ap_ready,
        numOfOutputNeurons => empty_reg_790,
        output_r_address0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_r_address0,
        output_r_ce0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_r_ce0,
        output_r_we0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_r_we0,
        output_r_d0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_r_d0,
        output_V_address0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_V_address0,
        output_V_ce0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_V_ce0,
        output_V_q0 => output_V_q0);

    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322 : component nnlayer_OneDSP_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_start,
        ap_done => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_done,
        ap_idle => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_idle,
        ap_ready => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_ready,
        output_V_load => reg_338,
        numOfInNeurons => numOfInNeurons_read_reg_783,
        mul_i => mul_i_reg_848,
        weights_address0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_weights_address0,
        weights_ce0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_weights_ce0,
        weights_q0 => weights_q0,
        input_r_address0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_input_r_address0,
        input_r_ce0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_input_r_ce0,
        input_r_q0 => input_r_q0,
        lhs_out => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_lhs_out,
        lhs_out_ap_vld => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_lhs_out_ap_vld);

    control_s_axi_U : component nnlayer_OneDSP_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        numOfInNeurons => numOfInNeurons,
        numOfOutputNeurons => numOfOutputNeurons,
        activation => activation,
        input_r_address0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_input_r_address0,
        input_r_ce0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_input_r_ce0,
        input_r_q0 => input_r_q0,
        output_r_address0 => output_r_address0,
        output_r_ce0 => output_r_ce0,
        output_r_we0 => output_r_we0,
        output_r_d0 => output_r_d0,
        bias_address0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_bias_address0,
        bias_ce0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_bias_ce0,
        bias_q0 => bias_q0,
        weights_address0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_weights_address0,
        weights_ce0 => grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_weights_ce0,
        weights_q0 => weights_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_local_deadlock => ap_local_deadlock);

    mul_24s_26ns_50_1_1_U26 : component nnlayer_OneDSP_mul_24s_26ns_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 26,
        dout_WIDTH => 50)
    port map (
        din0 => t_fu_510_p3,
        din1 => mul_ln1201_fu_521_p1,
        dout => mul_ln1201_fu_521_p2);

    udiv_26ns_26s_26_30_seq_1_U27 : component nnlayer_OneDSP_udiv_26ns_26s_26_30_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 26,
        din1_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_638_ap_start,
        done => grp_fu_638_ap_done,
        din0 => ap_const_lv26_1000000,
        din1 => grp_fu_638_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_638_p2);

    mul_32ns_26ns_42_1_1_U28 : component nnlayer_OneDSP_mul_32ns_26ns_42_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 26,
        dout_WIDTH => 42)
    port map (
        din0 => r_V_2_fu_659_p0,
        din1 => r_V_2_fu_659_p1,
        dout => r_V_2_fu_659_p2);

    udiv_56ns_56ns_16_60_seq_1_U29 : component nnlayer_OneDSP_udiv_56ns_56ns_16_60_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 60,
        din0_WIDTH => 56,
        din1_WIDTH => 56,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_756_ap_start,
        done => grp_fu_756_ap_done,
        din0 => grp_fu_756_p0,
        din1 => sum_V_fu_172,
        ce => ap_const_logic_1,
        dout => grp_fu_756_p2);

    mul_mul_8ns_14s_14_4_1_U30 : component nnlayer_OneDSP_mul_mul_8ns_14s_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_767_p0,
        din1 => empty_36_reg_821,
        ce => ap_const_logic_1,
        dout => grp_fu_767_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((not((ap_const_lv8_1 = activation_read_reg_772)) and not((ap_const_lv8_2 = activation_read_reg_772)) and not((ap_const_lv8_3 = activation_read_reg_772)) and (icmp_ln87_reg_810 = ap_const_lv1_0)) or (not((ap_const_lv8_1 = activation_read_reg_772)) and not((ap_const_lv8_2 = activation_read_reg_772)) and not((ap_const_lv8_3 = activation_read_reg_772)) and (icmp_ln94_fu_373_p2 = ap_const_lv1_1))))) then 
                    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_ap_ready = ap_const_logic_1)) then 
                    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((ap_const_lv8_1 = activation_read_reg_772) and (icmp_ln87_reg_810 = ap_const_lv1_0)) or ((ap_const_lv8_1 = activation_read_reg_772) and (icmp_ln94_fu_373_p2 = ap_const_lv1_1))))) then 
                    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_ap_ready = ap_const_logic_1)) then 
                    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((ap_const_lv8_2 = activation_read_reg_772) and (icmp_ln87_reg_810 = ap_const_lv1_0)) or ((ap_const_lv8_2 = activation_read_reg_772) and (icmp_ln94_fu_373_p2 = ap_const_lv1_1))))) then 
                    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_ap_ready = ap_const_logic_1)) then 
                    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((ap_const_lv8_3 = activation_read_reg_772) and (icmp_ln87_reg_810 = ap_const_lv1_0)) or ((ap_const_lv8_3 = activation_read_reg_772) and (icmp_ln94_fu_373_p2 = ap_const_lv1_1))))) then 
                    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_ready = ap_const_logic_1)) then 
                    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln87_fu_347_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1))) then 
                    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_ready = ap_const_logic_1)) then 
                    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_ready = ap_const_logic_1)) then 
                    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    i_9_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln1547_fu_449_p2 = ap_const_lv1_0) and (icmp_ln52_fu_433_p2 = ap_const_lv1_1))) then 
                i_9_fu_180 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state52) and (icmp_ln77_fu_726_p2 = ap_const_lv1_0) and (ap_const_lv8_3 = activation_read_reg_772) and (icmp_ln1547_reg_895 = ap_const_lv1_0) and (icmp_ln87_reg_810 = ap_const_lv1_1))) then 
                i_9_fu_180 <= i_11_fu_732_p2;
            end if; 
        end if;
    end process;

    i_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln87_reg_810 = ap_const_lv1_1))) then 
                i_fu_176 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                i_fu_176 <= i_12_reg_880;
            end if; 
        end if;
    end process;

    outNeurons_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln87_fu_347_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1))) then 
                outNeurons_fu_168 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                outNeurons_fu_168 <= outNeurons_2_reg_833;
            end if; 
        end if;
    end process;

    storemerge8_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_2_fu_626_p3 = ap_const_lv1_0) and (icmp_ln1547_2_fu_620_p2 = ap_const_lv1_0))) then 
                storemerge8_reg_263 <= ap_const_lv32_10000;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state50) and (tmp_2_reg_958 = ap_const_lv1_1) and (icmp_ln1547_2_reg_954 = ap_const_lv1_0))) then 
                storemerge8_reg_263 <= zext_ln717_fu_675_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state50) and (icmp_ln1547_2_reg_954 = ap_const_lv1_1))) then 
                storemerge8_reg_263 <= shl_ln740_1_fu_690_p2;
            end if; 
        end if;
    end process;

    sum_V_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln87_reg_810 = ap_const_lv1_1))) then 
                sum_V_fu_172 <= ap_const_lv56_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                sum_V_fu_172 <= sum_V_1_fu_712_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                activation_read_reg_772 <= activation;
                empty_reg_790 <= empty_fu_343_p1;
                icmp_ln87_reg_810 <= icmp_ln87_fu_347_p2;
                numOfInNeurons_read_reg_783 <= numOfInNeurons;
                numOfOutputNeurons_read_reg_776 <= numOfOutputNeurons;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                cmp4_i19881_reg_826 <= cmp4_i19881_fu_361_p2;
                empty_36_reg_821 <= empty_36_fu_358_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                fixed_V_reg_937 <= fixed_V_fu_568_p3;
                p_Result_s_reg_942 <= fixed_V_fu_568_p3(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_12_reg_880 <= i_12_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                icmp_ln1547_2_reg_954 <= icmp_ln1547_2_fu_620_p2;
                tmp_V_1_reg_949 <= ret_V_3_fu_604_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln52_fu_433_p2 = ap_const_lv1_1))) then
                icmp_ln1547_reg_895 <= icmp_ln1547_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                icmp_ln1548_reg_906 <= icmp_ln1548_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                lshr_ln1201_reg_972 <= lshr_ln1201_fu_647_p2;
                r_V_reg_967 <= grp_fu_638_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_i_reg_848 <= grp_fu_767_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln87_reg_810 = ap_const_lv1_1))) then
                outNeurons_2_reg_833 <= outNeurons_2_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln52_fu_433_p2 = ap_const_lv1_0))) then
                output_V_addr_1_reg_890 <= zext_ln56_fu_444_p1(7 - 1 downto 0);
                    zext_ln56_reg_885(7 downto 0) <= zext_ln56_fu_444_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln94_fu_373_p2 = ap_const_lv1_0) and (icmp_ln87_reg_810 = ap_const_lv1_1))) then
                output_V_addr_reg_843 <= idxprom10_i_fu_388_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_338 <= output_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                resArray_V_addr_1_reg_910 <= zext_ln56_reg_885(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    rhs_reg_853(15 downto 8) <= rhs_fu_404_p3(15 downto 8);
                    sext_ln52_reg_858(16 downto 8) <= sext_ln52_fu_412_p1(16 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                select_ln7_reg_915 <= select_ln7_fu_494_p3;
                tmp_1_reg_920 <= select_ln7_fu_494_p3(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_2_cast_reg_931 <= mul_ln1201_fu_521_p2(47 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln1547_2_fu_620_p2 = ap_const_lv1_0))) then
                tmp_2_reg_958 <= reg_338(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                tmp_5_reg_977 <= r_V_2_fu_659_p2(41 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_reg_920 = ap_const_lv1_1))) then
                trunc_ln1201_reg_926 <= trunc_ln1201_fu_527_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state52) and (icmp_ln77_fu_726_p2 = ap_const_lv1_0) and (ap_const_lv8_3 = activation_read_reg_772) and (icmp_ln1547_reg_895 = ap_const_lv1_0) and (icmp_ln87_reg_810 = ap_const_lv1_1))) then
                    zext_ln80_reg_995(7 downto 0) <= zext_ln80_fu_738_p1(7 downto 0);
            end if;
        end if;
    end process;
    rhs_reg_853(7 downto 0) <= "00000000";
    sext_ln52_reg_858(7 downto 0) <= "00000000";
    zext_ln56_reg_885(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln80_reg_995(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, activation_read_reg_772, icmp_ln87_fu_347_p2, icmp_ln87_reg_810, ap_CS_fsm_state2, cmp4_i19881_reg_826, ap_CS_fsm_state3, icmp_ln94_fu_373_p2, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state12, icmp_ln52_fu_433_p2, icmp_ln1547_reg_895, ap_CS_fsm_state19, icmp_ln1547_2_fu_620_p2, tmp_2_fu_626_p3, ap_CS_fsm_state52, icmp_ln77_fu_726_p2, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_done, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_done, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state113, ap_CS_fsm_state8, ap_block_state113_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln87_fu_347_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln87_fu_347_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((not((ap_const_lv8_3 = activation_read_reg_772)) and (icmp_ln87_reg_810 = ap_const_lv1_0)) or (not((ap_const_lv8_3 = activation_read_reg_772)) and (icmp_ln94_fu_373_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state113;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (((ap_const_lv8_3 = activation_read_reg_772) and (icmp_ln87_reg_810 = ap_const_lv1_0)) or ((ap_const_lv8_3 = activation_read_reg_772) and (icmp_ln94_fu_373_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (cmp4_i19881_reg_826 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln87_reg_810 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln52_fu_433_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_2_fu_626_p3 = ap_const_lv1_1) and (icmp_ln1547_2_fu_620_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state52 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state52) and ((icmp_ln87_reg_810 = ap_const_lv1_0) or (not((ap_const_lv8_3 = activation_read_reg_772)) or ((icmp_ln77_fu_726_p2 = ap_const_lv1_1) or (icmp_ln1547_reg_895 = ap_const_lv1_1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state113 => 
                if ((not((ap_const_lv8_3 = activation_read_reg_772)) and (ap_const_logic_1 = ap_CS_fsm_state113) and (ap_const_boolean_0 = ap_block_state113_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state113;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;
    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;
    ap_ST_fsm_state103_blk <= ap_const_logic_0;
    ap_ST_fsm_state104_blk <= ap_const_logic_0;
    ap_ST_fsm_state105_blk <= ap_const_logic_0;
    ap_ST_fsm_state106_blk <= ap_const_logic_0;
    ap_ST_fsm_state107_blk <= ap_const_logic_0;
    ap_ST_fsm_state108_blk <= ap_const_logic_0;
    ap_ST_fsm_state109_blk <= ap_const_logic_0;

    ap_ST_fsm_state10_blk_assign_proc : process(grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_done)
    begin
        if ((grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state110_blk <= ap_const_logic_0;
    ap_ST_fsm_state111_blk <= ap_const_logic_0;
    ap_ST_fsm_state112_blk <= ap_const_logic_0;

    ap_ST_fsm_state113_blk_assign_proc : process(ap_block_state113_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state113_on_subcall_done)) then 
            ap_ST_fsm_state113_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state113_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_done)
    begin
        if ((grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;
    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_done)
    begin
        if ((grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;
    ap_ST_fsm_state93_blk <= ap_const_logic_0;
    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state95_blk <= ap_const_logic_0;
    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;
    ap_ST_fsm_state98_blk <= ap_const_logic_0;
    ap_ST_fsm_state99_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state113_on_subcall_done_assign_proc : process(activation_read_reg_772, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_ap_done, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_ap_done, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_ap_done, ap_predicate_op389_call_state113)
    begin
                ap_block_state113_on_subcall_done <= (((ap_const_lv8_1 = activation_read_reg_772) and (grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_ap_done = ap_const_logic_0)) or ((ap_const_lv8_2 = activation_read_reg_772) and (grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_ap_done = ap_const_logic_0)) or ((grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_ap_done = ap_const_logic_0) and (ap_predicate_op389_call_state113 = ap_const_boolean_1)));
    end process;


    ap_done_assign_proc : process(activation_read_reg_772, icmp_ln87_reg_810, icmp_ln1547_reg_895, ap_CS_fsm_state52, icmp_ln77_fu_726_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) and ((icmp_ln87_reg_810 = ap_const_lv1_0) or (not((ap_const_lv8_3 = activation_read_reg_772)) or ((icmp_ln77_fu_726_p2 = ap_const_lv1_1) or (icmp_ln1547_reg_895 = ap_const_lv1_1)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_lv1_0;

    ap_predicate_op389_call_state113_assign_proc : process(activation_read_reg_772)
    begin
                ap_predicate_op389_call_state113 <= (not((ap_const_lv8_1 = activation_read_reg_772)) and not((ap_const_lv8_2 = activation_read_reg_772)) and not((ap_const_lv8_3 = activation_read_reg_772)));
    end process;


    ap_ready_assign_proc : process(activation_read_reg_772, icmp_ln87_reg_810, icmp_ln1547_reg_895, ap_CS_fsm_state52, icmp_ln77_fu_726_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) and ((icmp_ln87_reg_810 = ap_const_lv1_0) or (not((ap_const_lv8_3 = activation_read_reg_772)) or ((icmp_ln77_fu_726_p2 = ap_const_lv1_1) or (icmp_ln1547_reg_895 = ap_const_lv1_1)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cmp4_i19881_fu_361_p2 <= "1" when (numOfInNeurons_read_reg_783 = ap_const_lv16_0) else "0";
    empty_36_fu_358_p1 <= numOfInNeurons_read_reg_783(14 - 1 downto 0);
    empty_fu_343_p1 <= numOfOutputNeurons(8 - 1 downto 0);
    fixed_V_fu_568_p3 <= 
        sub_ln1201_1_fu_562_p2 when (tmp_1_reg_920(0) = '1') else 
        tmp_2_cast_reg_931;

    grp_fu_638_ap_start_assign_proc : process(ap_CS_fsm_state19, icmp_ln1547_2_fu_620_p2, tmp_2_fu_626_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_2_fu_626_p3 = ap_const_lv1_1) and (icmp_ln1547_2_fu_620_p2 = ap_const_lv1_0))) then 
            grp_fu_638_ap_start <= ap_const_logic_1;
        else 
            grp_fu_638_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_1_fu_610_p4),26));


    grp_fu_756_ap_start_assign_proc : process(ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_fu_756_ap_start <= ap_const_logic_1;
        else 
            grp_fu_756_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_756_p0 <= (resArray_V_q0 & ap_const_lv24_0);
    grp_fu_767_p0 <= grp_fu_767_p00(8 - 1 downto 0);
    grp_fu_767_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_fu_168),14));
    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_ap_start <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_ap_start_reg;
    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_ap_start <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_ap_start_reg;
    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_ap_start <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_ap_start_reg;
    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_start <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_ap_start_reg;
    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_start <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_ap_start_reg;
    grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_start <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_ap_start_reg;
    i_11_fu_732_p2 <= std_logic_vector(unsigned(i_9_fu_180) + unsigned(ap_const_lv8_1));
    i_12_fu_438_p2 <= std_logic_vector(unsigned(i_fu_176) + unsigned(ap_const_lv8_1));
    icmp_ln1547_2_fu_620_p2 <= "1" when (signed(reg_338) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1547_fu_449_p2 <= "1" when (sum_V_fu_172 = ap_const_lv56_0) else "0";
    icmp_ln1548_fu_469_p2 <= "1" when (signed(ret_V_fu_464_p2) < signed(ap_const_lv17_1F500)) else "0";
    icmp_ln52_fu_433_p2 <= "1" when (zext_ln52_fu_429_p1 = numOfOutputNeurons_read_reg_776) else "0";
    icmp_ln77_fu_726_p2 <= "1" when (i_9_fu_180 = ap_const_lv8_80) else "0";
    icmp_ln87_fu_347_p2 <= "0" when (numOfOutputNeurons = ap_const_lv16_0) else "1";
    icmp_ln94_fu_373_p2 <= "1" when (zext_ln94_fu_369_p1 = numOfOutputNeurons_read_reg_776) else "0";
    idxprom10_i_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_fu_168),64));
    lhs_V_2_fu_596_p3 <= (ret_V_4_fu_591_p2 & ap_const_lv8_0);
    lshr_ln1201_fu_647_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_10000),to_integer(unsigned('0' & zext_ln67_fu_644_p1(31-1 downto 0)))));
    mul_ln1201_fu_521_p1 <= ap_const_lv50_1724288(26 - 1 downto 0);
    outNeurons_2_fu_378_p2 <= std_logic_vector(unsigned(outNeurons_fu_168) + unsigned(ap_const_lv8_1));

    output_V_address0_assign_proc : process(activation_read_reg_772, ap_CS_fsm_state2, output_V_addr_reg_843, ap_CS_fsm_state6, ap_CS_fsm_state12, zext_ln56_fu_444_p1, output_V_addr_1_reg_890, ap_CS_fsm_state14, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_output_V_address0, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_output_V_address0, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_V_address0, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_V_address0, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_V_address0, ap_CS_fsm_state10, ap_CS_fsm_state113, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            output_V_address0 <= output_V_addr_1_reg_890;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_V_address0 <= zext_ln56_fu_444_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_V_address0 <= output_V_addr_reg_843;
        elsif ((not((ap_const_lv8_1 = activation_read_reg_772)) and not((ap_const_lv8_2 = activation_read_reg_772)) and not((ap_const_lv8_3 = activation_read_reg_772)) and (ap_const_logic_1 = ap_CS_fsm_state113))) then 
            output_V_address0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) and (ap_const_lv8_1 = activation_read_reg_772))) then 
            output_V_address0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) and (ap_const_lv8_2 = activation_read_reg_772))) then 
            output_V_address0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_V_address0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_output_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_V_address0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_output_V_address0;
        else 
            output_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    output_V_ce0_assign_proc : process(activation_read_reg_772, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state14, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_output_V_ce0, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_output_V_ce0, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_V_ce0, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_V_ce0, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_V_ce0, ap_CS_fsm_state10, ap_CS_fsm_state113, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_V_ce0 <= ap_const_logic_1;
        elsif ((not((ap_const_lv8_1 = activation_read_reg_772)) and not((ap_const_lv8_2 = activation_read_reg_772)) and not((ap_const_lv8_3 = activation_read_reg_772)) and (ap_const_logic_1 = ap_CS_fsm_state113))) then 
            output_V_ce0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) and (ap_const_lv8_1 = activation_read_reg_772))) then 
            output_V_ce0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) and (ap_const_lv8_2 = activation_read_reg_772))) then 
            output_V_ce0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_V_ce0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_output_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_V_ce0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_output_V_ce0;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state14, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_output_V_d0, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_lhs_out, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_V_d0 <= ap_const_lv16_F500;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_d0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_96_2_fu_322_lhs_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_V_d0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_output_V_d0;
        else 
            output_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_we0_assign_proc : process(ap_CS_fsm_state2, cmp4_i19881_reg_826, icmp_ln1548_reg_906, ap_CS_fsm_state14, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_output_V_we0, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (cmp4_i19881_reg_826 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln1548_reg_906 = ap_const_lv1_1)))) then 
            output_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_V_we0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_87_1_fu_277_output_V_we0;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_address0_assign_proc : process(activation_read_reg_772, zext_ln80_reg_995, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_r_address0, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_r_address0, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_r_address0, ap_CS_fsm_state113, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            output_r_address0 <= zext_ln80_reg_995(7 - 1 downto 0);
        elsif ((not((ap_const_lv8_1 = activation_read_reg_772)) and not((ap_const_lv8_2 = activation_read_reg_772)) and not((ap_const_lv8_3 = activation_read_reg_772)) and (ap_const_logic_1 = ap_CS_fsm_state113))) then 
            output_r_address0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) and (ap_const_lv8_1 = activation_read_reg_772))) then 
            output_r_address0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) and (ap_const_lv8_2 = activation_read_reg_772))) then 
            output_r_address0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_r_address0;
        else 
            output_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(activation_read_reg_772, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_r_ce0, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_r_ce0, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_r_ce0, ap_CS_fsm_state113, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            output_r_ce0 <= ap_const_logic_1;
        elsif ((not((ap_const_lv8_1 = activation_read_reg_772)) and not((ap_const_lv8_2 = activation_read_reg_772)) and not((ap_const_lv8_3 = activation_read_reg_772)) and (ap_const_logic_1 = ap_CS_fsm_state113))) then 
            output_r_ce0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) and (ap_const_lv8_1 = activation_read_reg_772))) then 
            output_r_ce0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) and (ap_const_lv8_2 = activation_read_reg_772))) then 
            output_r_ce0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_r_ce0;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(activation_read_reg_772, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_r_d0, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_r_d0, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_r_d0, ap_CS_fsm_state113, ap_CS_fsm_state112, trunc_ln717_fu_762_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            output_r_d0 <= trunc_ln717_fu_762_p1;
        elsif ((not((ap_const_lv8_1 = activation_read_reg_772)) and not((ap_const_lv8_2 = activation_read_reg_772)) and not((ap_const_lv8_3 = activation_read_reg_772)) and (ap_const_logic_1 = ap_CS_fsm_state113))) then 
            output_r_d0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_r_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) and (ap_const_lv8_1 = activation_read_reg_772))) then 
            output_r_d0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_r_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) and (ap_const_lv8_2 = activation_read_reg_772))) then 
            output_r_d0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_r_d0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(activation_read_reg_772, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_r_we0, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_r_we0, grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_r_we0, ap_CS_fsm_state113, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            output_r_we0 <= ap_const_logic_1;
        elsif ((not((ap_const_lv8_1 = activation_read_reg_772)) and not((ap_const_lv8_2 = activation_read_reg_772)) and not((ap_const_lv8_3 = activation_read_reg_772)) and (ap_const_logic_1 = ap_CS_fsm_state113))) then 
            output_r_we0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_116_1_fu_313_output_r_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) and (ap_const_lv8_1 = activation_read_reg_772))) then 
            output_r_we0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_16_1_fu_304_output_r_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) and (ap_const_lv8_2 = activation_read_reg_772))) then 
            output_r_we0 <= grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_30_1_fu_295_output_r_we0;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_2_fu_659_p0 <= r_V_2_fu_659_p00(32 - 1 downto 0);
    r_V_2_fu_659_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1201_reg_972),42));
    r_V_2_fu_659_p1 <= r_V_2_fu_659_p10(26 - 1 downto 0);
    r_V_2_fu_659_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_967),42));

    resArray_V_address0_assign_proc : process(ap_CS_fsm_state11, resArray_V_addr_1_reg_910, zext_ln80_fu_738_p1, ap_CS_fsm_state52, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            resArray_V_address0 <= zext_ln80_fu_738_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            resArray_V_address0 <= resArray_V_addr_1_reg_910;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            resArray_V_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            resArray_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    resArray_V_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state52, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            resArray_V_ce0 <= ap_const_logic_1;
        else 
            resArray_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    resArray_V_d0_assign_proc : process(ap_CS_fsm_state11, storemerge8_reg_263, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            resArray_V_d0 <= storemerge8_reg_263;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            resArray_V_d0 <= ap_const_lv32_0;
        else 
            resArray_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    resArray_V_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            resArray_V_we0 <= ap_const_logic_1;
        else 
            resArray_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_3_fu_604_p2 <= std_logic_vector(unsigned(lhs_V_2_fu_596_p3) + unsigned(ap_const_lv24_10000));
    ret_V_4_fu_591_p2 <= std_logic_vector(unsigned(fixed_V_reg_937) - unsigned(whole_V_fu_584_p3));
    ret_V_fu_464_p2 <= std_logic_vector(signed(sext_ln712_fu_460_p1) - signed(sext_ln52_reg_858));
    rhs_fu_404_p3 <= (grp_nnlayer_OneDSP_Pipeline_VITIS_LOOP_45_1_fu_287_overflow_4_out & ap_const_lv8_0);
    select_ln1201_fu_556_p3 <= 
        tmp_1_cast_fu_546_p4 when (tmp_1_reg_920(0) = '1') else 
        tmp_2_cast_reg_931;
    select_ln7_fu_494_p3 <= 
        sub_ln712_fu_488_p2 when (tmp_fu_480_p3(0) = '1') else 
        x_V_fu_475_p2;
        sext_ln52_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_fu_404_p3),17));

    sext_ln712_fu_460_p0 <= output_V_q0;
        sext_ln712_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln712_fu_460_p0),17));

        sext_ln740_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_1_reg_949),32));

    shl_ln1_fu_700_p3 <= (storemerge8_reg_263 & ap_const_lv16_0);
    shl_ln740_1_fu_690_p2 <= std_logic_vector(shift_left(unsigned(shl_ln740_fu_684_p2),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln740_fu_684_p2 <= std_logic_vector(shift_left(unsigned(sext_ln740_fu_681_p1),to_integer(unsigned('0' & zext_ln64_fu_678_p1(31-1 downto 0)))));
    sub_ln1201_1_fu_562_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(select_ln1201_fu_556_p3));
    sub_ln1201_fu_541_p2 <= std_logic_vector(unsigned(ap_const_lv49_0) - unsigned(trunc_ln1201_reg_926));
    sub_ln712_fu_488_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(x_V_fu_475_p2));
    sum_V_1_fu_712_p2 <= std_logic_vector(unsigned(zext_ln712_fu_708_p1) + unsigned(sum_V_fu_172));
    t_fu_510_p3 <= (select_ln7_reg_915 & ap_const_lv8_0);
    tmp_1_cast_fu_546_p4 <= sub_ln1201_fu_541_p2(47 downto 32);
    tmp_2_fu_626_p3 <= reg_338(15 downto 15);
    tmp_V_1_fu_610_p4 <= ret_V_3_fu_604_p2(23 downto 8);
    tmp_fu_480_p3 <= x_V_fu_475_p2(15 downto 15);
    trunc_ln1201_fu_527_p1 <= mul_ln1201_fu_521_p2(49 - 1 downto 0);
    trunc_ln717_fu_762_p1 <= grp_fu_756_p2(16 - 1 downto 0);
    whole_V_fu_584_p3 <= (p_Result_s_reg_942 & ap_const_lv8_0);
    x_V_fu_475_p2 <= std_logic_vector(unsigned(output_V_q0) - unsigned(rhs_reg_853));
    zext_ln52_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_176),16));
    zext_ln56_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_176),64));
    zext_ln64_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_reg_942),32));
    zext_ln67_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_reg_942),32));
    zext_ln712_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_700_p3),56));
    zext_ln717_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_977),32));
    zext_ln80_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_fu_180),64));
    zext_ln94_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_fu_168),16));
end behav;
