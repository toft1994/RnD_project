-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity NeuralNetwork_run_classification_Pipeline_runLayer_innerloop2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    resArray2_load : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln69_1 : IN STD_LOGIC_VECTOR (6 downto 0);
    zext_ln59_2 : IN STD_LOGIC_VECTOR (12 downto 0);
    weights_s_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    weights_s_ce0 : OUT STD_LOGIC;
    weights_s_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    resArray1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    resArray1_ce0 : OUT STD_LOGIC;
    resArray1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    resArray2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    resArray2_ce0 : OUT STD_LOGIC;
    resArray2_we0 : OUT STD_LOGIC;
    resArray2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of NeuralNetwork_run_classification_Pipeline_runLayer_innerloop2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_46 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv13_46 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln71_1_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal resArray2_addr_reg_243 : STD_LOGIC_VECTOR (6 downto 0);
    signal resArray2_addr_reg_243_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal resArray2_addr_reg_243_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln71_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_reg_262 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_reg_262_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_reg_262_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal weights_load_reg_266 : STD_LOGIC_VECTOR (7 downto 0);
    signal resArray1_load_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln74_reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln69_1_cast_fu_120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln59_fu_179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_fu_162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal neuronIndex_fu_48 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln49_fu_167_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_neuronIndex_1 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_fu_52 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln74_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inNeurons_2_fu_56 : STD_LOGIC_VECTOR (6 downto 0);
    signal inNeurons_3_fu_156_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_inNeurons : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln59_2_cast_fu_116_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul9_cast_fu_146_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln59_fu_173_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component NeuralNetwork_mul_32s_8s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component NeuralNetwork_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_8s_32_1_1_U18 : component NeuralNetwork_mul_32s_8s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        din0 => resArray1_load_reg_271,
        din1 => weights_load_reg_266,
        dout => mul_ln74_fu_203_p2);

    flow_control_loop_pipe_sequential_init_U : component NeuralNetwork_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    empty_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    empty_fu_52 <= resArray2_load;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    empty_fu_52 <= add_ln74_fu_211_p2;
                end if;
            end if; 
        end if;
    end process;

    inNeurons_2_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln71_1_fu_150_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    inNeurons_2_fu_56 <= inNeurons_3_fu_156_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    inNeurons_2_fu_56 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    neuronIndex_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln71_1_fu_150_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    neuronIndex_fu_48 <= add_ln49_fu_167_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    neuronIndex_fu_48 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln71_reg_262_pp0_iter1_reg <= icmp_ln71_reg_262;
                resArray1_load_reg_271 <= resArray1_q0;
                resArray2_addr_reg_243 <= zext_ln69_1_cast_fu_120_p1(7 - 1 downto 0);
                resArray2_addr_reg_243_pp0_iter1_reg <= resArray2_addr_reg_243;
                weights_load_reg_266 <= weights_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln71_1_fu_150_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln71_reg_262 <= icmp_ln71_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln71_reg_262_pp0_iter2_reg <= icmp_ln71_reg_262_pp0_iter1_reg;
                mul_ln74_reg_276 <= mul_ln74_fu_203_p2;
                resArray2_addr_reg_243_pp0_iter2_reg <= resArray2_addr_reg_243_pp0_iter1_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln49_fu_167_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_neuronIndex_1) + unsigned(ap_const_lv13_46));
    add_ln59_fu_173_p2 <= std_logic_vector(unsigned(zext_ln59_2_cast_fu_116_p1) + unsigned(phi_mul9_cast_fu_146_p1));
    add_ln74_fu_211_p2 <= std_logic_vector(unsigned(mul_ln74_reg_276) + unsigned(empty_fu_52));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln71_1_fu_150_p2)
    begin
        if (((icmp_ln71_1_fu_150_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_inNeurons_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, inNeurons_2_fu_56)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_inNeurons <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_inNeurons <= inNeurons_2_fu_56;
        end if; 
    end process;


    ap_sig_allocacmp_neuronIndex_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, neuronIndex_fu_48, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_neuronIndex_1 <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_neuronIndex_1 <= neuronIndex_fu_48;
        end if; 
    end process;

    icmp_ln71_1_fu_150_p2 <= "1" when (ap_sig_allocacmp_inNeurons = ap_const_lv7_46) else "0";
    icmp_ln71_fu_184_p2 <= "1" when (inNeurons_3_fu_156_p2 = ap_const_lv7_46) else "0";
    inNeurons_3_fu_156_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_inNeurons) + unsigned(ap_const_lv7_1));
    phi_mul9_cast_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_neuronIndex_1),14));
    resArray1_address0 <= zext_ln71_fu_162_p1(7 - 1 downto 0);

    resArray1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            resArray1_ce0 <= ap_const_logic_1;
        else 
            resArray1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    resArray2_address0 <= resArray2_addr_reg_243_pp0_iter2_reg;

    resArray2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            resArray2_ce0 <= ap_const_logic_1;
        else 
            resArray2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    resArray2_d0 <= std_logic_vector(unsigned(mul_ln74_reg_276) + unsigned(empty_fu_52));

    resArray2_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln71_reg_262_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln71_reg_262_pp0_iter2_reg = ap_const_lv1_1))) then 
            resArray2_we0 <= ap_const_logic_1;
        else 
            resArray2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_s_address0 <= zext_ln59_fu_179_p1(14 - 1 downto 0);

    weights_s_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weights_s_ce0 <= ap_const_logic_1;
        else 
            weights_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln59_2_cast_fu_116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln59_2),14));
    zext_ln59_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln59_fu_173_p2),64));
    zext_ln69_1_cast_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln69_1),64));
    zext_ln71_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_inNeurons),64));
end behav;
