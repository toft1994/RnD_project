-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity runLayer_runLayer_Pipeline_VITIS_LOOP_30_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_Inputs_AWVALID : OUT STD_LOGIC;
    m_axi_Inputs_AWREADY : IN STD_LOGIC;
    m_axi_Inputs_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_Inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Inputs_WVALID : OUT STD_LOGIC;
    m_axi_Inputs_WREADY : IN STD_LOGIC;
    m_axi_Inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_Inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Inputs_WLAST : OUT STD_LOGIC;
    m_axi_Inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Inputs_ARVALID : OUT STD_LOGIC;
    m_axi_Inputs_ARREADY : IN STD_LOGIC;
    m_axi_Inputs_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_Inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Inputs_RVALID : IN STD_LOGIC;
    m_axi_Inputs_RREADY : OUT STD_LOGIC;
    m_axi_Inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_Inputs_RLAST : IN STD_LOGIC;
    m_axi_Inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Inputs_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_Inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Inputs_BVALID : IN STD_LOGIC;
    m_axi_Inputs_BREADY : OUT STD_LOGIC;
    m_axi_Inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln30 : IN STD_LOGIC_VECTOR (62 downto 0);
    numOfInNeurons_cast1 : IN STD_LOGIC_VECTOR (15 downto 0);
    tmp_weights_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    tmp_weights_ce0 : OUT STD_LOGIC;
    tmp_weights_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv4 : IN STD_LOGIC_VECTOR (15 downto 0);
    tmp_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    tmp_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of runLayer_runLayer_Pipeline_VITIS_LOOP_30_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln30_reg_240 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_itr_reg_123 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op41_readreq_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal icmp_ln30_reg_240_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln30_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal Inputs_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal Inputs_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal conv4_cast_fu_135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv4_cast_reg_225 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln30_cast_fu_143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_cast_reg_230 : STD_LOGIC_VECTOR (63 downto 0);
    signal inNeurons_1_reg_235 : STD_LOGIC_VECTOR (15 downto 0);
    signal inNeurons_1_reg_235_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal inNeurons_1_reg_235_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal inNeurons_1_reg_235_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal inNeurons_1_reg_235_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal inNeurons_1_reg_235_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal inNeurons_1_reg_235_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal inNeurons_1_reg_235_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln30_reg_240_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_240_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_240_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_240_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_240_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_240_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_240_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_240_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_240_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_240_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Inputs_addr_read_reg_255 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_init : STD_LOGIC;
    signal zext_ln32_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_66 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_202_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_tmp_load : STD_LOGIC_VECTOR (15 downto 0);
    signal inNeurons_fu_70 : STD_LOGIC_VECTOR (15 downto 0);
    signal inNeurons_2_fu_170_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_inNeurons_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sext_ln30_1_fu_160_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln30_1_fu_160_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal numOfInNeurons_cast1_cast_fu_139_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal inNeurons_2_fu_170_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_202_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_402 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component runLayer_mac_muladd_16s_16s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component runLayer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_16s_16s_16ns_16_4_1_U8 : component runLayer_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_weights_q0,
        din1 => Inputs_addr_read_reg_255,
        din2 => ap_sig_allocacmp_tmp_load,
        ce => grp_fu_202_ce,
        dout => grp_fu_202_p3);

    flow_control_loop_pipe_sequential_init_U : component runLayer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    first_itr_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    first_itr_reg_123 <= ap_const_lv1_1;
                elsif ((ap_const_boolean_1 = ap_condition_402)) then 
                    first_itr_reg_123 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    inNeurons_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln30_fu_164_p2 = ap_const_lv1_1))) then 
                    inNeurons_fu_70 <= inNeurons_2_fu_170_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    inNeurons_fu_70 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    tmp_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp_fu_66 <= ap_const_lv16_0;
                elsif (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (icmp_ln30_reg_240_pp0_iter11_reg = ap_const_lv1_1))) then 
                    tmp_fu_66 <= grp_fu_202_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_240_pp0_iter7_reg = ap_const_lv1_1))) then
                Inputs_addr_read_reg_255 <= m_axi_Inputs_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln30_reg_240_pp0_iter10_reg <= icmp_ln30_reg_240_pp0_iter9_reg;
                icmp_ln30_reg_240_pp0_iter11_reg <= icmp_ln30_reg_240_pp0_iter10_reg;
                icmp_ln30_reg_240_pp0_iter2_reg <= icmp_ln30_reg_240_pp0_iter1_reg;
                icmp_ln30_reg_240_pp0_iter3_reg <= icmp_ln30_reg_240_pp0_iter2_reg;
                icmp_ln30_reg_240_pp0_iter4_reg <= icmp_ln30_reg_240_pp0_iter3_reg;
                icmp_ln30_reg_240_pp0_iter5_reg <= icmp_ln30_reg_240_pp0_iter4_reg;
                icmp_ln30_reg_240_pp0_iter6_reg <= icmp_ln30_reg_240_pp0_iter5_reg;
                icmp_ln30_reg_240_pp0_iter7_reg <= icmp_ln30_reg_240_pp0_iter6_reg;
                icmp_ln30_reg_240_pp0_iter8_reg <= icmp_ln30_reg_240_pp0_iter7_reg;
                icmp_ln30_reg_240_pp0_iter9_reg <= icmp_ln30_reg_240_pp0_iter8_reg;
                inNeurons_1_reg_235_pp0_iter2_reg <= inNeurons_1_reg_235_pp0_iter1_reg;
                inNeurons_1_reg_235_pp0_iter3_reg <= inNeurons_1_reg_235_pp0_iter2_reg;
                inNeurons_1_reg_235_pp0_iter4_reg <= inNeurons_1_reg_235_pp0_iter3_reg;
                inNeurons_1_reg_235_pp0_iter5_reg <= inNeurons_1_reg_235_pp0_iter4_reg;
                inNeurons_1_reg_235_pp0_iter6_reg <= inNeurons_1_reg_235_pp0_iter5_reg;
                inNeurons_1_reg_235_pp0_iter7_reg <= inNeurons_1_reg_235_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    conv4_cast_reg_225(15 downto 0) <= conv4_cast_fu_135_p1(15 downto 0);
                icmp_ln30_reg_240 <= icmp_ln30_fu_164_p2;
                icmp_ln30_reg_240_pp0_iter1_reg <= icmp_ln30_reg_240;
                inNeurons_1_reg_235 <= ap_sig_allocacmp_inNeurons_1;
                inNeurons_1_reg_235_pp0_iter1_reg <= inNeurons_1_reg_235;
                sext_ln30_cast_reg_230 <= sext_ln30_cast_fu_143_p1;
            end if;
        end if;
    end process;
    conv4_cast_reg_225(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    Inputs_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_Inputs_ARREADY, ap_predicate_op41_readreq_state2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op41_readreq_state2 = ap_const_boolean_1))) then 
            Inputs_blk_n_AR <= m_axi_Inputs_ARREADY;
        else 
            Inputs_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    Inputs_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter8, m_axi_Inputs_RVALID, icmp_ln30_reg_240_pp0_iter7_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln30_reg_240_pp0_iter7_reg = ap_const_lv1_1))) then 
            Inputs_blk_n_R <= m_axi_Inputs_RVALID;
        else 
            Inputs_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter8, m_axi_Inputs_RVALID, icmp_ln30_reg_240_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln30_reg_240_pp0_iter7_reg = ap_const_lv1_1) and (m_axi_Inputs_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, m_axi_Inputs_RVALID, ap_block_state2_io, icmp_ln30_reg_240_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln30_reg_240_pp0_iter7_reg = ap_const_lv1_1) and (m_axi_Inputs_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, m_axi_Inputs_RVALID, ap_block_state2_io, icmp_ln30_reg_240_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln30_reg_240_pp0_iter7_reg = ap_const_lv1_1) and (m_axi_Inputs_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(m_axi_Inputs_ARREADY, ap_predicate_op41_readreq_state2)
    begin
                ap_block_state2_io <= ((m_axi_Inputs_ARREADY = ap_const_logic_0) and (ap_predicate_op41_readreq_state2 = ap_const_boolean_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter8_assign_proc : process(m_axi_Inputs_RVALID, icmp_ln30_reg_240_pp0_iter7_reg)
    begin
                ap_block_state9_pp0_stage0_iter8 <= ((icmp_ln30_reg_240_pp0_iter7_reg = ap_const_lv1_1) and (m_axi_Inputs_RVALID = ap_const_logic_0));
    end process;


    ap_condition_402_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln30_reg_240, ap_block_pp0_stage0_11001)
    begin
                ap_condition_402 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_240 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln30_fu_164_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln30_fu_164_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln30_reg_240, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln30_reg_240 = ap_const_lv1_0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter11_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op41_readreq_state2_assign_proc : process(icmp_ln30_reg_240, first_itr_reg_123)
    begin
                ap_predicate_op41_readreq_state2 <= ((first_itr_reg_123 = ap_const_lv1_1) and (icmp_ln30_reg_240 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_inNeurons_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, inNeurons_fu_70)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_inNeurons_1 <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_inNeurons_1 <= inNeurons_fu_70;
        end if; 
    end process;


    ap_sig_allocacmp_tmp_load_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0, icmp_ln30_reg_240_pp0_iter11_reg, tmp_fu_66, grp_fu_202_p3)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (icmp_ln30_reg_240_pp0_iter11_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_tmp_load <= grp_fu_202_p3;
        else 
            ap_sig_allocacmp_tmp_load <= tmp_fu_66;
        end if; 
    end process;

    conv4_cast_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv4),32));

    grp_fu_202_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_202_ce <= ap_const_logic_1;
        else 
            grp_fu_202_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln30_fu_164_p2 <= "1" when (signed(sext_ln30_1_fu_160_p1) < signed(numOfInNeurons_cast1_cast_fu_139_p1)) else "0";
    inNeurons_2_fu_170_p0 <= ap_sig_allocacmp_inNeurons_1;
    inNeurons_2_fu_170_p2 <= std_logic_vector(signed(inNeurons_2_fu_170_p0) + signed(ap_const_lv16_1));
    m_axi_Inputs_ARADDR <= sext_ln30_cast_reg_230;
    m_axi_Inputs_ARBURST <= ap_const_lv2_0;
    m_axi_Inputs_ARCACHE <= ap_const_lv4_0;
    m_axi_Inputs_ARID <= ap_const_lv1_0;
    m_axi_Inputs_ARLEN <= conv4_cast_reg_225;
    m_axi_Inputs_ARLOCK <= ap_const_lv2_0;
    m_axi_Inputs_ARPROT <= ap_const_lv3_0;
    m_axi_Inputs_ARQOS <= ap_const_lv4_0;
    m_axi_Inputs_ARREGION <= ap_const_lv4_0;
    m_axi_Inputs_ARSIZE <= ap_const_lv3_0;
    m_axi_Inputs_ARUSER <= ap_const_lv1_0;

    m_axi_Inputs_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op41_readreq_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op41_readreq_state2 = ap_const_boolean_1))) then 
            m_axi_Inputs_ARVALID <= ap_const_logic_1;
        else 
            m_axi_Inputs_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_Inputs_AWADDR <= ap_const_lv64_0;
    m_axi_Inputs_AWBURST <= ap_const_lv2_0;
    m_axi_Inputs_AWCACHE <= ap_const_lv4_0;
    m_axi_Inputs_AWID <= ap_const_lv1_0;
    m_axi_Inputs_AWLEN <= ap_const_lv32_0;
    m_axi_Inputs_AWLOCK <= ap_const_lv2_0;
    m_axi_Inputs_AWPROT <= ap_const_lv3_0;
    m_axi_Inputs_AWQOS <= ap_const_lv4_0;
    m_axi_Inputs_AWREGION <= ap_const_lv4_0;
    m_axi_Inputs_AWSIZE <= ap_const_lv3_0;
    m_axi_Inputs_AWUSER <= ap_const_lv1_0;
    m_axi_Inputs_AWVALID <= ap_const_logic_0;
    m_axi_Inputs_BREADY <= ap_const_logic_0;

    m_axi_Inputs_RREADY_assign_proc : process(ap_enable_reg_pp0_iter8, icmp_ln30_reg_240_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_240_pp0_iter7_reg = ap_const_lv1_1))) then 
            m_axi_Inputs_RREADY <= ap_const_logic_1;
        else 
            m_axi_Inputs_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_Inputs_WDATA <= ap_const_lv16_0;
    m_axi_Inputs_WID <= ap_const_lv1_0;
    m_axi_Inputs_WLAST <= ap_const_logic_0;
    m_axi_Inputs_WSTRB <= ap_const_lv2_0;
    m_axi_Inputs_WUSER <= ap_const_lv1_0;
    m_axi_Inputs_WVALID <= ap_const_logic_0;
    numOfInNeurons_cast1_cast_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(numOfInNeurons_cast1),17));
    sext_ln30_1_fu_160_p0 <= ap_sig_allocacmp_inNeurons_1;
        sext_ln30_1_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln30_1_fu_160_p0),17));

        sext_ln30_cast_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln30),64));

    tmp_out <= tmp_fu_66;

    tmp_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln30_reg_240_pp0_iter10_reg)
    begin
        if (((icmp_ln30_reg_240_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tmp_out_ap_vld <= ap_const_logic_1;
        else 
            tmp_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_weights_address0 <= zext_ln32_fu_187_p1(7 - 1 downto 0);

    tmp_weights_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tmp_weights_ce0 <= ap_const_logic_1;
        else 
            tmp_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln32_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inNeurons_1_reg_235_pp0_iter7_reg),64));
end behav;
