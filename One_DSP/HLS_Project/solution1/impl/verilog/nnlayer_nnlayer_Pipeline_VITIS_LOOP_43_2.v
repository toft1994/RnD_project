// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nnlayer_nnlayer_Pipeline_VITIS_LOOP_43_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_V_load,
        idxprom7_i,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        sext_ln1245,
        add_ln47,
        add_ln40,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        weightIndexAdded,
        weightIndexAdded_ap_vld,
        outNeurons,
        outNeurons_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] output_V_load;
input  [7:0] idxprom7_i;
output  [7:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
input  [15:0] sext_ln1245;
input  [15:0] add_ln47;
input  [8:0] add_ln40;
output  [7:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [15:0] output_V_d0;
output  [15:0] weightIndexAdded;
output   weightIndexAdded_ap_vld;
output  [8:0] outNeurons;
output   outNeurons_ap_vld;

reg ap_idle;
reg input_r_ce0;
reg output_V_ce0;
reg output_V_we0;
reg weightIndexAdded_ap_vld;
reg outNeurons_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln43_fu_159_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [23:0] sext_ln1245_cast_fu_137_p1;
reg  signed [23:0] sext_ln1245_cast_reg_251;
reg   [7:0] output_V_addr_reg_256;
reg   [7:0] output_V_addr_reg_256_pp0_iter1_reg;
reg   [7:0] output_V_addr_reg_256_pp0_iter2_reg;
reg   [7:0] output_V_addr_reg_256_pp0_iter3_reg;
wire   [0:0] ifzero_fu_176_p2;
reg   [0:0] ifzero_reg_270;
reg   [0:0] ifzero_reg_270_pp0_iter1_reg;
reg   [0:0] ifzero_reg_270_pp0_iter2_reg;
reg   [0:0] ifzero_reg_270_pp0_iter3_reg;
wire   [63:0] idxprom7_i_cast_fu_141_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln45_fu_171_p1;
reg   [8:0] inc3740_i_fu_74;
wire   [8:0] add_ln43_fu_165_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_inc3740_i_load;
reg   [15:0] lhs_fu_78;
reg   [15:0] ap_sig_allocacmp_lhs_load;
wire  signed [23:0] trunc_ln_fu_214_p1;
wire   [23:0] grp_fu_229_p3;
wire  signed [15:0] grp_fu_229_p1;
wire   [23:0] grp_fu_229_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

nnlayer_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_r_q0),
    .din1(grp_fu_229_p1),
    .din2(grp_fu_229_p2),
    .ce(1'b1),
    .dout(grp_fu_229_p3)
);

nnlayer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln43_fu_159_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            inc3740_i_fu_74 <= add_ln43_fu_165_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            inc3740_i_fu_74 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            lhs_fu_78 <= output_V_load;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            lhs_fu_78 <= {{trunc_ln_fu_214_p1[23:8]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ifzero_reg_270_pp0_iter1_reg <= ifzero_reg_270;
        output_V_addr_reg_256 <= idxprom7_i_cast_fu_141_p1;
        output_V_addr_reg_256_pp0_iter1_reg <= output_V_addr_reg_256;
        sext_ln1245_cast_reg_251 <= sext_ln1245_cast_fu_137_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ifzero_reg_270_pp0_iter2_reg <= ifzero_reg_270_pp0_iter1_reg;
        ifzero_reg_270_pp0_iter3_reg <= ifzero_reg_270_pp0_iter2_reg;
        output_V_addr_reg_256_pp0_iter2_reg <= output_V_addr_reg_256_pp0_iter1_reg;
        output_V_addr_reg_256_pp0_iter3_reg <= output_V_addr_reg_256_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_159_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ifzero_reg_270 <= ifzero_fu_176_p2;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_159_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_inc3740_i_load = 9'd0;
    end else begin
        ap_sig_allocacmp_inc3740_i_load = inc3740_i_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_sig_allocacmp_lhs_load = {{trunc_ln_fu_214_p1[23:8]}};
    end else begin
        ap_sig_allocacmp_lhs_load = lhs_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_159_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ifzero_fu_176_p2 == 1'd1))) begin
        outNeurons_ap_vld = 1'b1;
    end else begin
        outNeurons_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ifzero_reg_270_pp0_iter3_reg == 1'd1))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_159_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ifzero_fu_176_p2 == 1'd1))) begin
        weightIndexAdded_ap_vld = 1'b1;
    end else begin
        weightIndexAdded_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln43_fu_165_p2 = (ap_sig_allocacmp_inc3740_i_load + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_229_p1 = sext_ln1245_cast_reg_251;

assign grp_fu_229_p2 = {{ap_sig_allocacmp_lhs_load}, {8'd0}};

assign icmp_ln43_fu_159_p2 = ((ap_sig_allocacmp_inc3740_i_load == 9'd256) ? 1'b1 : 1'b0);

assign idxprom7_i_cast_fu_141_p1 = idxprom7_i;

assign ifzero_fu_176_p2 = ((add_ln43_fu_165_p2 == 9'd256) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln45_fu_171_p1;

assign outNeurons = add_ln40;

assign output_V_address0 = output_V_addr_reg_256_pp0_iter3_reg;

assign output_V_d0 = {{trunc_ln_fu_214_p1[23:8]}};

assign sext_ln1245_cast_fu_137_p1 = $signed(sext_ln1245);

assign trunc_ln_fu_214_p1 = grp_fu_229_p3;

assign weightIndexAdded = add_ln47;

assign zext_ln45_fu_171_p1 = ap_sig_allocacmp_inc3740_i_load;

endmodule //nnlayer_nnlayer_Pipeline_VITIS_LOOP_43_2
