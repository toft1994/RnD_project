// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module NeuralNetwork_run_classification_Pipeline_runLayer_innerloop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        resArray1_load,
        zext_ln69,
        zext_ln74_1,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weights_s_address0,
        weights_s_ce0,
        weights_s_q0,
        resArray1_address0,
        resArray1_ce0,
        resArray1_we0,
        resArray1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] resArray1_load;
input  [6:0] zext_ln69;
input  [6:0] zext_ln74_1;
output  [6:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [13:0] weights_s_address0;
output   weights_s_ce0;
input  [7:0] weights_s_q0;
output  [6:0] resArray1_address0;
output   resArray1_ce0;
output   resArray1_we0;
output  [31:0] resArray1_d0;

reg ap_idle;
reg input_r_ce0;
reg weights_s_ce0;
reg resArray1_ce0;
reg resArray1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln71_fu_153_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [6:0] resArray1_addr_reg_249;
reg   [6:0] resArray1_addr_reg_249_pp0_iter1_reg;
reg   [6:0] resArray1_addr_reg_249_pp0_iter2_reg;
wire   [0:0] icmp_ln71_2_fu_190_p2;
reg   [0:0] icmp_ln71_2_reg_268;
reg   [0:0] icmp_ln71_2_reg_268_pp0_iter1_reg;
reg   [0:0] icmp_ln71_2_reg_268_pp0_iter2_reg;
reg  signed [7:0] weights_load_reg_272;
reg  signed [31:0] input_r_load_reg_277;
wire   [31:0] mul_ln74_fu_209_p2;
reg   [31:0] mul_ln74_reg_282;
wire   [63:0] zext_ln69_cast_fu_130_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln59_1_fu_180_p1;
wire   [63:0] zext_ln74_fu_185_p1;
reg   [12:0] phi_mul_fu_58;
wire   [12:0] add_ln59_1_fu_168_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_phi_mul_load;
reg   [31:0] empty_fu_62;
wire   [31:0] add_ln74_fu_217_p2;
reg   [6:0] inNeurons_fu_66;
wire   [6:0] inNeurons_5_fu_159_p2;
reg   [6:0] ap_sig_allocacmp_inNeurons_4;
wire   [12:0] zext_ln74_1_cast_fu_126_p1;
wire   [12:0] add_ln59_fu_174_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

NeuralNetwork_mul_32s_8s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 32 ))
mul_32s_8s_32_1_1_U7(
    .din0(input_r_load_reg_277),
    .din1(weights_load_reg_272),
    .dout(mul_ln74_fu_209_p2)
);

NeuralNetwork_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            empty_fu_62 <= resArray1_load;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            empty_fu_62 <= add_ln74_fu_217_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln71_fu_153_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            inNeurons_fu_66 <= inNeurons_5_fu_159_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            inNeurons_fu_66 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln71_fu_153_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            phi_mul_fu_58 <= add_ln59_1_fu_168_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            phi_mul_fu_58 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln71_2_reg_268_pp0_iter1_reg <= icmp_ln71_2_reg_268;
        input_r_load_reg_277 <= input_r_q0;
        resArray1_addr_reg_249 <= zext_ln69_cast_fu_130_p1;
        resArray1_addr_reg_249_pp0_iter1_reg <= resArray1_addr_reg_249;
        weights_load_reg_272 <= weights_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln71_fu_153_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln71_2_reg_268 <= icmp_ln71_2_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln71_2_reg_268_pp0_iter2_reg <= icmp_ln71_2_reg_268_pp0_iter1_reg;
        mul_ln74_reg_282 <= mul_ln74_fu_209_p2;
        resArray1_addr_reg_249_pp0_iter2_reg <= resArray1_addr_reg_249_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((icmp_ln71_fu_153_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_inNeurons_4 = 7'd0;
    end else begin
        ap_sig_allocacmp_inNeurons_4 = inNeurons_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_phi_mul_load = 13'd0;
    end else begin
        ap_sig_allocacmp_phi_mul_load = phi_mul_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        resArray1_ce0 = 1'b1;
    end else begin
        resArray1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln71_2_reg_268_pp0_iter2_reg == 1'd1))) begin
        resArray1_we0 = 1'b1;
    end else begin
        resArray1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_s_ce0 = 1'b1;
    end else begin
        weights_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln59_1_fu_168_p2 = (ap_sig_allocacmp_phi_mul_load + 13'd70);

assign add_ln59_fu_174_p2 = (ap_sig_allocacmp_phi_mul_load + zext_ln74_1_cast_fu_126_p1);

assign add_ln74_fu_217_p2 = (mul_ln74_reg_282 + empty_fu_62);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln71_2_fu_190_p2 = ((inNeurons_5_fu_159_p2 == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_153_p2 = ((ap_sig_allocacmp_inNeurons_4 == 7'd80) ? 1'b1 : 1'b0);

assign inNeurons_5_fu_159_p2 = (ap_sig_allocacmp_inNeurons_4 + 7'd1);

assign input_r_address0 = zext_ln74_fu_185_p1;

assign resArray1_address0 = resArray1_addr_reg_249_pp0_iter2_reg;

assign resArray1_d0 = (mul_ln74_reg_282 + empty_fu_62);

assign weights_s_address0 = zext_ln59_1_fu_180_p1;

assign zext_ln59_1_fu_180_p1 = add_ln59_fu_174_p2;

assign zext_ln69_cast_fu_130_p1 = zext_ln69;

assign zext_ln74_1_cast_fu_126_p1 = zext_ln74_1;

assign zext_ln74_fu_185_p1 = ap_sig_allocacmp_inNeurons_4;

endmodule //NeuralNetwork_run_classification_Pipeline_runLayer_innerloop
